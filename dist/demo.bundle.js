(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var KnockoutComponents = (function () {
    function KnockoutComponents(appvm) {
        ko.components.register('chart-component', {
            viewModel: {
                createViewModel: function (params, componentInfo) {
                    // - 'params' is an object whose key/value pairs are the parameters
                    //   passed from the component binding or custom element
                    // - 'componentInfo.element' is the element the component is being
                    //   injected into. When createViewModel is called, the template has
                    //   already been injected into this element, but isn't yet bound.
                    // - 'componentInfo.templateNodes' is an array containing any DOM
                    //   nodes that have been supplied to the component. See below.
                    return appvm.insertChart(params.index, params, componentInfo ? componentInfo.element : undefined);
                }
            },
            template: { element: 'chart-component-template' }
        });
    }
    return KnockoutComponents;
}());
exports.KnockoutComponents = KnockoutComponents;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Main module
 */
var KnockoutComponents_1 = require("./KnockoutComponents");
var KnockoutExtenions_1 = require("./plugins/KnockoutExtenions");
var AppViewModel_1 = require("./vm/AppViewModel");
var appModel = new AppViewModel_1.AppViewModel();
// init knockout extensions and components
//
var ext = new KnockoutExtenions_1.KnockoutExtenions();
var components = new KnockoutComponents_1.KnockoutComponents(appModel);
// bind view model
ko.applyBindings(appModel);
// init application
appModel
    .init()
    .then(function () {
    // hide splash screen
    $('#page-splash').hide();
})
    .catch(function (reason) {
    $('#page-splash').hide();
});
},{"./KnockoutComponents":1,"./plugins/KnockoutExtenions":3,"./vm/AppViewModel":7}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Custom knockout bindings
 */
var KnockoutExtenions = (function () {
    function KnockoutExtenions() {
        ko.bindingHandlers.winsize = {
            init: function (element, valueAccessor) {
                $(window).resize(function () {
                    var value = valueAccessor();
                    value({ width: $(window).width(), height: $(window).height() });
                });
            }
        };
        ko.bindingHandlers.domready = {
            init: function (element, valueAccessor) {
                $(document).ready(function () {
                    var value = valueAccessor();
                    value();
                });
            }
        };
        ko.virtualElements.allowedBindings.updateListviewOnChange = true;
        ko.bindingHandlers.updateListviewOnChange = {
            update: function (element, valueAccessor) {
                ko.utils.unwrapObservable(valueAccessor()); //grab dependency
                $('.list-component').listview({ refresh: true, mini: true, icon: '' });
                $('.collapsible-component').collapsible({ refresh: true, mini: true });
            }
        };
    }
    return KnockoutExtenions;
}());
exports.KnockoutExtenions = KnockoutExtenions;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var lychart = require("../../../src/lychart");
var DateUtils = lychart.utils.DateUtils;
var Uid = lychart.model.Uid;
var Utils_1 = require("./Utils");
var AssetService = (function () {
    function AssetService() {
    }
    AssetService.getAssets = function () {
        var self = this;
        if (this._assets) {
            return new Promise(function (resolve, reject) {
                resolve(self._assets);
            });
        }
        return new Promise(function (resolve, reject) {
            $.support.cors = true; // Otherwise "no transport" in IE 11.
            $.ajax({
                method: 'GET',
                dataType: 'json',
                url: settings.assetsUrl,
                contentType: 'application/json'
            })
                .then(function (data) {
                // save data and resolve
                self._assets = data;
                resolve(data);
            }, reject);
        });
    };
    return AssetService;
}());
exports.AssetService = AssetService;
function sendRequest(asset, timeStart, timeEnd, interval) {
    $.support.cors = true;
    var sets = {
        method: 'POST',
        crossDomain: true,
        dataType: 'json',
        url: settings.candlesUrl + asset,
        contentType: 'application/json',
        data: JSON.stringify({
            period: Utils_1.Utils.INTERVAL2PERIOD(interval),
            type: 'Bid',
            dateFrom: timeStart.toISOString(),
            dateTo: timeEnd.toISOString()
        })
    };
    return $.ajax(sets);
}
var DataService = (function () {
    function DataService() {
        this.readData = function (asset, timeStart, timeEnd, interval) {
            return sendRequest(asset, timeStart, timeEnd, interval);
        };
    }
    DataService.prototype.getCandle = function (asset, date, interval) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.readData(asset, date, DateUtils.addInterval(date, interval), interval)
                .then(function (response) { return DataService.resolveData(response); })
                .then(function (resolved) {
                resolve(resolved.data.length > 0 ? resolved.data[0] : undefined);
            });
        });
    };
    DataService.prototype.createDataSource = function (assetPairId, timeInterval) {
        var dataSource = new lychart.data.HttpDataSource(lychart.model.Candlestick, {
            url: '',
            autoupdate: false,
            readData: this.createDataReader(assetPairId),
            resolveData: DataService.resolveData,
            timeInterval: timeInterval,
            precision: 3
        });
        dataSource.asset = assetPairId;
        return dataSource;
    };
    DataService.prototype.createDataReader = function (asset) {
        return function (timeStart, timeEnd, interval) {
            return sendRequest(asset, timeStart, timeEnd, interval);
        };
    };
    return DataService;
}());
/**
 * Converts json from server to model.
 */
DataService.resolveData = function (response) {
    if (response) {
        var data = response.data
            .map(function (item) {
            var date = new Date(item.t);
            var stick = new lychart.model.Candlestick(date, item.c, item.o, item.h, item.l);
            // init uid
            stick.uid = new Uid(date);
            return stick;
        });
        return {
            dateFrom: new Date(response.dateFrom),
            dateTo: new Date(response.dateTo),
            interval: Utils_1.Utils.PERIOD2INTERVAL(response.period),
            data: data
        };
    }
    return {
        dateFrom: new Date(),
        dateTo: new Date(),
        interval: lychart.core.TimeInterval.notSet,
        data: []
    };
};
exports.DataService = DataService;
},{"../../../src/lychart":176,"./Utils":6}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Storage = (function () {
    function Storage() {
    }
    Storage.prototype.getItem = function (key) {
        if (localStorage) {
            return localStorage.getItem(key);
        }
        else {
            throw new Error('Local storage is not available.');
        }
    };
    Storage.prototype.setItem = function (key, value) {
        if (localStorage) {
            localStorage.setItem(key, value);
        }
        else {
            throw new Error('Local storage is not available.');
        }
    };
    return Storage;
}());
exports.Storage = Storage;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utils class.
 */
var lychart = require("../../../src/lychart");
var TimeInterval = lychart.core.TimeInterval;
var Utils = (function () {
    function Utils() {
    }
    Utils.INTERVAL2PERIOD = function (interval) {
        switch (interval) {
            case TimeInterval.sec: return 'Sec';
            case TimeInterval.min: return 'Minute';
            case TimeInterval.hour: return 'Hour';
            case TimeInterval.day: return 'Day';
            case TimeInterval.month: return 'Month';
            default: throw new Error('Unexpected interval.');
        }
    };
    Utils.PERIOD2INTERVAL = function (period) {
        switch (period) {
            case 'Sec': return TimeInterval.sec;
            case 'Minute': return TimeInterval.min;
            case 'Hour': return TimeInterval.hour;
            case 'Day': return TimeInterval.day;
            case 'Month': return TimeInterval.month;
            default: throw new Error('Unexpected period.');
        }
    };
    return Utils;
}());
exports.Utils = Utils;
},{"../../../src/lychart":176}],7:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DataService_1 = require("../services/DataService");
var ChartViewModel_1 = require("./ChartViewModel");
var AppViewModel = (function () {
    function AppViewModel() {
        var _this = this;
        this.frameSize = { width: 0, height: 0 };
        this.mode = 1;
        this.charts = [];
        this.initialized = [];
        this.assets = [];
        this.dataService = new DataService_1.DataService();
        this.figures = ko.observableArray([
            { name: 'line', text: 'Line' },
            { name: 'hline', text: 'H-Line' },
            { name: 'vline', text: 'V-Line' },
            { name: 'rect', text: 'Rect' },
            { name: 'triangle', text: 'Triangle' },
            { name: 'path', text: 'Path' },
            { name: 'pitchfork', text: 'Pitchfork' },
            { name: 'text', text: 'Text' },
            { name: 'ellipse', text: 'Ellipse' },
            { name: 'trendchannel', text: 'Trend Channel' },
            { name: 'curve', text: 'Curve' },
            { name: 'daterange', text: 'Date Range' },
            { name: 'fibofan', text: 'Fibo Fan' },
            { name: 'fibolevel', text: 'Fibo Level' },
            { name: 'fiboprojection', text: 'Fibo Projection' },
            { name: 'fibotimeprojection', text: 'Fibo Time Projection' },
            { name: 'gannfan', text: 'Gann Fan' },
            { name: 'ohlcproj', text: 'OHLC Proj' }
        ]);
        this.onComponentLoaded = function (chartComponent) {
            // let index = -1;
            // this.charts.forEach((cvm, i) => {
            //     index = i;
            //     return cvm === chartComponent;
            // });
            // console.log(`avm: onComponentLoaded. index=${index} initialized= ${this.initialized[index]}`);
            // if (!this.initialized[index]) {
            //     const layout = this.getChartLayout(index);
            //     this.initialized[index] = chartComponent.init(layout.w, layout.h, layout.v);
            // }
        };
        this.onready = function () {
            _this.updateChildComponents();
        };
        this.onresize = function (size) {
            _this.resizeFrame(size.width, size.height);
            _this.updateChildComponents();
        };
    }
    AppViewModel.prototype.cmdAddFigure = function (figureName) {
        // close popup
        $('#popupMenu').popup('close');
        // start drawing
        if (this.selectedChart) {
            this.selectedChart.cmdAddFigure(figureName);
        }
    };
    AppViewModel.prototype.cmdSetCurrentChart = function (vm) {
        this.selectedChart = vm;
    };
    AppViewModel.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _i, _b, chart, e_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.$frame = $('#frame');
                        this.resizeFrame($(window).width(), $(window).height());
                        console.log('Loading assets.');
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, DataService_1.AssetService.getAssets()];
                    case 2:
                        _a.assets = _c.sent();
                        console.log('Assets are loaded.');
                        for (_i = 0, _b = this.charts; _i < _b.length; _i++) {
                            chart = _b[_i];
                            chart.assets(this.assets);
                        }
                        this.initChildComponents();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _c.sent();
                        console.error('Error during loading: ' + e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AppViewModel.prototype.insertChart = function (index, params, node) {
        if (!node) {
            throw new Error('Node must be specified.');
        }
        if (this.charts[index] === undefined) {
            this.charts[index] = new ChartViewModel_1.ChartViewModel(params, node, this.assets, this.dataService);
            this.initialized[index] = false;
            return this.charts[index];
        }
        else {
            throw new Error("Chart is already created at index = " + index + ".");
        }
    };
    AppViewModel.prototype.setMode = function (n) {
        this.mode = n;
        this.updateChildComponents();
    };
    AppViewModel.prototype.resizeFrame = function (w, h) {
        this.frameSize = { width: w, height: h };
        this.$frame.height(h - 2);
    };
    AppViewModel.prototype.initChildComponents = function () {
        var _this = this;
        this.charts.forEach(function (chart, index) {
            if (!_this.initialized[index]) {
                var layout = _this.getChartLayout(index);
                _this.initialized[index] = chart.init(layout.w, layout.h, layout.v);
            }
        });
    };
    AppViewModel.prototype.updateChildComponents = function () {
        var _this = this;
        this.charts.forEach(function (c, i) {
            var layout = _this.getChartLayout(i);
            c.setVisible(layout.v);
            c.resize(layout.w, layout.h);
        });
    };
    AppViewModel.prototype.getChartLayout = function (chartIndex) {
        var frameHeight = this.frameSize.height - 50;
        var frameWidth = this.frameSize.width - 6;
        if (chartIndex === 0) {
            return this.mode === 1
                ? { w: this.frameSize.width, h: frameHeight - 2, v: true }
                : { w: frameWidth / 2, h: frameHeight / 2 - 2, v: true };
        }
        else {
            return this.mode === 1
                ? { w: frameWidth / 2, h: frameHeight / 2 - 2, v: false }
                : { w: frameWidth / 2, h: frameHeight / 2 - 2, v: true };
        }
    };
    return AppViewModel;
}());
exports.AppViewModel = AppViewModel;
},{"../services/DataService":4,"./ChartViewModel":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ChartViewModel class. View model of a specific chart.
 */
var lychart = require("../../../src/lychart");
var ChartBoard = lychart.ChartBoard;
var Storage_1 = require("../services/Storage");
var PropsViewModel_1 = require("./PropsViewModel");
var TreeViewModel_1 = require("./TreeViewModel");
var PANEL_WIDTH = 200;
var ChartViewModel = (function () {
    function ChartViewModel(params, node, assets, dataService) {
        var _this = this;
        this.actualIndicators = [];
        this.editPropertiesMode = ko.observable(false);
        this.visible = ko.observable(false);
        this.width = ko.observable(0);
        this.height = ko.observable(0);
        this.assets = ko.observableArray([]);
        this.selectedAsset = ko.observable('BTCCHF');
        this.selectedInterval = ko.observable('hour');
        this.selectedChartType = ko.observable('candle');
        this.selectedCompareAsset = ko.observable('BTCCHF');
        this.selectedIndicators = ko.observableArray([]);
        this.panelVisible = ko.observable(false);
        this.panelWidth = ko.observable(44);
        this.panelHeight = ko.observable(0);
        /*
         * Event handlers
        */
        this.onAssetChanged = function () {
            console.log('cvm: event "asset changed"');
            _this.resetChart();
        };
        this.onIntervalChanged = function () {
            console.log('cvm: event "interval changed"');
            _this.resetChart();
        };
        this.onChartTypeChanged = function () {
            _this.board.setChartType(_this.selectedChartType());
            _this.treeVM.update();
            // this.board.render();
        };
        this.onIndicatorsChanged = function () {
            var selected = _this.selectedIndicators();
            var added = selected ? selected.filter(function (item) { return !_this.actualIndicators.some(function (existing) { return existing === item; }); }) : [];
            var removed = selected ? _this.actualIndicators.filter(function (existing) { return !selected.some(function (sel) { return sel === existing; }); }) : _this.actualIndicators;
            added.forEach(function (indicator) {
                var splits = indicator.split('_');
                _this.changeIndicator(splits[0], splits[0], parseInt(splits[1], 10), true);
            });
            removed.forEach(function (indicator) {
                var splits = indicator.split('_');
                _this.changeIndicator(splits[0], splits[0], parseInt(splits[1], 10), false);
            });
            _this.actualIndicators = selected ? selected : [];
            _this.treeVM.update();
            _this.board.render();
        };
        this.tree_onItemSelected = function (arg) {
            _this.propsVM.rebuild(arg.object);
            _this.editPropertiesMode(true);
        };
        this.props_onClosing = function () {
            _this.editPropertiesMode(false);
        };
        this.props_onApplied = function () {
            _this.board.render();
        };
        this.board_onObjectSelected = function (arg) {
            _this.tree_onItemSelected(new TreeViewModel_1.ItemSelectedArg('', arg.obj));
        };
        this.board_onObjectTreeChanged = function (arg) {
            _this.treeVM.update();
        };
        this.changeIndicator = function (uid, indicatorType, index, state) {
            if (state) {
                _this.board.addIndicator(uid, indicatorType, index);
            }
            else {
                _this.board.removeIndicator(uid);
            }
        };
        this.assets(assets);
        this.node = node;
        this.params = params;
        this.dataService = dataService;
        this.selectedAsset.subscribe(this.onAssetChanged);
        this.selectedInterval.subscribe(this.onIntervalChanged);
        this.selectedChartType.subscribe(this.onChartTypeChanged);
        this.selectedIndicators.subscribe(this.onIndicatorsChanged);
        this.$chartContainer = $('.chart-container', this.node);
        // Init chart board
        //
        var offset = this.$chartContainer.offset();
        this.board = new ChartBoard(this.$chartContainer[0], offset.left, offset.top, 200, 200, lychart.core.TimeInterval.min, new Storage_1.Storage(), this.dataService);
        this.board.objectSelected.on(this.board_onObjectSelected);
        this.board.objectTreeChanged.on(this.board_onObjectTreeChanged);
        console.log('cvm: chart board created.');
        // Init tree vm
        //
        this.treeVM = new TreeViewModel_1.TreeViewModel(this.board);
        this.treeVM.itemSelected.on(this.tree_onItemSelected);
        // Init props vm
        //
        this.propsVM = new PropsViewModel_1.PropsViewModel($('.properties', this.node)[0], this.board);
        this.propsVM.propsClosingEvent.on(this.props_onClosing);
        this.propsVM.propsAppliedEvent.on(this.props_onApplied);
    }
    ChartViewModel.prototype.afterLoad = function () {
        if (this.params.loaded) {
            this.params.loaded(this);
        }
    };
    ChartViewModel.prototype.cmdAddFigure = function (figureType) {
        if (figureType) {
            this.board.drawing.start(figureType);
        }
    };
    ChartViewModel.prototype.cmdCompare = function () {
        var asset = this.selectedCompareAsset();
        var ds = this.dataService.createDataSource(asset, str2interval(this.selectedInterval()));
        this.board.addChart(lychart.utils.UidUtils.NEWUID(), asset, lychart.core.ChartType.candle, ds);
    };
    ChartViewModel.prototype.cmdShowPanel = function (visible) {
        this.panelVisible(visible);
        this.panelWidth(visible ? PANEL_WIDTH : 44);
        this.resizeChartContainer();
        this.board.render();
    };
    ChartViewModel.prototype.init = function (w, h, visible) {
        console.log('cvm: initializing...');
        this.width(w);
        this.height(h);
        this.visible(visible);
        var initialized = this.resetChart();
        this.treeVM.update();
        if (initialized) {
            console.log('Initialized');
        }
        else {
            console.log('Not initialized');
        }
        return initialized;
    };
    ChartViewModel.prototype.resize = function (w, h) {
        this.width(w);
        this.height(h);
        this.resizeChartContainer();
        this.board.render();
    };
    ChartViewModel.prototype.setVisible = function (value) {
        this.visible(value);
    };
    ChartViewModel.prototype.resizeChartContainer = function () {
        // Compute size of chart based on component size and panels size
        //
        var w = this.width();
        var h = this.height();
        var $chartToolbar = $('.chart-toolbar', this.node);
        var chartH = Math.max(h - $chartToolbar.height(), 0);
        var chartW = Math.max(this.panelVisible() ? w - PANEL_WIDTH : w - 44, 0);
        // resize container
        //
        this.$chartContainer.height(chartH);
        this.$chartContainer.width(chartW);
        // resize board
        //
        this.board.resize(chartW, chartH);
        var offset = this.$chartContainer.offset();
        this.board.offset = new lychart.shared.Point(offset.left, offset.top);
        // resize panel
        this.panelHeight(chartH - 2);
    };
    /**
     * Changes chart to the selected asset pair and time interval.
     * @param assetPairId
     * @param timeInterval
     */
    ChartViewModel.prototype.setChart = function (assetPairId, timeInterval) {
        if (!assetPairId || !timeInterval) {
            return false;
        }
        if (this.dataSource) {
            this.dataSource.dispose();
        }
        console.log('cvm: creating data source...');
        // recreate data source
        this.dataSource = this.dataService.createDataSource(assetPairId, timeInterval);
        this.board.setTimeInterval(timeInterval);
        this.board.setDataSource(assetPairId, // uid
        assetPairId, // name
        (timeInterval === lychart.core.TimeInterval.sec) ? lychart.core.ChartType.line : lychart.core.ChartType.candle, this.dataSource);
        return true;
    };
    ChartViewModel.prototype.resetChart = function () {
        return this.setChart(this.selectedAsset(), str2interval(this.selectedInterval()));
    };
    return ChartViewModel;
}());
exports.ChartViewModel = ChartViewModel;
function str2interval(value) {
    var timeinterval = value;
    return lychart.core.TimeInterval[timeinterval];
}
},{"../../../src/lychart":176,"../services/Storage":5,"./PropsViewModel":9,"./TreeViewModel":10}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * PropsViewModel class. View model of a specific chart.
 */
var lychart = require("../../../src/lychart");
var Event = lychart.shared.Event;
var SettingSet = lychart.core.SettingSet;
var SettingType = lychart.core.SettingType;
var PropsEvent = (function (_super) {
    __extends(PropsEvent, _super);
    function PropsEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PropsEvent;
}(Event));
exports.PropsEvent = PropsEvent;
var PropsViewModel = (function () {
    //private $propsContainer: JQuery;
    function PropsViewModel(container, board) {
        this.container = container;
        this.board = board;
        this.propsClosingEvent = new PropsEvent();
        this.propsAppliedEvent = new PropsEvent();
        this.title = ko.observable('');
    }
    PropsViewModel.prototype.cmdApply = function () {
        if (this.obj && typeof this.obj.setSettings === 'function') {
            var settings = this.collectSettings();
            this.obj.setSettings(settings);
        }
        this.propsAppliedEvent.trigger();
    };
    PropsViewModel.prototype.cmdCancel = function () {
        this.propsClosingEvent.trigger();
    };
    PropsViewModel.prototype.rebuild = function (obj) {
        if (!obj) {
            throw new Error('Object is not specified');
        }
        this.obj = obj;
        // set title
        this.title(obj.name || '');
        // clear controls
        //this.$propsContainer = $('.properties', this.container);
        $(this.container).empty();
        // load settings
        if (typeof obj.getSettings === 'function') {
            var settings = obj.getSettings();
            this.settingName = settings.name;
            this.iterate(settings, '', this.title());
        }
        else {
            this.settingName = '';
        }
    };
    PropsViewModel.prototype.iterate = function (ss, path, title) {
        path = path ? path + '.' + ss.name : ss.name;
        for (var _i = 0, _a = Object.keys(ss.settings); _i < _a.length; _i++) {
            var s = _a[_i];
            var setting = ss.settings[s];
            // Set group's name
            if (setting.group && setting.dispalyName) {
                var $div = $('<h4 />')
                    .text(setting.dispalyName)
                    .addClass('subtitle')
                    .appendTo(this.container);
            }
            this.populateSetting(setting, path + '.' + setting.name);
            this.iterate(setting, path, '');
        }
    };
    PropsViewModel.prototype.populateSetting = function (ss, fullPath) {
        if (ss.group) {
            return;
        }
        var $div = $('<div />')
            .addClass('field-contain')
            .appendTo(this.container);
        $('<label />')
            .text(ss.dispalyName)
            .addClass('field-title')
            .appendTo($div);
        switch (ss.settingType) {
            case SettingType.check:
                $('<input />', {
                    type: 'checkbox',
                    name: fullPath,
                    checked: ss.value === 'true',
                    value: ss.value
                })
                    .addClass('field-input')
                    .attr('data-type', ss.settingType)
                    .appendTo($div);
                break;
            case SettingType.color:
                $('<input />', {
                    type: 'color',
                    name: fullPath,
                    value: ss.value
                })
                    .addClass('field-input')
                    .attr('data-type', ss.settingType)
                    .appendTo($div);
                break;
            case SettingType.numeric:
                $('<input />', {
                    type: 'text',
                    name: fullPath,
                    value: ss.value
                })
                    .addClass('field-input')
                    .attr('data-type', ss.settingType)
                    .appendTo($div);
                break;
            case SettingType.date:
                $('<input />', {
                    type: 'date',
                    name: fullPath,
                    value: ss.value
                })
                    .addClass('field-input')
                    .attr('data-type', ss.settingType)
                    .appendTo($div);
                break;
            case SettingType.select:
                var sel_1 = $('<select />', {
                    name: fullPath
                })
                    .addClass('field-input')
                    .attr('data-type', ss.settingType)
                    .appendTo($div);
                ss.options.forEach(function (option) {
                    $('<option />', {
                        value: option.value,
                        text: option.text,
                        selected: (option.value === ss.value) ? 'selected' : false
                    })
                        .appendTo(sel_1);
                });
                break;
            default:
        }
    };
    PropsViewModel.prototype.collectSettings = function () {
        var s = new SettingSet(this.settingName);
        var elements = $('.field-input', this.container).get();
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var element = elements_1[_i];
            var attrType = element.getAttribute('type');
            var path = element.getAttribute('name');
            if (path) {
                var parts = path.split('.');
                var name_1 = parts.length > 0 ? parts[parts.length - 1] : '';
                var ss = new SettingSet(name_1);
                ss.settingType = element.getAttribute('data-type') || '';
                if (attrType === 'checkbox') {
                    ss.value = element.checked.toString();
                }
                else if (attrType === 'color') {
                    ss.value = element.value;
                }
                else if (attrType === 'text') {
                    ss.value = element.value;
                }
                else if (attrType === 'date') {
                    ss.value = element.value;
                }
                else if (element instanceof HTMLSelectElement) {
                    var options = element.options;
                    ss.value = options[options.selectedIndex].value;
                }
                s.setSetting(path, ss);
            }
        }
        return s;
    };
    return PropsViewModel;
}());
exports.PropsViewModel = PropsViewModel;
},{"../../../src/lychart":176}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TreeViewModel class. View model of a specific chart.
 */
var lychart = require("../../../src/lychart");
var Event = lychart.shared.Event;
var ItemSelectedArg = (function () {
    function ItemSelectedArg(uid, object) {
        this.uid = uid;
        this.object = object;
    }
    return ItemSelectedArg;
}());
exports.ItemSelectedArg = ItemSelectedArg;
var ItemSelectedEvent = (function (_super) {
    __extends(ItemSelectedEvent, _super);
    function ItemSelectedEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ItemSelectedEvent;
}(Event));
exports.ItemSelectedEvent = ItemSelectedEvent;
var TreeViewModel = (function () {
    function TreeViewModel(board) {
        this.board = board;
        this.itemSelected = new ItemSelectedEvent();
        this.stacks = ko.observableArray();
        this.rebuild();
    }
    TreeViewModel.prototype.cmdSelectChart = function (chart) {
        if (chart && chart.uid) {
            this.selectObjectByUid(chart.uid);
        }
    };
    TreeViewModel.prototype.cmdSelectFigure = function (figure) {
        if (figure && figure.uid) {
            this.selectObjectByUid(figure.uid);
        }
    };
    TreeViewModel.prototype.selectObjectByUid = function (uid) {
        if (uid) {
            var obj = this.board.getObjectById(uid);
            if (obj) {
                this.itemSelected.trigger(new ItemSelectedArg(uid, obj));
            }
            else {
                console.error('Object is not found, uid = ' + uid);
            }
        }
    };
    TreeViewModel.prototype.update = function () {
        this.rebuild();
        //$('[data-role="collapsible"]').collapsible({ refresh: true });
        //$('[data-role="collapsible"]').collapsible({ mini: true });
        $('[data-role="collapsible"]').trigger('create');
    };
    TreeViewModel.prototype.rebuild = function () {
        this.stacks.removeAll();
        var self = this;
        this.board.stacks.forEach(function (stack) {
            var charts = stack.charts.map(function (s) {
                return { uid: s.uid, name: s.name };
            });
            var figures = stack.figures.map(function (f) {
                return { uid: f.uid, name: f.name };
            });
            self.stacks.push({
                uid: stack.uid,
                name: 'Chart',
                charts: charts,
                figures: figures
            });
        });
    };
    return TreeViewModel;
}());
exports.TreeViewModel = TreeViewModel;
},{"../../../src/lychart":176}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes related to grid calculation.
 */
var index_1 = require("../core/index");
var index_2 = require("../utils/index");
var Scale = (function () {
    function Scale(step, precision) {
        this.step = step;
        this.precision = precision;
    }
    return Scale;
}());
var NumberAutoGrid = (function () {
    function NumberAutoGrid(length, minInterval, range) {
        if (!length || length <= 0) {
            throw new Error("Argument \"length\" " + length + " is out of range.");
        }
        if (!minInterval || minInterval <= 0) {
            throw new Error("Argument \"minInterval\" " + minInterval + " is out of range.");
        }
        if (!range || range.end === undefined || range.start === undefined) {
            throw new Error('Argument "range" is not specified.');
        }
        this.length = length;
        this.minInterval = minInterval;
        this.range = range;
    }
    NumberAutoGrid.prototype.getGrid = function () {
        var grid = new index_1.Grid();
        // 1. Define how many bars can be fitted
        var _a = [1, Math.floor(this.length / 20)], minBars = _a[0], maxBars = _a[1];
        // 2. Choose fitting scale
        var rangeAbs = Math.abs(this.range.end - this.range.start);
        var selectedScale = undefined;
        for (var _i = 0, _b = NumberAutoGrid.scales; _i < _b.length; _i++) {
            var scale = _b[_i];
            if (scale.step < this.minInterval) {
                continue;
            }
            // how many bars does this scale require:
            var barsRequired = Math.floor(rangeAbs / scale.step) + 1;
            if (barsRequired >= minBars && barsRequired <= maxBars) {
                selectedScale = scale;
                break;
            }
        }
        if (selectedScale === undefined) {
            return grid;
        }
        // 3. Calculate first bar
        //
        // ... if start time is placed on bar use it, otherwise calculate where first bar lies
        var bar = 0;
        if (this.range.start % selectedScale.step === 0) {
            bar = this.range.start;
        }
        else {
            // ... add scale value and truncate 
            var num = this.range.start + (this.range.start >= 0 ? selectedScale.step : -selectedScale.step);
            bar = num - (num % selectedScale.step);
        }
        // 4. Calculate remaining bars
        var t = bar;
        while (t <= this.range.end + selectedScale.step) {
            grid.bars.push(t);
            t += selectedScale.step;
        }
        grid.precision = selectedScale.precision;
        return grid;
    };
    return NumberAutoGrid;
}());
NumberAutoGrid.scales = [
    new Scale(0.0001, 0),
    new Scale(0.0005, 0),
    new Scale(0.0010, 0),
    new Scale(0.0025, 0),
    new Scale(0.0050, 0),
    new Scale(0.0100, 0),
    new Scale(0.0250, 0),
    new Scale(0.0500, 0),
    new Scale(0.1000, 0),
    new Scale(0.2500, 0),
    new Scale(0.5000, 0),
    new Scale(1.0000, 0),
    new Scale(5.0000, 0),
    new Scale(10.0000, 0),
    new Scale(25.0000, 0),
    new Scale(50.0000, 0),
    new Scale(100, 0),
    new Scale(250, 0),
    new Scale(500, 0),
    new Scale(1000, 0),
    new Scale(2500, 0),
    new Scale(5000, 0),
    new Scale(10000, 0),
    new Scale(25000, 0),
    new Scale(50000, 0),
    new Scale(100000, 0),
    new Scale(250000, 0),
    new Scale(500000, 0)
];
exports.NumberAutoGrid = NumberAutoGrid;
var TimeAutoGrid = (function () {
    function TimeAutoGrid(width, minInterval, time, range) {
        if (!width || width <= 0) {
            throw new Error("Argument \"width\" " + width + " is out of range.");
        }
        if (!minInterval || minInterval < 0) {
            throw new Error("Argument \"minInterval\" " + minInterval + " is out of range.");
        }
        this.width = width;
        this.minInterval = minInterval;
        this.range = range;
        this.time = time;
        this.scale = TimeAutoGrid.selectScale(this.width, this.minInterval, this.range);
    }
    TimeAutoGrid.selectScale = function (width, minInterval, range) {
        var grid = [];
        // 1. Define how many bars can be fitted
        var _a = [1, Math.floor(width / 75)], minBars = _a[0], maxBars = _a[1];
        // 2. Choose fitting scale
        var rangeInMs = Math.abs(range.end.t.getTime() - range.start.t.getTime());
        var selectedScale = 0;
        for (var _i = 0, _b = TimeAutoGrid.scales; _i < _b.length; _i++) {
            var scale = _b[_i];
            if (scale < minInterval) {
                continue;
            }
            // how many bars does this scale require:
            var barsRequired = Math.floor(rangeInMs / scale) + 1;
            if (barsRequired >= minBars && barsRequired <= maxBars) {
                selectedScale = scale;
                break;
            }
        }
        return selectedScale;
    };
    Object.defineProperty(TimeAutoGrid.prototype, "current", {
        get: function () {
            return this.time.current;
        },
        enumerable: true,
        configurable: true
    });
    TimeAutoGrid.prototype.reset = function () {
        this.time.reset();
    };
    TimeAutoGrid.prototype.moveNext = function () {
        var found = false;
        while (this.time.moveNext()) {
            if (index_2.DateUtils.isRound(this.time.current.uid.t, this.scale)) {
                found = true;
                break;
            }
        }
        return found;
    };
    return TimeAutoGrid;
}());
TimeAutoGrid.scales = [
    index_1.TimeInterval.sec,
    index_1.TimeInterval.min,
    index_1.TimeInterval.min5,
    index_1.TimeInterval.min15,
    index_1.TimeInterval.min30,
    index_1.TimeInterval.hour,
    index_1.TimeInterval.hour4,
    index_1.TimeInterval.hour6,
    index_1.TimeInterval.hour12,
    index_1.TimeInterval.day,
    index_1.TimeInterval.day3,
    index_1.TimeInterval.week,
    index_1.TimeInterval.day10,
    index_1.TimeInterval.month
];
exports.TimeAutoGrid = TimeAutoGrid;
},{"../core/index":53,"../utils/index":175}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AutoGrid_1 = require("./AutoGrid");
var NumberAxis = (function () {
    function NumberAxis(length, interval, // Defines maximum zoom
        initialRange) {
        this._length = length;
        this._interval = interval;
        this._range = initialRange ? initialRange : { start: 0, end: 0 };
    }
    Object.defineProperty(NumberAxis.prototype, "length", {
        set: function (value) {
            this._length = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberAxis.prototype, "range", {
        get: function () {
            return this._range;
        },
        set: function (newRange) {
            this._range = newRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberAxis.prototype, "interval", {
        get: function () {
            return this._interval;
        },
        enumerable: true,
        configurable: true
    });
    NumberAxis.prototype.getGrid = function () {
        var autoGrid = new AutoGrid_1.NumberAutoGrid(this._length, this.interval, this.range);
        return autoGrid.getGrid();
    };
    NumberAxis.prototype.getValuesRange = function (fromX, toX) {
        if (fromX > 0 && toX > 0 && fromX < this._length && toX < this._length) {
            return {
                start: this.toValue(Math.max(fromX, toX)),
                end: this.toValue(Math.min(fromX, toX))
            };
        }
        else {
            return { start: undefined, end: undefined };
        }
    };
    NumberAxis.prototype.toValue = function (x) {
        var range = Math.abs(this.range.end - this.range.start);
        var max = Math.max(this.range.end, this.range.start);
        var d = x / this._length;
        return max - d * range;
    };
    NumberAxis.prototype.toX = function (value) {
        var range = Math.abs(this.range.end - this.range.start);
        var max = Math.max(this.range.end, this.range.start);
        var d = (max - value) / range; // inverted Y
        return d * this._length;
    };
    NumberAxis.prototype.toIndex = function (x) {
        return this.toValue(x);
    };
    NumberAxis.prototype.move = function (direction) {
    };
    NumberAxis.prototype.scale = function (direction) {
    };
    return NumberAxis;
}());
exports.NumberAxis = NumberAxis;
},{"./AutoGrid":11}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AutoGrid_1 = require("./AutoGrid");
var PriceAxis = (function () {
    function PriceAxis(length, interval, // defines maximum zoom
        initialRange) {
        this._length = length;
        this._interval = interval;
        this._range = initialRange ? initialRange : { start: 0, end: 0 };
    }
    Object.defineProperty(PriceAxis.prototype, "range", {
        get: function () {
            return this._range;
        },
        set: function (newRange) {
            this._range = newRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PriceAxis.prototype, "interval", {
        get: function () {
            return this._interval;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PriceAxis.prototype, "length", {
        set: function (value) {
            this._length = value;
        },
        enumerable: true,
        configurable: true
    });
    PriceAxis.prototype.getGrid = function () {
        var autoGrid = new AutoGrid_1.NumberAutoGrid(this._length, this.interval, this.range);
        return autoGrid.getGrid();
    };
    PriceAxis.prototype.getValuesRange = function (fromX, toX) {
        if (fromX > 0 && toX > 0 && fromX < this._length && toX < this._length) {
            return {
                start: this.toValue(Math.max(fromX, toX)),
                end: this.toValue(Math.min(fromX, toX))
            };
        }
        else {
            return { start: undefined, end: undefined };
        }
    };
    PriceAxis.prototype.toValue = function (x) {
        var range = Math.abs(this.range.end - this.range.start);
        var max = Math.max(this.range.end, this.range.start);
        var d = x / this._length;
        return max - d * range;
    };
    PriceAxis.prototype.toX = function (value) {
        var range = Math.abs(this.range.end - this.range.start);
        var max = Math.max(this.range.end, this.range.start);
        var d = (max - value) / range; // inverted Y
        return d * this._length;
    };
    PriceAxis.prototype.toIndex = function (x) {
        return this.toValue(x);
    };
    PriceAxis.prototype.move = function (direction) {
    };
    PriceAxis.prototype.scale = function (direction) {
    };
    return PriceAxis;
}());
exports.PriceAxis = PriceAxis;
},{"./AutoGrid":11}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var AutoGrid_1 = require("./AutoGrid");
exports.TimeAutoGrid = AutoGrid_1.TimeAutoGrid;
var NumberAxis_1 = require("./NumberAxis");
exports.NumberAxis = NumberAxis_1.NumberAxis;
var PriceAxis_1 = require("./PriceAxis");
exports.PriceAxis = PriceAxis_1.PriceAxis;
},{"./AutoGrid":11,"./NumberAxis":12,"./PriceAxis":13}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* CanvasWrapper class.
*
* @classdesc Incapsulates usage of canvas.
*/
var Enums_1 = require("./Enums");
var CanvasWrapper = (function () {
    function CanvasWrapper(context, width, height) {
        this.adj = 0.5; // Adjusment to remove blury lines. Default value for line width = 1.
        this.ctx = context;
        var dpr = window.devicePixelRatio || 1;
        var bsr = this.ctx.webkitBackingStorePixelRatio ||
            this.ctx.mozBackingStorePixelRatio ||
            this.ctx.msBackingStorePixelRatio ||
            this.ctx.oBackingStorePixelRatio ||
            this.ctx.backingStorePixelRatio || 1;
        this.ratio = dpr / bsr;
        this.w = width;
        this.h = height;
        this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);
    }
    Object.defineProperty(CanvasWrapper.prototype, "font", {
        get: function () {
            return this.ctx.font;
        },
        set: function (font) {
            this.ctx.font = font;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasWrapper.prototype, "fillStyle", {
        set: function (fillStyle) {
            this.ctx.fillStyle = fillStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasWrapper.prototype, "globalAlpha", {
        get: function () {
            return this.ctx.globalAlpha;
        },
        set: function (alpha) {
            this.ctx.globalAlpha = alpha;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasWrapper.prototype, "lineWidth", {
        get: function () {
            return this.ctx.lineWidth;
        },
        set: function (w) {
            this.adj = (w % 2) / 2; // If line is width 1, 3, 5... then adjust coords to remove blur.
            this.ctx.lineWidth = w;
        },
        enumerable: true,
        configurable: true
    });
    CanvasWrapper.prototype.clear = function () {
        this.ctx.clearRect(0, 0, this.round(this.w), this.round(this.h));
    };
    CanvasWrapper.prototype.getLineDash = function () {
        return this.ctx.getLineDash();
    };
    CanvasWrapper.prototype.setLineDash = function (segments) {
        this.ctx.setLineDash(segments);
    };
    CanvasWrapper.prototype.moveTo = function (x, y) {
        this.ctx.moveTo(this.round(x) + this.adj, this.round(y) + this.adj);
    };
    CanvasWrapper.prototype.lineTo = function (x, y) {
        this.ctx.lineTo(this.round(x) + this.adj, this.round(y) + this.adj);
    };
    CanvasWrapper.prototype.fill = function (fillRule) {
        this.ctx.fill(fillRule);
    };
    CanvasWrapper.prototype.fillRect = function (x, y, w, h) {
        this.ctx.fillRect(this.round(x), this.round(y), this.round(w), this.round(h));
    };
    CanvasWrapper.prototype.strokeRect = function (x, y, w, h) {
        this.ctx.strokeRect(this.round(x) + this.adj, this.round(y) + this.adj, this.round(w) - this.adj * 2, this.round(h) - this.adj * 2);
    };
    // Used with beginPath() / stroke() / strokeStyle / fill()
    CanvasWrapper.prototype.rect = function (x, y, w, h) {
        this.ctx.rect(this.round(x) + this.adj, this.round(y) + this.adj, this.round(w) - this.adj * 2, this.round(h) - this.adj * 2);
    };
    CanvasWrapper.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {
        this.ctx.arc(this.round(x), this.round(y), radius, startAngle, endAngle, anticlockwise);
    };
    CanvasWrapper.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        this.ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
    };
    CanvasWrapper.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
        this.ctx.quadraticCurveTo(cpx, cpy, x, y);
    };
    CanvasWrapper.prototype.fillText = function (s, x, y) {
        this.ctx.fillText(s, this.round(x), this.round(y));
    };
    CanvasWrapper.prototype.drawImage = function (canvas, offsetX, offsetY, width, height) {
        this.ctx.drawImage(canvas, offsetX, offsetY, width, height);
    };
    CanvasWrapper.prototype.resize = function (w, h) {
        this.w = w;
        this.h = h;
        // restore transformation
        this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);
    };
    CanvasWrapper.prototype.beginPath = function () {
        this.ctx.beginPath();
    };
    CanvasWrapper.prototype.stroke = function () {
        this.ctx.stroke();
    };
    CanvasWrapper.prototype.closePath = function () {
        this.ctx.closePath();
    };
    CanvasWrapper.prototype.setStrokeStyle = function (style) {
        this.ctx.strokeStyle = style;
    };
    CanvasWrapper.prototype.setFillStyle = function (style) {
        this.ctx.fillStyle = style;
    };
    CanvasWrapper.prototype.setTextAlign = function (v) {
        this.ctx.textAlign = Enums_1.CanvasTextBaseLine[v].toLowerCase();
    };
    CanvasWrapper.prototype.setTextBaseLine = function (v) {
        this.ctx.textBaseline = Enums_1.CanvasTextBaseLine[v].toLowerCase();
    };
    CanvasWrapper.prototype.measureText = function (text) {
        return this.ctx.measureText(text);
    };
    CanvasWrapper.prototype.strokeText = function (text, x, y, maxWidth) {
        this.ctx.strokeText(text, this.round(x), this.round(y), maxWidth);
    };
    CanvasWrapper.prototype.save = function () {
        this.ctx.save();
    };
    CanvasWrapper.prototype.restore = function () {
        this.ctx.restore();
    };
    CanvasWrapper.prototype.clip = function (fillRule) {
        this.ctx.clip(fillRule);
    };
    CanvasWrapper.prototype.round = function (n) {
        return (0.5 + n) | 0;
    };
    return CanvasWrapper;
}());
exports.CanvasWrapper = CanvasWrapper;
},{"./Enums":16}],16:[function(require,module,exports){
/**
* Canvas related enumerations.
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CanvasTextAlign;
(function (CanvasTextAlign) {
    CanvasTextAlign[CanvasTextAlign["Left"] = 0] = "Left";
    CanvasTextAlign[CanvasTextAlign["Center"] = 1] = "Center";
    CanvasTextAlign[CanvasTextAlign["Right"] = 2] = "Right";
})(CanvasTextAlign = exports.CanvasTextAlign || (exports.CanvasTextAlign = {}));
var CanvasTextBaseLine;
(function (CanvasTextBaseLine) {
    CanvasTextBaseLine[CanvasTextBaseLine["Top"] = 0] = "Top";
    CanvasTextBaseLine[CanvasTextBaseLine["Middle"] = 1] = "Middle";
    CanvasTextBaseLine[CanvasTextBaseLine["Bottom"] = 2] = "Bottom";
})(CanvasTextBaseLine = exports.CanvasTextBaseLine || (exports.CanvasTextBaseLine = {}));
var LinePattern;
(function (LinePattern) {
    LinePattern[LinePattern["Solid"] = 0] = "Solid";
    LinePattern[LinePattern["Dashed"] = 1] = "Dashed";
    LinePattern[LinePattern["Pointed"] = 2] = "Pointed";
})(LinePattern = exports.LinePattern || (exports.LinePattern = {}));
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var CanvasWrapper_1 = require("./CanvasWrapper");
exports.CanvasWrapper = CanvasWrapper_1.CanvasWrapper;
var Enums_1 = require("./Enums");
exports.CanvasTextAlign = Enums_1.CanvasTextAlign;
exports.CanvasTextBaseLine = Enums_1.CanvasTextBaseLine;
exports.LinePattern = Enums_1.LinePattern;
},{"./CanvasWrapper":15,"./Enums":16}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Chart class.
 */
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var index_3 = require("../render/index");
var Chart = (function (_super) {
    __extends(Chart, _super);
    function Chart(uid, name, chartType, chartArea, tAxis, offset, size, dataSource, yAxis, qtip) {
        var _this = _super.call(this, offset, size) || this;
        _this.chartType = chartType;
        _this.dataSource = dataSource;
        _this.yAxis = yAxis;
        _this.qtip = qtip;
        _this.isMouseOver = false;
        _this._uid = uid;
        _this._name = name;
        _this.area = chartArea;
        _this.tAxis = tAxis;
        // this.popup = new ChartPopup<T>(chartType, this.area, { x: 0, y: 0 }, size, dataSource, timeAxis, yAxis);
        // this.addChild(this.popup);
        //this.qtip.addTextBlock('title', 'CHART ' + uid);
        _this.renderer = index_3.RenderLocator.Instance.getChartRender(index_2.Candlestick, _this.chartType);
        return _this;
        // // Subscribe to events
        // Events.instance.mouseMove.on(this.onMouseMove);
    }
    Object.defineProperty(Chart.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chart.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chart.prototype, "precision", {
        get: function () {
            return this.dataSource.precision;
        },
        enumerable: true,
        configurable: true
    });
    Chart.prototype.getValuesRange = function (range) {
        return this.dataSource.getValuesRange(range);
    };
    Chart.prototype.handeMouse = function (relX, relY) {
        var iterator = this.dataSource.getIterator();
        this.qtip.removeTextBlock('name');
        this.qtip.removeTextBlock('value');
        this.qtip.addTextBlock('name', this.dataSource.name);
        var uid = this.tAxis.toValue(relX);
        if (uid !== undefined && iterator.goTo(function (item) { return item.uid.compare(uid) === 0; })) {
            var c = iterator.current;
            var text = c.toString(this.precision);
            this.qtip.addTextBlock('value', text);
        }
        _super.prototype.handeMouse.call(this, relX, relY);
    };
    Chart.prototype.render = function (context, renderLocator) {
        if (context.renderBase) {
            var iterator = this.dataSource.getIterator();
            this.renderer.render(this.area.baseCanvas, iterator, { x: 0, y: 0, w: this.size.width, h: this.size.height }, this.tAxis, this.yAxis);
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    Chart.prototype.isHit = function (p) {
        // if (mouseX > 0 && mouseX < this.size.width
        //     && mouseY > 0 && mouseY < this.size.height) {
        //     const renderLocator = RenderLocator.Instance;
        //     // 1. Get approximate range
        //     // 2. Get data in that range            
        //     // 3. Test hit area
        //     //
        //     const indexRange = this.frame.getIndexesRange(mouseX - 10, mouseX + 10);
        //     if (indexRange && indexRange.start && indexRange.end) {
        //         const data = this.frame.getDataBetween(this._uid, indexRange.start, indexRange.end);
        //         //const dataIterator = this.dataSource.getData(dateRange, this.timeAxis.interval);
        //         const dataRender = <IChartRender<Candlestick>>renderLocator.getChartRender(Candlestick, this.chartType);
        //         const item = dataRender.testHitArea(
        //             { x: mouseX, y: mouseY },
        //             data,
        //             {x: 0, y: 0, w: this.size.width, h: this.size.height },
        //             this.frame.xAxis,
        //             this.yAxis);
        //         if (item) {
        //             // TODO: uncomment
        //             //this.popup.item = item;
        //             return true;
        //         }
        //     }
        // }
        return this.isMouseOver;
    };
    Chart.prototype.setHovered = function (visible) {
        // TODO: uncomment
        //this.popup.visible = visible;
    };
    Chart.prototype.getSettings = function () {
        var merged = new index_1.SettingSet('chartsettings');
        merged.setSetting('datasource', this.dataSource.getSettings());
        merged.setSetting('visual', this.renderer.getSettings());
        return merged;
    };
    Chart.prototype.setSettings = function (settings) {
        var renderSettings = settings.getSetting('chartsettings.visual');
        if (renderSettings) {
            this.renderer.setSettings(renderSettings);
        }
        var dsSettings = settings.getSetting('chartsettings.datasource');
        if (dsSettings) {
            this.dataSource.setSettings(dsSettings);
        }
    };
    return Chart;
}(index_1.VisualComponent));
exports.Chart = Chart;
},{"../core/index":53,"../model/index":142,"../render/index":162}],19:[function(require,module,exports){
(function (global){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ChartBoard class.
 *
 * @classdesc Facade for the chart library.
 */
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../indicator/index");
var index_4 = require("../layout/index");
var index_5 = require("../render/index");
var index_6 = require("../shared/index");
var index_7 = require("../utils/index");
var ChartStack_1 = require("./ChartStack");
var Interfaces_1 = require("./Interfaces");
var StateFabric_1 = require("./StateFabric");
var States_1 = require("./States");
var TimeAxis_1 = require("./TimeAxis");
var TimeAxisComponent_1 = require("./TimeAxisComponent");
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var IndicatorDescription = (function () {
    function IndicatorDescription(uid, indicatorType) {
        this.uid = uid;
        this.indicatorType = indicatorType;
    }
    return IndicatorDescription;
}());
var ChartBoard = (function (_super) {
    __extends(ChartBoard, _super);
    // -- End of "Public Events" --
    function ChartBoard(container, offsetLeft, offsetTop, w, h, interval, storage, dataService) {
        var _this = _super.call(this, { x: offsetLeft, y: offsetTop }, { width: Math.max(w, 100), height: Math.max(h, 50) }) || this;
        _this.container = container;
        _this.chartStacks = [];
        _this.originalUid = '';
        _this.originalName = '';
        _this.dataSources = {};
        _this.indicators = {};
        _this.indicatorDescriptions = [];
        _this.dataSourceRegister = new index_2.DataSourceRegister();
        _this.addInterval = function (date, times) {
            return index_7.DateUtils.addInterval(date, _this.timeAxis.interval, times);
        };
        _this.onDataChanged = function (arg) {
            // Check if need to automove time range
            // if (arg.lastDateBefore && arg.lastDateAfter
            //     && this.frame.contains(arg.lastDateBefore)
            //     && !this.frame.contains(arg.lastDateAfter)) {
            //     //this.frame.moveTo(arg.lastDateAfter);
            // }
            //this.frame.automove(arg);
            _this.render();
        };
        _this.onLoadingRange = function (arg) {
            for (var _i = 0, _a = Object.keys(_this.dataSources); _i < _a.length; _i++) {
                var key = _a[_i];
                if (key !== 'primary-data-source') {
                    var ds = _this.dataSources[key];
                    if (arg.end) {
                        ds.loadRange(arg.start, arg.end);
                    }
                    else if (arg.count) {
                        ds.load(arg.start, arg.count);
                    }
                }
            }
        };
        _this.mouse = new index_1.Mouse();
        _this.ignoreNextMove = false;
        _this.onMouseWheel = function (event) {
            if (false == !!event) {
                event = window.event;
            }
            _this.state.onMouseWheel(_this, event);
            var direction = ((event.wheelDelta) ? event.wheelDelta / 120 : event.detail / -3) || 0;
            if (direction) {
                _this.timeAxis.scale(direction);
                _this.render();
            }
        };
        _this.onMouseMove = function (event) {
            // handle chrome behavior: click = down + move + up
            if (_this.ignoreNextMove) {
                _this.ignoreNextMove = false;
                return;
            }
            _a = [event.pageX, event.pageY], _this.mouse.pos.x = _a[0], _this.mouse.pos.y = _a[1];
            _this.state.onMouseMove(_this, _this.mouse);
            _super.prototype.handeMouse.call(_this, _this.mouse.pos.x - _this.offset.x, _this.mouse.pos.y - _this.offset.y);
            //Events.instance.mouseMove.trigger(new MouseEventArgument(this.mouse));
            if (_this.mouse.isEntered && _this.mouse.isDown) {
                _this.renderLayers(true, true);
            }
            else if (_this.mouse.isEntered) {
                _this.renderLayers(false, true);
            }
            var _a;
        };
        _this.onMouseEnter = function (event) {
            _this.mouse.isEntered = true;
            _this.state.onMouseEnter(_this, _this.mouse);
        };
        _this.onMouseLeave = function (event) {
            _this.mouse.isEntered = false;
            _this.mouse.isDown = false;
            _this.state.onMouseLeave(_this, _this.mouse);
        };
        _this.onMouseUp = function (event) {
            _this.ignoreNextMove = true;
            _this.mouse.isDown = false;
            _this.state.onMouseUp(_this, _this.mouse);
            _this.renderLayers(false, true);
        };
        _this.onMouseDown = function (event) {
            _this.mouse.isDown = true;
            var hitStack = _this.getHitStack();
            _this.state.onMouseDown(_this, _this.mouse, hitStack);
        };
        var N = 5;
        _this.storageMgr = new index_1.StorageManager(storage);
        _this.dataService = dataService;
        _this.area = new index_4.BoardArea(container, _this._size);
        var start = new Date();
        start.setUTCHours(start.getUTCHours() - 2);
        var now = new Date();
        _this.timeRange = { start: start, end: now };
        _this.timeAxis = new TimeAxis_1.TimeAxis(interval, now, N, _this.area.chartLength);
        _this.timeAxis.loadingRange.on(_this.onLoadingRange);
        _this.timeAxisComponent = new TimeAxisComponent_1.TimeAxisComponent(_this.area, _this.timeAxis);
        _this.addChild(_this.timeAxisComponent);
        // Create main chart area.
        // Create empty store container as the asset pair is not set yet.
        var chartStack = new ChartStack_1.ChartStack(index_7.UidUtils.NEWUID(), _this.area, _this.timeAxis, true, new index_1.StoreContainer(), _this);
        _this.chartStacks.push(chartStack);
        _this.addChild(chartStack);
        // Hook up event handlers
        //
        _this.container.addEventListener('DOMMouseScroll', _this.onMouseWheel, false);
        _this.container.addEventListener('mousewheel', _this.onMouseWheel, false);
        _this.container.addEventListener('mouseup', _this.onMouseUp, false);
        _this.container.addEventListener('mousedown', _this.onMouseDown, false);
        _this.container.addEventListener('mouseenter', _this.onMouseEnter, false);
        _this.container.addEventListener('mouseleave', _this.onMouseLeave, false);
        $(_this.container).mousemove(index_6.throttle(_this.onMouseMove, 10));
        // Go to default state
        _this.state = States_1.HoverState.instance;
        return _this;
    }
    Object.defineProperty(ChartBoard.prototype, "objectSelected", {
        // Public Events
        get: function () {
            return index_1.Events.instance.objectSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartBoard.prototype, "objectTreeChanged", {
        get: function () {
            return index_1.Events.instance.objectTreeChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartBoard.prototype, "stacks", {
        get: function () {
            return this.chartStacks.slice();
        },
        enumerable: true,
        configurable: true
    });
    ChartBoard.prototype.getObjectById = function (uid) {
        for (var _i = 0, _a = this.chartStacks; _i < _a.length; _i++) {
            var stack = _a[_i];
            if (stack.uid === uid) {
                return stack;
            }
            for (var _b = 0, _c = stack.charts; _b < _c.length; _b++) {
                var chart = _c[_b];
                if (chart.uid === uid) {
                    return chart;
                }
            }
            for (var _d = 0, _e = stack.figures; _d < _e.length; _d++) {
                var figure = _e[_d];
                if (figure.uid === uid) {
                    return figure;
                }
            }
        }
    };
    ChartBoard.prototype.addChart = function (uid, name, chartType, dataSource) {
        // Preload data range
        dataSource.loadRange(this.timeAxis.range.start, this.timeAxis.range.end);
        // TODO: Store original datasource
        var ctx = this.createContext(this.dataService);
        dataSource = index_2.DataSourceFactory.CREATE(chartType, dataSource, this.timeRange, ctx);
        this.dataSourceRegister.register(uid, dataSource);
        this.insertChart(uid, name, chartType, dataSource);
        // re-render charts
        this.render();
    };
    ChartBoard.prototype.insertChart = function (uid, name, chartType, dataSource) {
        this.dataSources[uid] = dataSource;
        // add event handlers
        dataSource.dataChanged.on(this.onDataChanged);
        this.chartStacks[0].addChart(uid, name, chartType, dataSource);
    };
    ChartBoard.prototype.deleteChart = function (uid) {
        // get data source
        var dataSource = this.dataSources[uid];
        if (dataSource) {
            dataSource.dataChanged.off(this.onDataChanged);
            // TODO: Chart can be not only on first stack
            this.chartStacks[0].removeChart(uid);
        }
        // // re-render charts
        // this.render();
    };
    ChartBoard.prototype.setDataSource = function (uid, name, chartType, dataSource) {
        var _this = this;
        this.originalDataSource = dataSource;
        this.originalUid = uid;
        this.originalName = name;
        var ctx = this.createContext(this.dataService);
        dataSource = index_2.DataSourceFactory.CREATE(chartType, dataSource, this.timeRange, ctx);
        this.timeAxis.setDataSource(dataSource);
        var stackStorage = this.getStackStorage(uid, 0);
        this.chartStacks[0].setStore(stackStorage);
        // replace primary data source
        this.deleteChart('primary-data-source');
        this.insertChart('primary-data-source', name, chartType, dataSource);
        this.primaryDataSource = dataSource;
        // remove existing indicators and recreate on base of new data source.
        this.indicatorDescriptions.forEach(function (array, stackIndex) {
            array.forEach(function (desc, index) {
                _this.deleteIndicator(desc.uid);
                _this.insertIndicator(desc.uid, desc.indicatorType, stackIndex);
            });
        });
        // re-render charts
        this.resize(this._size.width, this._size.height);
        this.render();
    };
    ChartBoard.prototype.setChartType = function (chartType) {
        if (this.originalDataSource) {
            this.setDataSource(this.originalUid, this.originalName, chartType, this.originalDataSource); // keep figures
            // this.removeChart('primary-data-source');
            // this.addChart<Candlestick>('primary-data-source', chartType, this.primaryDataSource);
        }
        // TODO: Remove existing indicators and recreate on base of new data source.
    };
    ChartBoard.prototype.setTimeRange = function (range) {
        this.timeRange = range;
        this.primaryDataSource.setTimeRange(range);
        // for (const uid of Object.keys(this.dataSources)) {
        //     const ext = this.extensions[uid];
    };
    ChartBoard.prototype.addIndicator = function (uid, indicatorType, index) {
        if (!this.primaryDataSource) {
            throw new Error('Primary data source is not set');
        }
        this.insertIndicator(uid, indicatorType, index);
        // Update indicator's description
        var arr = this.indicatorDescriptions[index];
        if (!arr) {
            this.indicatorDescriptions[index] = [];
        }
        this.indicatorDescriptions[index].push(new IndicatorDescription(uid, indicatorType));
        // recalculate size of all elements
        this.resize(this._size.width, this._size.height);
        this.render();
    };
    ChartBoard.prototype.removeIndicator = function (uid) {
        if (!uid || !this.indicators[uid]) {
            return;
        }
        this.deleteIndicator(uid);
        // remove indicator's description
        this.indicatorDescriptions.some(function (value, index, array) {
            return value.some(function (v, i, a) {
                if (v.uid === uid) {
                    a.splice(i, 1);
                    return true;
                }
                return false;
            });
        });
        // recalculate size of all elements
        this.resize(this._size.width, this._size.height);
        this.render();
    };
    ChartBoard.prototype.insertIndicator = function (uid, indicatorType, index) {
        // Create indicator
        //
        var ctx = this.createContext(this.dataService);
        var indicatorDataSource = index_3.IndicatorFabric.instance.instantiate(indicatorType, this.primaryDataSource, ctx);
        this.indicators[uid] = indicatorDataSource;
        indicatorDataSource.dataChanged.on(this.onDataChanged);
        // Update stack. Use existing or add new one.
        //
        var chartStack;
        if (index >= 0 && index < this.chartStacks.length) {
            chartStack = this.chartStacks[index];
        }
        else {
            index = this.chartStacks.length;
            var stackStorage = this.getStackStorage(this.originalUid, index);
            chartStack = new ChartStack_1.ChartStack(index_7.UidUtils.NEWUID(), this.area, this.timeAxis, true, stackStorage);
            this.chartStacks.push(chartStack);
            this.addChild(chartStack);
        }
        chartStack.addChart(uid, indicatorType, indicatorType, indicatorDataSource);
    };
    ChartBoard.prototype.deleteIndicator = function (uid) {
        var _this = this;
        // remove indicator from board
        // ... find stack
        this.chartStacks.some(function (cs, stackIndex) {
            if (cs.chartIds.indexOf(uid) !== -1) {
                cs.removeChart(uid);
                // If chart stack is empty remove it. Do not remove first stack.
                if (stackIndex !== 0 && cs.chartIds.length === 0) {
                    cs.dispose();
                    _this.chartStacks.splice(stackIndex, 1);
                    _this.removeChild(cs);
                }
                return true;
            }
            return false;
        });
        // remove indicator
        //
        var indicator = this.indicators[uid];
        // ... unsubscribe from events
        indicator.dataChanged.off(this.onDataChanged);
        // ... dispose indicator
        indicator.dispose();
        //this.indicators[uid] = undefined;
    };
    ChartBoard.prototype.getStackStorage = function (assetId, stackIndex) {
        var assets = this.storageMgr.root().getObjectProperty('assets');
        var asset = assets.getObjectProperty(assetId);
        var stacks = asset.getArrayProperty('stacks');
        var arrayStacks = stacks.asArray();
        return arrayStacks.length > 0 ? arrayStacks[0] : stacks.addItem();
    };
    ChartBoard.prototype.render = function () {
        this.renderLayers(true, true);
    };
    ChartBoard.prototype.renderLayers = function (renderBase, renderFront) {
        renderBase = renderBase === undefined ? true : renderBase;
        renderFront = renderFront === undefined ? true : renderFront;
        if (renderBase) {
            this.area.clearBase();
        }
        if (renderFront) {
            this.area.clearFront();
        }
        // Mouse position
        var relMouse = this.mouse.isEntered ? this.mouse.pos.sub(this.offset) : undefined;
        // Render stacks
        for (var _i = 0, _a = this.chartStacks; _i < _a.length; _i++) {
            var cStack = _a[_i];
            // Prepare rendering objects: locator and context.
            var context_1 = new index_1.VisualContext(renderBase, renderFront);
            cStack.render(context_1, index_5.RenderLocator.Instance);
        }
        // Render time axis
        var context = new index_1.VisualContext(renderBase, renderFront);
        this.timeAxisComponent.render(context, index_5.RenderLocator.Instance);
        // Swap render layers
        this.area.render();
    };
    ChartBoard.prototype.resize = function (w, h) {
        w = Math.max(w, 100);
        h = Math.max(h, 50);
        this._size = { width: w, height: h };
        this.area.resize(w, h);
        this.timeAxis.width = this.area.chartLength;
    };
    ChartBoard.prototype.setTimeInterval = function (interval) {
        if (interval) {
            this.timeAxis.interval = interval;
        }
    };
    ChartBoard.prototype.createContext = function (dataService) {
        var _this = this;
        var self = this;
        return {
            addInterval: this.addInterval,
            interval: function () { return _this.timeAxis.interval; },
            getCandle: function (asset, date, interval) {
                if (dataService) {
                    return dataService.getCandle(asset, date, interval);
                }
                return new Promise(function (resolve) {
                    resolve(undefined);
                });
            },
            render: function () { self.render(); },
            register: this.dataSourceRegister
        };
    };
    ChartBoard.prototype.moveX = function (diffX) {
        this.timeAxis.move(diffX);
    };
    ChartBoard.prototype.getHitStack = function () {
        var localX = this.mouse.pos.x - this.offset.x;
        var localY = this.mouse.pos.y - this.offset.y;
        for (var _i = 0, _a = this.chartStacks; _i < _a.length; _i++) {
            var cStack = _a[_i];
            var relativeX = localX - cStack.offset.x;
            var relativeY = localY - cStack.offset.y;
            if (relativeX >= 0 && relativeX < cStack.size.width
                && relativeY >= 0 && relativeY < cStack.size.height) {
                return cStack;
            }
        }
    };
    ChartBoard.prototype.setCursor = function (style) {
        //this.area.setCursor(style);
        this.container.style.setProperty('cursor', style);
    };
    Object.defineProperty(ChartBoard.prototype, "drawing", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    ChartBoard.prototype.start = function (figureId) {
        this.changeState(figureId);
    };
    ChartBoard.prototype.cancel = function () {
        this.changeState('hover');
    };
    ChartBoard.prototype.changeState = function (state, activationParameters) {
        var stateInstance;
        if (Interfaces_1.isStateController(state)) {
            stateInstance = state;
        }
        else if (typeof state === 'string') {
            stateInstance = StateFabric_1.StateFabric.instance.getState(state);
        }
        if (!stateInstance) {
            throw new Error("State is not defined for the specified stateId '" + state + "'");
        }
        var hitStack = this.getHitStack();
        this.state.deactivate(this, this.mouse);
        this.state = stateInstance;
        this.state.activate(this, this.mouse, hitStack, activationParameters);
        this.ignoreNextMove = false;
    };
    /**
     * "ISource" implementation. Works with primary data source.
     */
    ChartBoard.prototype.getHHLL = function (uidFrom, uidTo) {
        if (this.primaryDataSource) {
            return this.primaryDataSource.getHHLL(uidFrom, uidTo);
        }
    };
    ChartBoard.prototype.getLastCandle = function () {
        if (this.primaryDataSource) {
            return this.primaryDataSource.getLastCandle();
        }
    };
    return ChartBoard;
}(index_1.VisualComponent));
exports.ChartBoard = ChartBoard;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../core/index":53,"../data/index":71,"../indicator/index":134,"../layout/index":139,"../render/index":162,"../shared/index":166,"../utils/index":175,"./ChartStack":20,"./Interfaces":25,"./StateFabric":32,"./States":33,"./TimeAxis":34,"./TimeAxisComponent":35}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ChartStack class.
 */
var index_1 = require("../axes/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var Chart_1 = require("./Chart");
var Crosshair_1 = require("./Crosshair");
var FigureComponent_1 = require("./FigureComponent");
var FigureFactory_1 = require("./FigureFactory");
var Grid_1 = require("./Grid");
var NumberAxisComponent_1 = require("./NumberAxisComponent");
var PriceAxisComponent_1 = require("./PriceAxisComponent");
var Quicktip_1 = require("./Quicktip");
var ChartStack = (function (_super) {
    __extends(ChartStack, _super);
    function ChartStack(uid, boardArea, timeAxis, yIsPrice, store, source) {
        var _this = _super.call(this) || this;
        _this._charts = [];
        _this._figures = [];
        _this._precision = 0;
        _this.onresize = function (arg) {
            _a = [_this.area.offset.x, _this.area.offset.y], _this._offset.x = _a[0], _this._offset.y = _a[1];
            var w = _this.area.size.width;
            var h = _this.area.size.height;
            // Instead of default resize using custom resizing
            _this._size = { width: w, height: h };
            var axisSize = _this.getAxisSize(_this._size);
            _this.yAxis.length = axisSize.height;
            _this.yAxisComponent.resize(axisSize.width, axisSize.height);
            for (var _i = 0, _b = _this._children; _i < _b.length; _i++) {
                var vc = _b[_i];
                vc.resize(w, h);
            }
            _this.crosshair.resize(w, h);
            _this.grid.resize(w, h);
            var _a;
            // resize self and all children
            //super.resize(w, h);
        };
        _this.settings = new ChartStackSettings();
        _this._uid = uid;
        _this.boardArea = boardArea;
        _this.tAxis = timeAxis;
        _this.store = store;
        _this.source = source;
        _this.area = boardArea.addChart();
        _this.area.sizeChanged.on(_this.onresize);
        _this._offset = new index_3.Point(_this.area.offset.x, _this.area.offset.y);
        _this._size = _this.area.size;
        _this.qtBuilder = new Quicktip_1.QuicktipBuilder(_this.area.qtipContainer);
        // create Y axis
        //
        var p = { x: 0, y: 0 };
        var size = _this.getAxisSize(_this._size);
        if (yIsPrice) {
            _this.yAxis = new index_1.PriceAxis(size.height, 0.0001);
            _this.yAxisComponent = new PriceAxisComponent_1.PriceAxisComponent(_this.area, _this.yAxis, p, size, _this);
        }
        else {
            _this.yAxis = new index_1.NumberAxis(size.height, 0.0001);
            _this.yAxisComponent = new NumberAxisComponent_1.NumberAxisComponent(_this.area, _this.yAxis, p, size, _this);
        }
        _this.addChild(_this.yAxisComponent);
        // create crosshair
        // TODO: this._size = chart size + YAxis.size
        _this.crosshair = new Crosshair_1.Crosshair(_this.area, { x: 0, y: 0 }, _this._size, _this.tAxis);
        _this.addChild(_this.crosshair);
        // add grid
        // TODO: this._size = chart size + YAxis.size
        _this.grid = new Grid_1.Grid(_this.area, { x: 0, y: 0 }, _this._size, _this.tAxis, _this.yAxis);
        _this.addChild(_this.grid);
        _this.applySettings();
        return _this;
    }
    Object.defineProperty(ChartStack.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    ChartStack.prototype.getAxisSize = function (size) {
        return { width: size.width, height: size.height > 20 ? size.height - 20 : size.height };
    };
    /**
     * Removes chart area
     */
    ChartStack.prototype.dispose = function () {
        this.area.sizeChanged.off(this.onresize);
        this.boardArea.remove(this.area);
    };
    Object.defineProperty(ChartStack.prototype, "chartIds", {
        /**
         * Returns contained charts' identifiers.
         */
        get: function () {
            return this._charts.map(function (c) { return c.uid; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartStack.prototype, "charts", {
        get: function () {
            return this._charts.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartStack.prototype, "figures", {
        get: function () {
            return this._figures.slice();
        },
        enumerable: true,
        configurable: true
    });
    ChartStack.prototype.addChart = function (uid, name, chartType, dataSource) {
        var qtip = this.qtBuilder.addQuicktip(uid);
        var newChart = new Chart_1.Chart(uid, name, chartType, this.area, this.tAxis, new index_3.Point(0, 0), this.size, dataSource, this.yAxis, qtip);
        this._charts.push(newChart);
        this.addChild(newChart);
        this.updateChartingSettings();
    };
    ChartStack.prototype.removeChart = function (uid) {
        for (var i = 0; i < this._charts.length; i += 1) {
            if (this._charts[i].uid === uid) {
                this.removeChild(this._charts[i]);
                this._charts.splice(i, 1);
            }
        }
        this.qtBuilder.removeQuicktip(uid);
        this.updateChartingSettings();
    };
    ChartStack.prototype.addFigure = function (figureType) {
        var figures = this.store.getArrayProperty('figures');
        var figureDesc = figures.addItem();
        figureDesc.setProperty('type', figureType);
        //figureDesc.setProperty('uid', uid);
        var figureContainer = figureDesc.getObjectProperty('figure');
        var figure = this.createFigure(figureType, figureContainer);
        index_2.Events.instance.objectTreeChanged.trigger();
        return figure;
    };
    ChartStack.prototype.removeFigures = function () {
        this._children = this._children.filter(function (value, index, array) {
            return !(value instanceof FigureComponent_1.FigureComponent);
        });
    };
    ChartStack.prototype.setStore = function (store) {
        this.store = store;
        this.reloadFigures();
    };
    ChartStack.prototype.createFigure = function (figureType, container) {
        var figure = FigureFactory_1.FigureFactory.instance
            .instantiate(figureType, this.area, { x: 0, y: 0 }, this.size, this, this.tAxis, this.yAxis, container, this.source);
        this._figures.push(figure);
        this.addChild(figure); // to the end
        return figure;
    };
    ChartStack.prototype.reloadFigures = function () {
        this.removeFigures();
        var figures = this.store.getArrayProperty('figures');
        for (var _i = 0, _a = figures.asArray(); _i < _a.length; _i++) {
            var figureDesc = _a[_i];
            // add figure
            var figureType = figureDesc.getProperty('type');
            var figureContainer = figureDesc.getObjectProperty('figure');
            //const uid = figureDesc.getProperty('uid');
            this.createFigure(figureType, figureContainer);
        }
    };
    ChartStack.prototype.precision = function () {
        return this._precision;
    };
    // TODO: Rename
    ChartStack.prototype.mouseToCoords = function (localX, localY) {
        throw new Error('Not implemented');
    };
    ChartStack.prototype.toX = function (value) {
        return this.tAxis.toX(value);
    };
    ChartStack.prototype.xToValue = function (x) {
        return this.tAxis.toValue(x);
    };
    ChartStack.prototype.toY = function (value) {
        return this.yAxis.toX(value);
    };
    ChartStack.prototype.yToValue = function (y) {
        return this.yAxis.toValue(y);
    };
    ChartStack.prototype.toXY = function (point) {
        if (point.uid && point.v !== undefined) {
            var x = this.toX(point.uid);
            var y = this.toY(point.v);
            return x !== undefined ? { x: x, y: y } : undefined;
        }
    };
    ChartStack.prototype.xyToValue = function (point) {
        return {
            uid: this.xToValue(point.x),
            v: this.yToValue(point.y)
        };
    };
    ChartStack.prototype.setFixedRange = function (range) {
        this._fixedRange = range;
    };
    ChartStack.prototype.render = function (context, renderLocator) {
        if (context.renderBase) {
            // 1. Update y axis before rendering charts
            if (this._fixedRange) {
                this.yAxis.range = this._fixedRange;
            }
            else {
                //
                // TODO: Make DataSource.DefaultYRange or take last known data:
                var yRange = { start: Number.MAX_VALUE, end: Number.MIN_VALUE };
                for (var _i = 0, _a = this._charts; _i < _a.length; _i++) {
                    var chart = _a[_i];
                    var valuesRange = chart.getValuesRange(this.tAxis.range); //this.tAxis.range, this.tAxis.interval);
                    if (valuesRange.end > yRange.end) {
                        yRange.end = valuesRange.end;
                    }
                    if (valuesRange.start < yRange.start) {
                        yRange.start = valuesRange.start;
                    }
                }
                if (this._charts.length > 0) {
                    this.yAxis.range = yRange;
                }
                else {
                    this.yAxis.range = { start: 0, end: 100 }; // default values
                }
            }
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    ChartStack.prototype.getSettings = function () {
        var settings = new index_2.SettingSet({ name: 'stacksettings', group: true });
        settings.setSetting('showGrid', new index_2.SettingSet({
            name: 'showGrid',
            displayName: 'Show grid',
            settingType: index_2.SettingType.check,
            value: this.settings.showGrid.toString()
        }));
        return settings;
    };
    ChartStack.prototype.setSettings = function (value) {
        var showGrid = value.getSetting('stacksettings.showGrid');
        if (showGrid) {
            this.settings.showGrid = (showGrid.value === 'true');
        }
        this.applySettings();
    };
    ChartStack.prototype.applySettings = function () {
        this.grid.visible = this.settings.showGrid;
    };
    ChartStack.prototype.updateChartingSettings = function () {
        // select maximum precision among data sources
        this._precision = 0;
        for (var _i = 0, _a = this._charts; _i < _a.length; _i++) {
            var chart = _a[_i];
            this._precision = Math.max(this._precision, chart.precision);
        }
    };
    return ChartStack;
}(index_2.VisualComponent));
exports.ChartStack = ChartStack;
var ChartStackSettings = (function () {
    function ChartStackSettings() {
        this.showGrid = true;
    }
    return ChartStackSettings;
}());
},{"../axes/index":14,"../core/index":53,"../shared/index":166,"./Chart":18,"./Crosshair":21,"./FigureComponent":22,"./FigureFactory":23,"./Grid":24,"./NumberAxisComponent":26,"./PriceAxisComponent":29,"./Quicktip":31}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Crosshair class.
 */
var index_1 = require("../core/index");
var Crosshair = (function (_super) {
    __extends(Crosshair, _super);
    function Crosshair(area, offset, size, axis) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.onMouseMove = function (evt) {
            _this.mouse = evt.mouse;
        };
        _this.axis = axis;
        index_1.Events.instance.mouseMove.on(_this.onMouseMove);
        return _this;
    }
    Crosshair.prototype.render = function (context, renderLocator) {
        if (!context.renderFront) {
            // only render on front
            return;
        }
        if (this.mouse) {
            // ... calculate mouse position related to this element
            var mouseX = this.mouse.pos.x;
            var mouseY = this.mouse.pos.y;
            var uid = this.axis.toValue(mouseX);
            if (uid !== undefined) {
                var newX = this.axis.toX(uid);
                var render = renderLocator.getCrosshairRender();
                render.render(this.area.frontCanvas, { x: newX, y: mouseY }, this.size);
            }
        }
    };
    return Crosshair;
}(index_1.VisualComponent));
exports.Crosshair = Crosshair;
},{"../core/index":53}],22:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Figures
 */
var index_1 = require("../core/index");
var index_2 = require("../utils/index");
var FigureComponent = (function (_super) {
    __extends(FigureComponent, _super);
    function FigureComponent(name, offset, size, container) {
        var _this = _super.call(this, offset, size) || this;
        _this.isHovered = false;
        _this.isSelected = false;
        _this._uid = index_2.UidUtils.NEWUID();
        _this._name = name;
        return _this;
    }
    Object.defineProperty(FigureComponent.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FigureComponent.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    FigureComponent.prototype.setHovered = function (hovered) {
        this.isHovered = hovered;
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var vc = _a[_i];
            if (vc instanceof FigureComponent) {
                vc.setHovered(hovered);
            }
        }
    };
    FigureComponent.prototype.setSelected = function (selected) {
        this.isSelected = selected;
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var vc = _a[_i];
            if (vc instanceof FigureComponent) {
                vc.setSelected(selected);
            }
        }
    };
    return FigureComponent;
}(index_1.VisualComponent));
exports.FigureComponent = FigureComponent;
},{"../core/index":53,"../utils/index":175}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FigureType = (function () {
    function FigureType() {
    }
    return FigureType;
}());
FigureType.curve = 'curve';
FigureType.line = 'line';
FigureType.hline = 'hline';
FigureType.vline = 'vline';
FigureType.rect = 'rect';
FigureType.triangle = 'triangle';
FigureType.path = 'path';
FigureType.pitchfork = 'pitchfork';
FigureType.text = 'text';
FigureType.ellipse = 'ellipse';
FigureType.trendchannel = 'trendchannel';
FigureType.daterange = 'daterange';
FigureType.fibofan = 'fibofan';
FigureType.fibolevel = 'fibolevel';
FigureType.fiboprojection = 'fiboprojection';
FigureType.fibotimeprojection = 'fibotimeprojection';
FigureType.gannfan = 'gannfan';
FigureType.ohlcproj = 'ohlcproj';
exports.FigureType = FigureType;
var FigureFactory = (function () {
    function FigureFactory() {
        this.ctors = {};
    }
    Object.defineProperty(FigureFactory, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new FigureFactory();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    FigureFactory.prototype.register = function (indicatorId, creator) {
        this.ctors[indicatorId] = creator;
    };
    FigureFactory.prototype.instantiate = function (figureType, area, offset, size, settings, tcoord, vcoord, container, source) {
        var ctor = this.ctors[figureType];
        if (ctor) {
            return new ctor(area, offset, size, settings, tcoord, vcoord, container, source);
        }
        else {
            throw new Error("Indicator with id=" + figureType + " is not registered.");
        }
    };
    return FigureFactory;
}());
exports.FigureFactory = FigureFactory;
},{}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Grid class.
 */
var index_1 = require("../core/index");
var Grid = (function (_super) {
    __extends(Grid, _super);
    function Grid(area, offset, size, timeAxis, yAxis) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.timeAxis = timeAxis;
        _this.yAxis = yAxis;
        return _this;
    }
    Grid.prototype.render = function (context, renderLocator) {
        if (context.renderBase && this.visible) {
            //const canvas = context.getCanvas(this.target);
            var render = renderLocator.getGridRender();
            render.render(this.area.baseCanvas, { x: 0, y: 0, w: this.size.width, h: this.size.height }, this.timeAxis, this.yAxis);
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    return Grid;
}(index_1.VisualComponent));
exports.Grid = Grid;
},{"../core/index":53}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isSelectable(obj) {
    return obj.setSelected !== undefined;
}
exports.isSelectable = isSelectable;
function isHoverable(obj) {
    return obj.isHit !== undefined
        && obj.setHovered !== undefined;
}
exports.isHoverable = isHoverable;
function isEditable(obj) {
    return obj.getEditState !== undefined;
}
exports.isEditable = isEditable;
function isStateController(obj) {
    return obj.activate !== undefined
        && obj.deactivate !== undefined;
}
exports.isStateController = isStateController;
},{}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../shared/index");
var NumberMarker_1 = require("./NumberMarker");
var NumberAxisComponent = (function (_super) {
    __extends(NumberAxisComponent, _super);
    function NumberAxisComponent(chartArea, numberAxis, offset, size, settings) {
        var _this = _super.call(this, offset, size) || this;
        _this.onresize = function (arg) {
            _this._size = arg.size;
        };
        _this.axis = numberAxis;
        _this.area = chartArea.getYArea();
        _this.area.sizeChanged.on(_this.onresize);
        var priceMarker = new NumberMarker_1.NumberMarker(_this.area, { x: 0, y: 0 }, size, numberAxis, settings, _this.getMarkPos);
        _this.addChild(priceMarker);
        return _this;
    }
    NumberAxisComponent.prototype.handeMouse = function (relX, relY) {
        if (this.mouse) {
            this.mouse.x = relX;
            this.mouse.y = relY;
        }
        else {
            this.mouse = new index_2.Point(relX, relY);
        }
        _super.prototype.handeMouse.call(this, relX, relY);
    };
    NumberAxisComponent.prototype.render = function (context, renderLocator) {
        if (context.renderBase) {
            //const canvas = context.getCanvas(this.target);
            var render = renderLocator.getAxesRender('number');
            render.render(this.area.baseCanvas, this.axis, { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height });
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    NumberAxisComponent.prototype.getMarkPos = function (ctx, size) {
        if (this.mouse) {
            return (this.mouse.y > 0 && this.mouse.y < this.size.height) ? this.axis.toValue(this.mouse.y) : undefined;
        }
    };
    return NumberAxisComponent;
}(index_1.VisualComponent));
exports.NumberAxisComponent = NumberAxisComponent;
},{"../core/index":53,"../shared/index":166,"./NumberMarker":27}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var NumberMarker = (function (_super) {
    __extends(NumberMarker, _super);
    function NumberMarker(area, offset, size, yaxis, settings, getter) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.yaxis = yaxis;
        _this.settings = settings;
        _this.getter = getter;
        return _this;
    }
    NumberMarker.prototype.render = function (context, renderLocator) {
        if (!context.renderFront || !this.visible) {
            // only render on front
            return;
        }
        var value = this.getter(context, this.size);
        if (value) {
            var render = renderLocator.getMarkRender('number');
            var y = this.yaxis.toX(value);
            render.render(this.area.frontCanvas, value, { x: 0, y: y }, this.size, this.settings.precision());
        }
    };
    return NumberMarker;
}(index_1.VisualComponent));
exports.NumberMarker = NumberMarker;
},{"../core/index":53}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var NumberRegionMarker = (function (_super) {
    __extends(NumberRegionMarker, _super);
    function NumberRegionMarker(area, offset, size, yaxis, settings, getter) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.yaxis = yaxis;
        _this.settings = settings;
        _this.getter = getter;
        return _this;
    }
    NumberRegionMarker.prototype.render = function (context, renderLocator) {
        if (!context.renderFront || !this.visible) {
            // only render on front
            return;
        }
        var value = this.getter(context, this.size);
        if (value) {
            //const render = <IMarkRender<number>>renderLocator.getMarkRender('number');
            var y1 = this.yaxis.toX(value.start);
            var y2 = this.yaxis.toX(value.end);
            //render.render(this.area.frontCanvas, value, { x: 0, y: y }, this.size, this.settings.precision());
            var canvas = this.area.frontCanvas;
            canvas.fillStyle = 'rgba(190, 230, 255, 0.3)';
            canvas.fillRect(0, Math.min(y1, y2), this.size.width, Math.abs(y2 - y1));
        }
    };
    return NumberRegionMarker;
}(index_1.VisualComponent));
exports.NumberRegionMarker = NumberRegionMarker;
},{"../core/index":53}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../shared/index");
var PriceMarker_1 = require("./PriceMarker");
var PriceAxisComponent = (function (_super) {
    __extends(PriceAxisComponent, _super);
    function PriceAxisComponent(chartArea, priceAxis, offset, size, settings) {
        var _this = _super.call(this, offset, size) || this;
        _this.onresize = function (arg) {
            _this._size = arg.size;
        };
        _this.axis = priceAxis;
        _this.area = chartArea.getYArea();
        _this.area.sizeChanged.on(_this.onresize);
        var priceMarker = new PriceMarker_1.PriceMarker(_this.area, { x: 0, y: 0 }, size, priceAxis, settings, _this.getMarkPos);
        _this.addChild(priceMarker);
        return _this;
    }
    PriceAxisComponent.prototype.handeMouse = function (relX, relY) {
        if (this.mouse) {
            this.mouse.x = relX;
            this.mouse.y = relY;
        }
        else {
            this.mouse = new index_2.Point(relX, relY);
        }
        _super.prototype.handeMouse.call(this, relX, relY);
    };
    PriceAxisComponent.prototype.render = function (context, renderLocator) {
        if (context.renderBase) {
            var render = renderLocator.getAxesRender('price');
            render.render(this.area.baseCanvas, this.axis, { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height });
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    PriceAxisComponent.prototype.getMarkPos = function (ctx, size) {
        if (this.mouse) {
            return (this.mouse.y > 0 && this.mouse.y < this.size.height) ? this.axis.toValue(this.mouse.y) : undefined;
        }
    };
    return PriceAxisComponent;
}(index_1.VisualComponent));
exports.PriceAxisComponent = PriceAxisComponent;
},{"../core/index":53,"../shared/index":166,"./PriceMarker":30}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var PriceMarker = (function (_super) {
    __extends(PriceMarker, _super);
    function PriceMarker(area, offset, size, axis, settings, getter) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.axis = axis;
        _this.settings = settings;
        _this.getter = getter;
        return _this;
    }
    PriceMarker.prototype.render = function (context, renderLocator) {
        if (!context.renderFront) {
            // only render on front
            return;
        }
        var value = this.getter(context, this.size);
        if (value) {
            var render = renderLocator.getMarkRender('number');
            var y = this.axis.toX(value);
            render.render(this.area.frontCanvas, value, { x: 0, y: y }, this.size, this.settings.precision());
        }
    };
    return PriceMarker;
}(index_1.VisualComponent));
exports.PriceMarker = PriceMarker;
},{"../core/index":53}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var QuicktipBuilder = (function () {
    function QuicktipBuilder(container) {
        this.items = {};
        this.container = container;
    }
    QuicktipBuilder.prototype.addQuicktip = function (uid) {
        var div = document.createElement('div');
        //div.style.setProperty('data-uid', 'uid');
        this.container.appendChild(div);
        var qt = new Quicktip(div);
        this.items[uid] = qt;
        return qt;
    };
    QuicktipBuilder.prototype.removeQuicktip = function (uid) {
        var removedElement = this.items[uid];
        if (removedElement) {
            this.items[uid] = undefined;
            this.container.removeChild(removedElement.container);
        }
    };
    return QuicktipBuilder;
}());
exports.QuicktipBuilder = QuicktipBuilder;
var Quicktip = (function () {
    function Quicktip(container) {
        this._container = container;
    }
    Object.defineProperty(Quicktip.prototype, "container", {
        get: function () {
            return this._container;
        },
        enumerable: true,
        configurable: true
    });
    Quicktip.prototype.addTextBlock = function (uid, text) {
        var div = document.createElement('div');
        div.setAttribute('data-uid', uid);
        div.style.setProperty('display', 'inline');
        div.style.setProperty('margin-right', '5px');
        div.innerText = text;
        this._container.appendChild(div);
    };
    Quicktip.prototype.removeTextBlock = function (uid) {
        var nodes = this.container.getElementsByTagName('div');
        for (var i = 0; i < nodes.length; i += 1) {
            var el = nodes[i];
            var attr = el.getAttribute('data-uid');
            if (attr && attr === uid) {
                this.container.removeChild(el);
                break;
            }
        }
    };
    Quicktip.prototype.addButton = function (uid, click) {
        //-----------------
    };
    return Quicktip;
}());
exports.Quicktip = Quicktip;
},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StateFabric = (function () {
    function StateFabric() {
        this.states = {};
    }
    Object.defineProperty(StateFabric, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new StateFabric();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    StateFabric.prototype.setState = function (stateId, obj) {
        this.states[stateId] = obj;
    };
    StateFabric.prototype.getState = function (stateId) {
        return this.states[stateId];
    };
    return StateFabric;
}());
exports.StateFabric = StateFabric;
},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../core/index");
var index_2 = require("../shared/index");
var Interfaces_1 = require("./Interfaces");
var HoverState = (function () {
    function HoverState() {
        this.selectionMode = false;
    }
    Object.defineProperty(HoverState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new HoverState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    HoverState.prototype.onMouseDown = function (board, mouse) {
        this.selectionMode = true;
        this.hitComponent = this.getHitComponent(board, mouse);
    };
    HoverState.prototype.onMouseUp = function (board, mouse) {
        if (this.selectionMode) {
            // clear current selection
            board.forEach(function (component) {
                if (Interfaces_1.isSelectable(component)) {
                    component.setSelected(false);
                }
                return true; // continue
            });
        }
        // If mouse was moved do not select
        if (this.hitComponent) {
            if (Interfaces_1.isSelectable(this.hitComponent)) {
                // select component
                this.hitComponent.setSelected(true);
                index_1.Events.instance.objectSelected.trigger(new index_1.ObjectEventArgument(this.hitComponent));
            }
        }
    };
    HoverState.prototype.onMouseMove = function (board, mouse) {
        if (mouse.isDown && this.hitComponent) {
            if (Interfaces_1.isHoverable(this.hitComponent)) {
                this.hitComponent.setHovered(false);
            }
            if (Interfaces_1.isSelectable(this.hitComponent)) {
                this.hitComponent.setSelected(true);
            }
            // change state
            if (Interfaces_1.isEditable(this.hitComponent)) {
                var editState = this.hitComponent.getEditState();
                board.changeState(editState, { component: this.hitComponent });
            }
        }
        else if (mouse.isDown && !this.hitComponent) {
            board.changeState('movechart');
        }
        else if (!mouse.isDown) {
            var hitComponent = this.getHitComponent(board, mouse);
            if (hitComponent) {
                hitComponent.setHovered(true);
                board.setCursor('pointer');
            }
            else {
                board.setCursor('crosshair');
            }
        }
        this.selectionMode = false;
        this.hitComponent = undefined;
    };
    HoverState.prototype.onMouseEnter = function (board, mouse) { };
    HoverState.prototype.onMouseLeave = function (board, mouse) { };
    HoverState.prototype.onMouseWheel = function (board, mouse) { };
    HoverState.prototype.activate = function (board, mouse) {
        this.selectionMode = false;
        this.hitComponent = undefined;
        board.setCursor('crosshair');
    };
    HoverState.prototype.deactivate = function (board, mouse) {
        board.forEach(function (component) {
            if (Interfaces_1.isHoverable(component)) {
                component.setHovered(false);
            }
            return true; // continue
        });
    };
    HoverState.prototype.getHitComponent = function (board, mouse) {
        var hitComponent;
        // traverse all hoverable components, clear all popups and find hit component.
        board.forEach(function (component, aggregatedOffset) {
            if (Interfaces_1.isHoverable(component)) {
                var p = new index_2.Point(mouse.pos.x - aggregatedOffset.x, mouse.pos.y - aggregatedOffset.y);
                if (component.isHit(p) && !hitComponent) {
                    hitComponent = component;
                    //component.setPopupVisibility(true);
                    //return false; // do not continue
                }
                else {
                    component.setHovered(false);
                }
            }
            return true; // continue
        }, true, // check children first
        false); // iterating in reverse order so that rendered last charts will be asked first.
        return hitComponent;
    };
    return HoverState;
}());
exports.HoverState = HoverState;
var MoveChartState = (function () {
    function MoveChartState() {
        this.last = new index_2.Point();
    }
    Object.defineProperty(MoveChartState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new MoveChartState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    MoveChartState.prototype.onMouseWheel = function (board, mouse) { };
    MoveChartState.prototype.onMouseMove = function (board, mouse) {
        var diffX = mouse.pos.x - this.last.x;
        board.moveX(diffX);
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        var _a;
    };
    MoveChartState.prototype.onMouseEnter = function (board, mouse) { };
    MoveChartState.prototype.onMouseLeave = function (board, mouse) {
        this.exit(board);
    };
    MoveChartState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board);
    };
    MoveChartState.prototype.onMouseDown = function (board, mouse) { };
    MoveChartState.prototype.activate = function (board, mouse) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        var _a;
    };
    MoveChartState.prototype.deactivate = function (board, mouse) {
        // TODO: stop mouse handling
    };
    MoveChartState.prototype.exit = function (board) {
        board.changeState('hover');
    };
    return MoveChartState;
}());
exports.MoveChartState = MoveChartState;
},{"../core/index":53,"../shared/index":166,"./Interfaces":25}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TimeAxis class.
 */
var index_1 = require("../axes/index");
var index_2 = require("../model/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var LoadRangeEvent = (function (_super) {
    __extends(LoadRangeEvent, _super);
    function LoadRangeEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LoadRangeEvent;
}(index_3.Event));
exports.LoadRangeEvent = LoadRangeEvent;
var LoadRangeArgument = (function () {
    function LoadRangeArgument(start, end, count) {
        this.start = start;
        this.end = end;
        this.count = count;
    }
    return LoadRangeArgument;
}());
exports.LoadRangeArgument = LoadRangeArgument;
var TimeAxis = (function () {
    function TimeAxis(interval, initialDate, N, width) {
        this.loadRangeEvent = new LoadRangeEvent();
        this.iteratorCounter = 0;
        this.g = 0;
        if (N <= 0) {
            throw new Error('Argument "N" must be positive.');
        }
        if (width <= 0) {
            throw new Error('Argument "width" must be positive.');
        }
        // Round initial date to interval
        initialDate = index_4.DateUtils.truncateToInterval(initialDate, interval);
        this._interval = interval;
        this.N = N;
        this.w = width;
        var dateStart = index_4.DateUtils.addInterval(initialDate, interval, -N);
        this.frameStart = new index_2.Uid(initialDate);
    }
    Object.defineProperty(TimeAxis.prototype, "loadingRange", {
        get: function () {
            return this.loadRangeEvent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeAxis.prototype, "interval", {
        get: function () {
            return this._interval;
        },
        set: function (value) {
            this._interval = value;
            // truncate frame start to interval
            this.frameStart.t = index_4.DateUtils.truncateToInterval(this.frameStart.t, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeAxis.prototype, "width", {
        get: function () {
            return this.w;
        },
        set: function (value) {
            this.w = value;
        },
        enumerable: true,
        configurable: true
    });
    //ondatachanged - не нужен. не надо менять frameStart и count. Но нужно dispose добавить.
    TimeAxis.prototype.setDataSource = function (dataSource) {
        // frameStart and count remain the same.
        // clear n
        this.frameStart.n = 0;
        this.dataSource = dataSource;
        this.iter = dataSource.getIterator();
        this.tempIter = dataSource.getIterator();
        // load 3 screens
        this.load(this.frameStart, 2 * this.N);
        this.load(this.frameStart, -this.N);
    };
    TimeAxis.prototype.load = function (uid, count) {
        if (this.dataSource) {
            this.dataSource.load(uid, count);
            this.loadRangeEvent.trigger(new LoadRangeArgument(uid, undefined, count));
        }
    };
    TimeAxis.prototype.loadRange = function (start, end) {
        if (this.dataSource) {
            this.dataSource.loadRange(start, end);
            this.loadRangeEvent.trigger(new LoadRangeArgument(start, end));
        }
    };
    Object.defineProperty(TimeAxis.prototype, "current", {
        get: function () {
            if (this.iteratorPointer === undefined) {
                throw new Error('Iterator is not initialized.');
            }
            return { uid: this.iteratorPointer, x: this.index2x(this.iteratorCounter) };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeAxis.prototype, "count", {
        get: function () {
            return this.N;
        },
        enumerable: true,
        configurable: true
    });
    TimeAxis.prototype.reset = function () {
        // go to frameStart
        this.iteratorPointer = undefined;
        this.iteratorCounter = -1;
        this.found = false;
    };
    TimeAxis.prototype.moveNext = function () {
        if (this.iteratorPointer === undefined) {
            this.iteratorPointer = new index_2.Uid(this.frameStart.t, this.frameStart.n);
            this.iteratorCounter = 0;
            var time_1 = this.iteratorPointer.t.getTime();
            var n_1 = this.iteratorPointer.n;
            if (this.iter) {
                this.found = this.iter.goTo(function (item) { return item.uid.t.getTime() === time_1 && item.uid.n === n_1; });
            }
            else {
                this.found = false;
            }
            return true;
        }
        else if (this.iteratorCounter < (this.N - 1)) {
            var res = this.shiftNext(this.iter, this.found, this.iteratorPointer);
            this.found = res.f;
            this.iteratorPointer = res.uid;
            this.iteratorCounter += 1;
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Should search most nearest Uid to the specified Uid, as interval can be changed
     * @param uid
     */
    TimeAxis.prototype.toX = function (uid) {
        // ensure that require uid is loaded
        if (this.dataSource) {
            this.loadRange(this.frameStart, uid);
        }
        // Compute distance b/w frame start и uid
        var dist = this.getDistance(this.frameStart, uid);
        return dist !== undefined ? this.index2x(dist) : undefined;
    };
    TimeAxis.prototype.toValue = function (x) {
        var wi = this.w / this.N;
        var index = Math.floor((x - this.g) / wi);
        return this.shiftBy(this.tempIter, index, this.frameStart);
    };
    TimeAxis.prototype.move = function (direction) {
        if (!direction || direction === 0) {
            return;
        }
        //let gnext = this.g + (direction > 0 ? 1 : -1);
        var gnext = this.g + direction;
        var wi = this.w / this.N;
        var count = Math.floor(gnext / wi);
        gnext = gnext - (count * wi);
        if (count !== 0) {
            direction = count;
            if (this.dataSource) {
                this.load(this.frameStart, direction > 0 ? (direction + 2 * this.N) : (direction - this.N));
            }
            this.frameStart = this.shiftBy(this.tempIter, -direction, this.frameStart);
        }
        this.g = gnext;
    };
    TimeAxis.prototype.scale = function (direction) {
        this.g = 0;
        var newN = this.N;
        if (direction > 0) {
            newN = Math.floor(this.N * 0.9);
        }
        else if (direction < 0) {
            newN = Math.ceil(this.N * 1.1);
            this.load(this.frameStart, -2 * newN);
        }
        else {
            return;
        }
        if (newN >= 1 && newN <= 2000) {
            this.frameStart = this.shiftBy(this.tempIter, this.N - newN, this.frameStart);
            this.N = newN;
        }
    };
    Object.defineProperty(TimeAxis.prototype, "range", {
        /**
         * Visible range
         */
        get: function () {
            var start = new index_2.Uid();
            start.t = this.frameStart.t;
            start.n = this.frameStart.n;
            var end = this.shiftBy(this.tempIter, this.N, this.frameStart);
            return { start: start, end: end };
        },
        enumerable: true,
        configurable: true
    });
    TimeAxis.prototype.lock = function (uid) {
        if (this.dataSource) {
            this.dataSource.lock(uid);
        }
    };
    /**
     * For rendering grid
     */
    TimeAxis.prototype.getGrid = function () {
        return new index_1.TimeAutoGrid(this.w, this._interval, this, this.range);
    };
    TimeAxis.prototype.dist = function (uidFrom, uidTo) {
        return this.getDistance(uidFrom, uidTo);
    };
    TimeAxis.prototype.add = function (uid, amount) {
        return this.shiftBy(this.tempIter, amount, uid);
    };
    TimeAxis.prototype.getDistance = function (uidFrom, uidTo) {
        var counter = 0;
        var curUid = uidFrom.compare(uidTo) <= 0 ? uidFrom : uidTo;
        var lastUid = uidFrom.compare(uidTo) <= 0 ? uidTo : uidFrom;
        var curTime = curUid.t.getTime();
        var lastTime = lastUid.t.getTime();
        var fo = this.tempIter ? this.tempIter.goTo(function (item) { return item.uid.compare(curUid) > 0; }) : false;
        if (fo && this.tempIter && this.tempIter.current.uid.compare(lastUid) < 0) {
            counter = index_4.DateUtils.diffIntervals(curUid.t, this.tempIter.current.uid.t, this.interval);
            var outOfRange = false;
            while (this.tempIter.moveNext()) {
                curUid = this.tempIter.current.uid;
                if (curUid.compare(lastUid) > 0) {
                    outOfRange = true;
                    break;
                }
                counter += 1;
            }
            if (!outOfRange) {
                counter += index_4.DateUtils.diffIntervals(curUid.t, lastUid.t, this.interval);
            }
        }
        else {
            counter = index_4.DateUtils.diffIntervals(curUid.t, lastUid.t, this.interval);
        }
        // Compute coordinate by index
        return (uidFrom.t < uidTo.t) ? counter : -counter;
    };
    /**
     * Basically searches Uid at "shift" from current. Also adds fake values if needed
     * @param iterator
     * @param shift Can be positive and negative
     * @param curPosition
     */
    TimeAxis.prototype.shiftBy = function (iterator, shift, curPosition) {
        var cur = new index_2.Uid();
        cur.t = curPosition.t;
        cur.n = curPosition.n;
        if (shift === 0) {
            return cur;
        }
        // 1. Find first candle before or after current position
        //
        var found = false;
        if (iterator) {
            found = (shift > 0)
                ? iterator.goTo(function (item) { return item.uid.compare(cur) > 0; })
                : iterator.goWhile(function (item) { return item.uid.compare(cur) < 0; });
        }
        //let remains: number = shift; // - counter;
        if (iterator && found) {
            // Define distance b/w frame start and first found item
            var diff = index_4.DateUtils.diffIntervals(cur.t, iterator.current.uid.t, this.interval); // diff is positive
            if ((shift > 0 && diff > shift) || (shift < 0 && -diff < shift)) {
                cur.t = index_4.DateUtils.addInterval(cur.t, this._interval, shift);
                cur.n = 0;
                return cur;
            }
            shift = shift - ((shift > 0) ? diff : -diff);
            // Shift over the data items
            var actualMoved = iterator.moveTimes(shift);
            cur.t = iterator.current.uid.t;
            cur.n = iterator.current.uid.n;
            shift = shift - actualMoved;
        }
        if (shift !== 0) {
            cur.t = index_4.DateUtils.addInterval(cur.t, this._interval, shift);
            cur.n = 0;
        }
        return cur;
    };
    TimeAxis.prototype.shiftNext = function (iterator, found, curPosition) {
        var newPosition = new index_2.Uid();
        var f = found;
        if (found) {
            f = (iterator !== undefined) ? iterator.moveNext() : false;
            if (f && iterator !== undefined) {
                var cur = iterator.current;
                newPosition.t = cur.uid.t;
                newPosition.n = cur.uid.n;
            }
            else {
                // generate fake
                // do not try to move
                newPosition.t = index_4.DateUtils.addInterval(curPosition.t, this._interval);
                newPosition.n = 0;
            }
        }
        else {
            // generate fake time
            // try move pointer
            newPosition.t = index_4.DateUtils.addInterval(curPosition.t, this._interval);
            newPosition.n = 0;
        }
        return { f: f, uid: newPosition };
    };
    TimeAxis.prototype.index2x = function (index) {
        var wi = this.w / this.N;
        return (wi * index) + (wi / 2) + this.g;
    };
    return TimeAxis;
}());
exports.TimeAxis = TimeAxis;
},{"../axes/index":14,"../model/index":142,"../shared/index":166,"../utils/index":175}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TimeAxisComponent class.
 */
var index_1 = require("../core/index");
var index_2 = require("../shared/index");
var TimeMarker_1 = require("./TimeMarker");
var TimeAxisComponent = (function (_super) {
    __extends(TimeAxisComponent, _super);
    function TimeAxisComponent(area, timeAxis) {
        var _this = _super.call(this) || this;
        _this.onresize = function (arg) {
            _this._size = arg.size;
            _this.marker.resize(arg.size.width, arg.size.height);
        };
        _this.tAxis = timeAxis;
        _this.area = area.getXArea();
        _this.area.sizeChanged.on(_this.onresize);
        _this._size = _this.area.size;
        _this.marker = new TimeMarker_1.TimeMarker(_this.area, _this.offset, _this.size, timeAxis, _this.getMarkPos);
        _this.addChild(_this.marker);
        return _this;
    }
    TimeAxisComponent.prototype.handeMouse = function (relX, relY) {
        if (this.mouse) {
            this.mouse.x = relX;
            this.mouse.y = relY;
        }
        else {
            this.mouse = new index_2.Point(relX, relY);
        }
        _super.prototype.handeMouse.call(this, relX, relY);
    };
    TimeAxisComponent.prototype.render = function (context, renderLocator) {
        if (context.renderBase) {
            //const canvas = context.getCanvas(this.target);
            var render = renderLocator.getAxesRender('date');
            render.render(this.area.baseCanvas, this.tAxis, { x: 0, y: 0, w: this.size.width, h: this.size.height });
        }
        // const childContext = new VisualContext(context.renderBase, context.renderFront,
        //                                        context.getCanvas('base'), context.getCanvas('front'), context.mousePosition);
        _super.prototype.render.call(this, context, renderLocator);
    };
    TimeAxisComponent.prototype.getMarkPos = function (ctx, size) {
        if (this.mouse) {
            return (this.mouse.x > 0 && this.mouse.x < size.width) ? this.tAxis.toValue(this.mouse.x) : undefined;
        }
    };
    return TimeAxisComponent;
}(index_1.VisualComponent));
exports.TimeAxisComponent = TimeAxisComponent;
},{"../core/index":53,"../shared/index":166,"./TimeMarker":36}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TimeMarker class.
 */
var index_1 = require("../core/index");
var TimeMarker = (function (_super) {
    __extends(TimeMarker, _super);
    function TimeMarker(area, offset, size, taxis, getter) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.getter = getter;
        return _this;
    }
    TimeMarker.prototype.render = function (context, renderLocator) {
        if (!context.renderFront || !this.visible) {
            // only render on front
            return;
        }
        var uid = this.getter(context, this.size);
        if (uid) {
            var x = this.taxis.toX(uid);
            var render = renderLocator.getMarkRender('date');
            render.render(this.area.frontCanvas, uid.t, { x: x, y: 0 }, this.size);
        }
    };
    return TimeMarker;
}(index_1.VisualComponent));
exports.TimeMarker = TimeMarker;
},{"../core/index":53}],37:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var TimeRegionMarker = (function (_super) {
    __extends(TimeRegionMarker, _super);
    function TimeRegionMarker(area, offset, size, taxis, settings, getter) {
        var _this = _super.call(this, offset, size) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.settings = settings;
        _this.getter = getter;
        return _this;
    }
    TimeRegionMarker.prototype.render = function (context, renderLocator) {
        if (!context.renderFront || !this.visible) {
            // only render on front
            return;
        }
        var value = this.getter(context, this.size);
        if (value) {
            var x1 = this.taxis.toX(value.start);
            var x2 = this.taxis.toX(value.end);
            // Render
            if (x1 !== undefined && x2 !== undefined) {
                var canvas = this.area.frontCanvas;
                canvas.fillStyle = 'rgba(190, 230, 255, 0.3)';
                canvas.fillRect(Math.min(x1, x2), 0, Math.abs(x2 - x1), this.size.height);
            }
        }
    };
    return TimeRegionMarker;
}(index_1.VisualComponent));
exports.TimeRegionMarker = TimeRegionMarker;
},{"../core/index":53}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var Chart_1 = require("./Chart");
exports.Chart = Chart_1.Chart;
var ChartBoard_1 = require("./ChartBoard");
exports.ChartBoard = ChartBoard_1.ChartBoard;
var ChartStack_1 = require("./ChartStack");
exports.ChartStack = ChartStack_1.ChartStack;
var FigureComponent_1 = require("./FigureComponent");
exports.FigureComponent = FigureComponent_1.FigureComponent;
var FigureFactory_1 = require("./FigureFactory");
exports.FigureFactory = FigureFactory_1.FigureFactory;
exports.FigureType = FigureFactory_1.FigureType;
var Interfaces_1 = require("./Interfaces");
exports.isEditable = Interfaces_1.isEditable;
exports.isHoverable = Interfaces_1.isHoverable;
exports.isSelectable = Interfaces_1.isSelectable;
exports.isStateController = Interfaces_1.isStateController;
var NumberAxisComponent_1 = require("./NumberAxisComponent");
exports.NumberAxisComponent = NumberAxisComponent_1.NumberAxisComponent;
var NumberMarker_1 = require("./NumberMarker");
exports.NumberMarker = NumberMarker_1.NumberMarker;
var NumberRegionMarker_1 = require("./NumberRegionMarker");
exports.NumberRegionMarker = NumberRegionMarker_1.NumberRegionMarker;
var PriceAxisComponent_1 = require("./PriceAxisComponent");
exports.PriceAxisComponent = PriceAxisComponent_1.PriceAxisComponent;
var StateFabric_1 = require("./StateFabric");
exports.StateFabric = StateFabric_1.StateFabric;
var States_1 = require("./States");
exports.HoverState = States_1.HoverState;
exports.MoveChartState = States_1.MoveChartState;
var TimeAxisComponent_1 = require("./TimeAxisComponent");
exports.TimeAxisComponent = TimeAxisComponent_1.TimeAxisComponent;
var TimeMarker_1 = require("./TimeMarker");
exports.TimeMarker = TimeMarker_1.TimeMarker;
var TimeRegionMarker_1 = require("./TimeRegionMarker");
exports.TimeRegionMarker = TimeRegionMarker_1.TimeRegionMarker;
},{"./Chart":18,"./ChartBoard":19,"./ChartStack":20,"./FigureComponent":22,"./FigureFactory":23,"./Interfaces":25,"./NumberAxisComponent":26,"./NumberMarker":27,"./NumberRegionMarker":28,"./PriceAxisComponent":29,"./StateFabric":32,"./States":33,"./TimeAxisComponent":35,"./TimeMarker":36,"./TimeRegionMarker":37}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../utils/index");
var IndicatorExtension = (function () {
    function IndicatorExtension() {
    }
    return IndicatorExtension;
}());
exports.IndicatorExtension = IndicatorExtension;
/**
 * TR = max(H - L, |H - C prev|, |L - C prev|)
 */
var TrueRangeExtension = (function (_super) {
    __extends(TrueRangeExtension, _super);
    function TrueRangeExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TrueRangeExtension.prototype, "amountRequires", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    TrueRangeExtension.prototype.extend = function (line) {
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        if (current && current.h !== undefined && current.l !== undefined
            && prev && prev.c !== undefined) {
            current.ext['tr'] = Math.max(current.h, prev.c) - Math.min(current.l, prev.c);
        }
    };
    return TrueRangeExtension;
}(IndicatorExtension));
TrueRangeExtension.uname = 'truerange';
exports.TrueRangeExtension = TrueRangeExtension;
/**
 * +DM
 */
var UpDirectionalMovementExtension = (function (_super) {
    __extends(UpDirectionalMovementExtension, _super);
    function UpDirectionalMovementExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UpDirectionalMovementExtension.prototype, "amountRequires", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    UpDirectionalMovementExtension.prototype.extend = function (line) {
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        if (current && current.h !== undefined && current.l !== undefined
            && prev && prev.h !== undefined && prev.l !== undefined) {
            // UpMove = Current High - Previous High
            // DownMove = Previous Low - Current Low
            var upmove = current.h - prev.h;
            var downmove = prev.l - current.l;
            // If UpMove > DownMove and UpMove > 0, then +DM = UpMove, else +DM = 0
            current.ext['pdm'] = (upmove > downmove && upmove > 0) ? upmove : 0;
        }
    };
    return UpDirectionalMovementExtension;
}(IndicatorExtension));
UpDirectionalMovementExtension.uname = 'pdm';
exports.UpDirectionalMovementExtension = UpDirectionalMovementExtension;
/**
 * -DM
 */
var DownDirectionalMovementExtension = (function (_super) {
    __extends(DownDirectionalMovementExtension, _super);
    function DownDirectionalMovementExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DownDirectionalMovementExtension.prototype, "amountRequires", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    DownDirectionalMovementExtension.prototype.extend = function (line) {
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        if (current && current.h !== undefined && current.l !== undefined
            && prev && prev.h !== undefined && prev.l !== undefined) {
            // UpMove = Current High - Previous High
            // DownMove = Previous Low - Current Low            
            var upmove = current.h - prev.h;
            var downmove = prev.l - current.l;
            // If DownMove > Upmove and Downmove > 0, then -DM = DownMove, else -DM = 0 
            current.ext['mdm'] = (downmove > upmove && downmove > 0) ? downmove : 0;
        }
    };
    return DownDirectionalMovementExtension;
}(IndicatorExtension));
DownDirectionalMovementExtension.uname = 'mdm';
exports.DownDirectionalMovementExtension = DownDirectionalMovementExtension;
/**
 * ATR
 */
var AvgTrueRangeExtension = (function (_super) {
    __extends(AvgTrueRangeExtension, _super);
    function AvgTrueRangeExtension(period) {
        var _this = _super.call(this) || this;
        // ATR requires TR
        _this.trExt = new TrueRangeExtension();
        if (period !== undefined && period < 1) {
            throw new Error('Period less then 1 is not supported.');
        }
        _this.period = period || 14;
        if (_this.period < _this.trExt.amountRequires) {
            throw new Error('Period can not be less then True Range period.');
        }
        return _this;
    }
    Object.defineProperty(AvgTrueRangeExtension.prototype, "amountRequires", {
        get: function () {
            return this.period;
        },
        enumerable: true,
        configurable: true
    });
    AvgTrueRangeExtension.prototype.extend = function (line) {
        // Calculate True Range before calculating ATR
        this.trExt.extend(line);
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        // If there is previous ATR, than use it, otherwise - use average
        //
        if (current && prev) {
            var prevATR = prev.ext['atr'];
            var curTR = current.ext['tr'];
            if (prevATR !== undefined && curTR !== undefined) {
                current.ext['atr'] = (prevATR * (this.period - 1) + curTR) / this.period;
                return;
            }
        }
        // Using TR values to calculate ATR
        var sum = 0;
        var counter = 0;
        for (var i = line.length - 1; i >= 0 && counter <= this.period; i -= 1) {
            var tr = current.ext['tr'];
            if (tr !== undefined) {
                sum += tr;
                counter += 1;
            }
        }
        // If amount of TR is enough, calculate ATR
        if (counter === this.period) {
            current.ext['atr'] = sum / this.period;
        }
    };
    return AvgTrueRangeExtension;
}(IndicatorExtension));
AvgTrueRangeExtension.uname = 'avgtruerange';
exports.AvgTrueRangeExtension = AvgTrueRangeExtension;
/**
 * Gain/Loss
 */
var GainLossExtension = (function (_super) {
    __extends(GainLossExtension, _super);
    /**
     * Creates extension
     * @param fieldName Name of the field to use
     */
    function GainLossExtension(accessor) {
        var _this = _super.call(this) || this;
        _this.accessor = accessor;
        _this.uid = index_1.UidUtils.NEWUID();
        return _this;
    }
    Object.defineProperty(GainLossExtension.prototype, "amountRequires", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GainLossExtension.prototype, "uname", {
        get: function () {
            return 'gainloss' + this.uid;
        },
        enumerable: true,
        configurable: true
    });
    GainLossExtension.prototype.extend = function (line) {
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        var curValue = this.accessor(current);
        var prevValue = this.accessor(prev);
        if (curValue && prevValue) {
            var gain = 0;
            var loss = 0;
            if (curValue > prevValue) {
                gain = curValue - prevValue;
            }
            else if (curValue < prevValue) {
                loss = prevValue - curValue;
            }
            current.ext['gain_' + this.uid] = gain;
            current.ext['loss_' + this.uid] = loss;
        }
    };
    GainLossExtension.prototype.value = function (c) {
        return {
            gain: c && c.ext ? c.ext['gain_' + this.uid] : undefined,
            loss: c && c.ext ? c.ext['loss_' + this.uid] : undefined
        };
    };
    return GainLossExtension;
}(IndicatorExtension));
exports.GainLossExtension = GainLossExtension;
/**
 * Log Return extension. R(i) = log(Pi / P(i-1))
 */
var LogReturnExtension = (function (_super) {
    __extends(LogReturnExtension, _super);
    /**
     * Creates extension
     * @param fieldName Name of the field to use
     */
    function LogReturnExtension(accessor) {
        var _this = _super.call(this) || this;
        _this.accessor = accessor;
        _this.uid = index_1.UidUtils.NEWUID();
        return _this;
    }
    Object.defineProperty(LogReturnExtension.prototype, "amountRequires", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogReturnExtension.prototype, "uname", {
        get: function () {
            return 'logreturn' + this.uid;
        },
        enumerable: true,
        configurable: true
    });
    LogReturnExtension.prototype.extend = function (line) {
        if (line.length < 2) {
            return;
        }
        var current = line.getItem(line.length - 1); // last is current
        var prev = line.getItem(line.length - 2); // Take previous;
        var curValue = this.accessor(current);
        var prevValue = this.accessor(prev);
        if (curValue && prevValue) {
            current.ext['logreturn_' + this.uid] = Math.log(curValue / prevValue);
            //current.ext['logreturn_' + this.uid] = (curValue - prevValue) / prevValue;
        }
    };
    LogReturnExtension.prototype.value = function (c) {
        return (c && c.ext) ? c.ext['logreturn_' + this.uid] : undefined;
    };
    return LogReturnExtension;
}(IndicatorExtension));
exports.LogReturnExtension = LogReturnExtension;
},{"../utils/index":175}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var IndicatorExtension_1 = require("./IndicatorExtension");
exports.AvgTrueRangeExtension = IndicatorExtension_1.AvgTrueRangeExtension;
exports.DownDirectionalMovementExtension = IndicatorExtension_1.DownDirectionalMovementExtension;
exports.GainLossExtension = IndicatorExtension_1.GainLossExtension;
exports.LogReturnExtension = IndicatorExtension_1.LogReturnExtension;
exports.TrueRangeExtension = IndicatorExtension_1.TrueRangeExtension;
exports.UpDirectionalMovementExtension = IndicatorExtension_1.UpDirectionalMovementExtension;
},{"./IndicatorExtension":39}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AmountRange = (function () {
    function AmountRange(uidStart, uidEnd, count) {
        this.uidStart = uidStart;
        this.uidEnd = uidEnd;
        this.count = count;
    }
    AmountRange.prototype.isEqual = function (other) {
        return (other
            && this.uidStart.compare(other.uidStart) === 0
            && (this.uidEnd === other.uidEnd || (this.uidEnd && other.uidEnd && this.uidEnd.compare(other.uidEnd) === 0))
            && (this.count === other.count));
    };
    return AmountRange;
}());
exports.AmountRange = AmountRange;
var AmountRangeOps = (function () {
    function AmountRangeOps() {
    }
    AmountRangeOps.difference = function (minuend, subtrahend) {
        var M = minuend;
        var S = subtrahend;
        if (M.uidEnd && S.uidEnd) {
            var M1 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidEnd : M.uidStart;
            var M2 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidStart : M.uidEnd;
            var S1 = S.uidStart.compare(S.uidEnd) > 0 ? S.uidEnd : S.uidStart;
            var S2 = S.uidStart.compare(S.uidEnd) > 0 ? S.uidStart : S.uidEnd;
            if (M1.compare(S1) < 0 && M2.compare(S1) <= 0) {
                return [new AmountRange(M1, M2)]; // { M1, M2 };
            }
            else if (M1.compare(S2) >= 0 && M2.compare(S2) > 0) {
                return [new AmountRange(M1, M2)]; //{ M1, M2};
            }
            else if (M1.compare(S1) >= 0 && M2.compare(S2) <= 0) {
                return undefined;
            }
            else if (M1.compare(S1) < 0 && M2.compare(S2) > 0) {
                return [
                    new AmountRange(M1, S1),
                    new AmountRange(S2, M2)
                ]; //{M1, S1} + {S2, M2};
            }
            else if (M1.compare(S1) <= 0) {
                return [new AmountRange(M1, S1)]; // { M1, S1 };
            }
            else if (M2.compare(S2) >= 0) {
                return [new AmountRange(S2, M2)]; // { S2, M2 };
            }
            else {
                throw new Error('Operation exception.');
            }
        }
        else if (M.count !== undefined && S.uidEnd) {
            if (S.count === undefined) {
                throw new Error('When range has uidEnd it must define count.');
            }
            var M1 = M.uidStart;
            var S1 = S.uidStart.compare(S.uidEnd) > 0 ? S.uidEnd : S.uidStart;
            var S2 = S.uidStart.compare(S.uidEnd) > 0 ? S.uidStart : S.uidEnd;
            if ((M.count < 0 && M1.compare(S1) <= 0) || (M.count > 0 && M1.compare(S2) >= 0)) {
                return [new AmountRange(M1, undefined, M.count)]; // { M1, M.count };
            }
            else if (M.count < 0 && M1.compare(S2) > 0) {
                if (Math.abs(M.count) > Math.abs(S.count)) {
                    return [
                        new AmountRange(S2, M1),
                        new AmountRange(S1, undefined, M.count)
                    ];
                    //{ S2, M1 } + { S1, M.count };
                }
                else {
                    return [new AmountRange(S2, M1)]; // { S2, M1 };
                }
            }
            else if (M.count > 0 && M1.compare(S1) < 0) {
                if (Math.abs(M.count) > Math.abs(S.count)) {
                    return [
                        new AmountRange(M1, S1),
                        new AmountRange(S2, undefined, M.count)
                    ];
                    // { M1, S1 } + { S2, M.count };
                }
                else {
                    return [new AmountRange(M1, S1)]; // { M1, S1 };
                }
            }
            else if (M1.compare(S1) >= 0 && M1.compare(S2) <= 0) {
                throw new Error('Subtrahend must not start in minuend.');
            }
            else {
                throw new Error('Operation exception');
            }
        }
        else if (M.uidEnd && S.count !== undefined) {
            if (M.count === undefined) {
                throw new Error('When range has uidEnd it must define count.');
            }
            var S1 = S.uidStart;
            var M1 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidEnd : M.uidStart;
            var M2 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidStart : M.uidEnd;
            if ((S.count < 0 && S1.compare(M1) <= 0) || (S.count > 0 && S1.compare(M2) >= 0)) {
                return [M];
            }
            else if (S1.compare(M1) >= 0 && S1.compare(M2) <= 0 && S.count < 0) {
                if (Math.abs(M.count) > Math.abs(S.count)) {
                    return [
                        new AmountRange(S1, M2),
                        new AmountRange(M1, undefined, S.count)
                    ];
                    // { S1, M2 } + { M1, S.count };
                }
                else {
                    return [new AmountRange(S1, M2)]; // { S1, M2 };
                }
            }
            else if (S1.compare(M1) >= 0 && S1.compare(M2) <= 0 && S.count > 0) {
                if (Math.abs(M.count) > Math.abs(S.count)) {
                    return [
                        new AmountRange(M1, S1),
                        new AmountRange(M2, undefined, S.count)
                    ];
                    // { M1, S1 } + { M2, S.count };
                }
                else {
                    return [new AmountRange(M1, S1)]; // { M1, S1 };
                }
            }
            throw new Error('Operation exception');
        }
        else if (M.count !== undefined && S.count !== undefined) {
            throw new Error('Invalid operation');
        }
        else {
            throw new Error('Operation exception');
        }
    };
    AmountRangeOps.isIntersected = function (lhs, rhs) {
        var M = lhs.uidEnd ? lhs : rhs;
        var S = lhs.uidEnd ? rhs : lhs;
        if (!M.uidEnd) {
            throw new Error('One of ranges must have specified uidEnd.');
        }
        if (M.uidEnd && S.uidEnd) {
            var diff = AmountRangeOps.difference(M, S);
            if (diff && diff.length === 1) {
                return !M.isEqual(diff[0]); // if range is the same, that means that they are not intersected.
            }
            return true;
        }
        else {
            var S1 = S.uidStart;
            var M1 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidEnd : M.uidStart;
            var M2 = M.uidStart.compare(M.uidEnd) > 0 ? M.uidStart : M.uidEnd;
            if (S.count === undefined) {
                throw new Error('Count and uidEnd not defined.');
            }
            if ((S1.compare(M1) <= 0 && S.count < 0) || (S1.compare(M2) >= 0 && S.count > 0)) {
                return false; // Not intersected
            }
            else {
                return true; // Any other case assume intersected.
            }
        }
    };
    return AmountRangeOps;
}());
exports.AmountRangeOps = AmountRangeOps;
},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var CObject = (function () {
    function CObject(uid, name) {
        this._uid = uid;
        this._name = name;
    }
    Object.defineProperty(CObject.prototype, "uid", {
        get: function () {
            return this._uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CObject.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    return CObject;
}());
exports.CObject = CObject;
},{}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var ChartType = (function () {
    function ChartType() {
    }
    return ChartType;
}());
ChartType.candle = 'candle';
ChartType.heikinashi = 'heikinashi';
ChartType.hollow = 'hollow';
ChartType.line = 'line';
ChartType.linebreak = 'linebreak';
ChartType.mountain = 'mountain';
ChartType.ohlc = 'ohlc';
ChartType.rangebar = 'rangebar';
ChartType.renko = 'renko';
exports.ChartType = ChartType;
},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Core constants.
 */
var Constants = (function () {
    function Constants() {
    }
    Object.defineProperty(Constants, "FIBO_PERCENTAGE", {
        get: function () {
            return this._fiboPercantage;
        },
        enumerable: true,
        configurable: true
    });
    return Constants;
}());
Constants._fiboPercantage = [
    0.236,
    0.382,
    0.5,
    0.618,
    0.764,
    0.786,
    1,
    1.272,
    1.382,
    1.618,
    2,
    2.618,
    4.236
];
exports.Constants = Constants;
},{}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Core enumerations.
*/
var TimeInterval;
(function (TimeInterval) {
    TimeInterval[TimeInterval["notSet"] = 0] = "notSet";
    TimeInterval[TimeInterval["sec"] = 1000] = "sec";
    TimeInterval[TimeInterval["min"] = 60000] = "min";
    TimeInterval[TimeInterval["min5"] = 300000] = "min5";
    TimeInterval[TimeInterval["min15"] = 900000] = "min15";
    TimeInterval[TimeInterval["min30"] = 1800000] = "min30";
    TimeInterval[TimeInterval["hour"] = 3600000] = "hour";
    TimeInterval[TimeInterval["hour4"] = 14400000] = "hour4";
    TimeInterval[TimeInterval["hour6"] = 21600000] = "hour6";
    TimeInterval[TimeInterval["hour12"] = 43200000] = "hour12";
    TimeInterval[TimeInterval["day"] = 86400000] = "day";
    TimeInterval[TimeInterval["day3"] = 259200000] = "day3";
    TimeInterval[TimeInterval["week"] = 604800000] = "week";
    TimeInterval[TimeInterval["day10"] = 864000000] = "day10";
    TimeInterval[TimeInterval["month"] = 2678400000] = "month"; // 31 days
})(TimeInterval = exports.TimeInterval || (exports.TimeInterval = {}));
},{}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../shared/index");
var EventArgument = (function () {
    function EventArgument() {
    }
    return EventArgument;
}());
exports.EventArgument = EventArgument;
var ObjectEventArgument = (function (_super) {
    __extends(ObjectEventArgument, _super);
    function ObjectEventArgument(obj) {
        var _this = _super.call(this) || this;
        _this.obj = obj;
        return _this;
    }
    return ObjectEventArgument;
}(EventArgument));
exports.ObjectEventArgument = ObjectEventArgument;
var MouseEventArgument = (function (_super) {
    __extends(MouseEventArgument, _super);
    function MouseEventArgument(mouse) {
        var _this = _super.call(this) || this;
        _this.mouse = mouse;
        return _this;
    }
    return MouseEventArgument;
}(EventArgument));
exports.MouseEventArgument = MouseEventArgument;
var Events = (function () {
    function Events() {
        this._objectSelected = new index_1.Event();
        this._objectTreeChanged = new index_1.Event();
        this._mouseMove = new index_1.Event();
    }
    Object.defineProperty(Events, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new Events();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Events.prototype, "objectSelected", {
        get: function () {
            return this._objectSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Events.prototype, "objectTreeChanged", {
        get: function () {
            return this._objectTreeChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Events.prototype, "mouseMove", {
        get: function () {
            return this._mouseMove;
        },
        enumerable: true,
        configurable: true
    });
    return Events;
}());
exports.Events = Events;
},{"../shared/index":166}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TimeBar = (function () {
    function TimeBar() {
    }
    return TimeBar;
}());
exports.TimeBar = TimeBar;
var Grid = (function () {
    function Grid() {
        this.bars = [];
        this.precision = 0;
    }
    return Grid;
}());
exports.Grid = Grid;
},{}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../shared/index");
var ChartPoint = (function () {
    function ChartPoint(uid, value) {
        this.uid = uid;
        this.v = value;
    }
    ChartPoint.prototype.equals = function (other) {
        if (other) {
            if (other === this) {
                return true;
            }
            if (((this.uid && other.uid && this.uid.equals(other.uid)) || (this.uid === other.uid))
                && (this.v === other.v)) {
                return true;
            }
        }
        return false;
    };
    return ChartPoint;
}());
exports.ChartPoint = ChartPoint;
var Mouse = (function () {
    function Mouse() {
        this.pos = new index_1.Point();
        this.isDown = false;
        this.isEntered = false;
    }
    return Mouse;
}());
exports.Mouse = Mouse;
},{"../shared/index":166}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../utils/index");
var SettingType = (function () {
    function SettingType() {
    }
    return SettingType;
}());
SettingType.check = 'check';
SettingType.color = 'color';
SettingType.numeric = 'numeric';
SettingType.select = 'select';
SettingType.date = 'date';
exports.SettingType = SettingType;
var SettingSet = (function () {
    function SettingSet(param) {
        this.name = '';
        this.value = '';
        this.dispalyName = '';
        this.settingType = '';
        this.visible = true;
        this.group = false;
        this.options = [];
        this.settings = {};
        if (typeof param === 'string') {
            this.name = param;
        }
        else {
            SettingSet.init(this, param);
        }
    }
    SettingSet.prototype.setSetting = function (path, setting) {
        var parts = path.split('.');
        var dest = this.settings;
        for (var i = 0; i < parts.length; i += 1) {
            var part = parts[i];
            if (i === 0 && part === this.name) {
                // Ignore root name if it points to this setting
                continue;
            }
            if (!dest[part]) {
                dest[part] = new SettingSet(part);
            }
            if (i === parts.length - 1) {
                dest[part] = setting;
            }
            dest = dest[part].settings;
        }
    };
    SettingSet.prototype.getValueOrDefault = function (path, defaultValue) {
        var setting = this.getSetting(path);
        if (setting && !setting.settingType) {
            throw new Error("Setting type is unspecified for setting " + setting.name);
        }
        if (setting && setting.settingType && setting.value) {
            switch (setting.settingType) {
                case SettingType.check:
                    return (setting.value === 'true');
                case SettingType.color:
                    return setting.value;
                case SettingType.numeric:
                    return parseInt(setting.value, 10);
                case SettingType.select:
                    return parseInt(setting.value, 10);
                case SettingType.date:
                    return index_1.DateUtils.parseISODate(setting.value);
                default: throw new Error("Unexpected setting type " + setting.settingType);
            }
        }
        return defaultValue;
    };
    SettingSet.prototype.getSetting = function (path) {
        return this.getSettingImpl(path, '', this);
    };
    SettingSet.prototype.getSettingImpl = function (path, counter, ss) {
        counter = counter ? counter + '.' + ss.name : ss.name;
        if (counter === path) {
            return ss;
        }
        for (var _i = 0, _a = Object.keys(ss.settings); _i < _a.length; _i++) {
            var s = _a[_i];
            var res = this.getSettingImpl(path, counter, ss.settings[s]);
            if (res) {
                return res;
            }
        }
    };
    SettingSet.init = function (obj, values) {
        obj.name = values.name;
        obj.value = values.value || '';
        obj.settingType = values.settingType || '';
        obj.dispalyName = values.displayName || '';
        obj.visible = values.visible !== undefined ? values.visible : true;
        obj.group = values.group || false;
        obj.options = values.options || [];
        if (values.settings) {
            for (var _i = 0, _a = values.settings; _i < _a.length; _i++) {
                var s = _a[_i];
                var nested = new SettingSet(s.name);
                SettingSet.init(nested, s);
                obj.setSetting(s.name, nested);
            }
        }
    };
    return SettingSet;
}());
exports.SettingSet = SettingSet;
},{"../utils/index":175}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Storage classes.
 */
var index_1 = require("../shared/index");
var index_2 = require("../utils/index");
/**
 * Loads and saves storage tree from/to external storage.
 */
var StorageManager = (function () {
    function StorageManager(storage) {
        var _this = this;
        this._root = new StoreContainer();
        this.onChanged = function () {
            _this.save();
        };
        this.storage = storage;
        this._root.changed.on(this.onChanged);
        this.load();
    }
    StorageManager.prototype.root = function () {
        return this._root;
    };
    StorageManager.prototype.load = function () {
        if (this.storage) {
            var serialized = this.storage.getItem('__chartboard_storage__');
            if (serialized) {
                // unsubscribe
                if (this._root) {
                    this._root.changed.off(this.onChanged);
                }
                // initialize new container
                var obj = JSON.parse(serialized, index_2.JsonUtils.DATEPARSER); // Parsing dates as Date()
                this._root = new StoreContainer(obj);
                // subscribe
                this._root.changed.on(this.onChanged);
            }
        }
    };
    StorageManager.prototype.save = function () {
        if (this.storage) {
            var obj = this._root.serialize();
            var serialized = JSON.stringify(obj);
            this.storage.setItem('__chartboard_storage__', serialized);
        }
    };
    return StorageManager;
}());
exports.StorageManager = StorageManager;
/**
 * Represents a node from storage tree.
 */
var StoreContainer = (function () {
    function StoreContainer(obj, root) {
        this._changedEvt = new index_1.Event();
        this.obj = obj || new Object();
        this.root = root;
    }
    Object.defineProperty(StoreContainer.prototype, "changed", {
        get: function () {
            return this._changedEvt;
        },
        enumerable: true,
        configurable: true
    });
    StoreContainer.prototype.getProperty = function (propertyName) {
        return this.obj[propertyName];
    };
    StoreContainer.prototype.setProperty = function (propertyName, value) {
        this.obj[propertyName] = value;
        this.setChanged();
    };
    StoreContainer.prototype.getObjectProperty = function (propName) {
        var o = this.obj[propName];
        if (o === undefined) {
            o = new Object();
            this.obj[propName] = o;
        }
        return new StoreContainer(o, this.root || this);
    };
    StoreContainer.prototype.getArrayProperty = function (propName) {
        var o = this.obj[propName];
        if (o === undefined) {
            o = new Array();
            this.obj[propName] = o;
        }
        return new StoreArray(o, this.root || this);
    };
    StoreContainer.prototype.serialize = function () {
        return this.obj;
    };
    StoreContainer.prototype.setChanged = function () {
        if (this.root) {
            this.root.setChanged();
        }
        else {
            this._changedEvt.trigger();
        }
    };
    return StoreContainer;
}());
exports.StoreContainer = StoreContainer;
/**
 * Represents array of nodes from storage tree.
 */
var StoreArray = (function () {
    function StoreArray(a, root) {
        this.array = [];
        this.containers = [];
        this.count = 0;
        this.array = a;
        this.root = root;
        this.containers = a.map(function (el) {
            return new StoreContainer(el, root);
        });
    }
    StoreArray.prototype.addItem = function () {
        var o = new Object();
        this.array.push(o);
        var container = new StoreContainer(o, this.root);
        this.containers.push(container);
        this.root.setChanged();
        return container;
    };
    StoreArray.prototype.removeItem = function (index) {
        this.array.splice(index, 1);
        this.containers.splice(index, 1);
        this.root.setChanged();
    };
    StoreArray.prototype.asArray = function () {
        return this.containers;
    };
    return StoreArray;
}());
exports.StoreArray = StoreArray;
},{"../shared/index":166,"../utils/index":175}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../shared/index");
var VisualComponent = (function () {
    function VisualComponent(offset, size) {
        this._children = [];
        this._visible = true;
        this._offset = offset ? new index_1.Point(offset.x, offset.y) : new index_1.Point(0, 0);
        this._size = size ? new index_1.Size(size.width, size.height) : new index_1.Size(0, 0);
    }
    Object.defineProperty(VisualComponent.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        set: function (value) {
            this._offset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualComponent.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualComponent.prototype, "children", {
        get: function () {
            return this._children.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualComponent.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            this._visible = value;
        },
        enumerable: true,
        configurable: true
    });
    VisualComponent.prototype.addChild = function (child) {
        this._children.push(child);
    };
    VisualComponent.prototype.removeChild = function (child) {
        this._children = this._children.filter(function (value) { return value !== child; });
    };
    VisualComponent.prototype.handeMouse = function (relX, relY) {
        // Default behavior: just passing message to children
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.handeMouse(relX - child.offset.x, relY - child.offset.y);
        }
    };
    VisualComponent.prototype.render = function (context, renderLocator) {
        // Default behavior: just passing message to children
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.render(context, renderLocator);
        }
    };
    VisualComponent.prototype.resize = function (w, h) {
        // Default behavior: set size and pass message to children
        this._size = { width: w, height: h };
        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.resize(w, h);
        }
    };
    VisualComponent.prototype.forEach = function (delegate, childrenFirst, directOrder) {
        if (childrenFirst === void 0) { childrenFirst = false; }
        if (directOrder === void 0) { directOrder = true; }
        this.forEachAggregator(delegate, childrenFirst, directOrder, new index_1.Point(0, 0));
    };
    // public getGlobalOffset(): IPoint {
    //     //if (!this.globalOffset) {
    //         if (this.parent) {
    //             this.globalOffset = this._offset.add(this.parent.getGlobalOffset());
    //         } else {
    //             this.globalOffset = new Point(this._offset.x, this._offset.y);
    //         }
    //     //}
    //     return this.globalOffset;
    // }
    VisualComponent.prototype.forEachAggregator = function (delegate, childrenFirst, directOrder, initialOffset) {
        // 1. Execute for this component
        var offset = new index_1.Point(initialOffset.x + this.offset.x, initialOffset.y + this.offset.y);
        if (!childrenFirst && !delegate(this, offset)) {
            return false; // stop iterating
        }
        // 2. Iterating through children in direct or reverse order
        var index = directOrder ? 0 : this._children.length - 1;
        while ((directOrder && index < this._children.length)
            || (!directOrder && index >= 0)) {
            if (!this._children[index].forEachAggregator(delegate, childrenFirst, directOrder, offset)) {
                return false; // stop iterating through children
            }
            index = directOrder ? index + 1 : index - 1;
        }
        if (childrenFirst && !delegate(this, offset)) {
            return false; // stop iterating
        }
        return true; // continue
    };
    return VisualComponent;
}());
exports.VisualComponent = VisualComponent;
},{"../shared/index":166}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VisualContext = (function () {
    function VisualContext(renderBase, renderFront) {
        this._renderBase = renderBase;
        this._renderFront = renderFront;
    }
    Object.defineProperty(VisualContext.prototype, "renderBase", {
        get: function () {
            return this._renderBase;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualContext.prototype, "renderFront", {
        get: function () {
            return this._renderFront;
        },
        enumerable: true,
        configurable: true
    });
    return VisualContext;
}());
exports.VisualContext = VisualContext;
},{}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var AmountRange_1 = require("./AmountRange");
exports.AmountRange = AmountRange_1.AmountRange;
exports.AmountRangeOps = AmountRange_1.AmountRangeOps;
var ChartType_1 = require("./ChartType");
exports.ChartType = ChartType_1.ChartType;
var CObject_1 = require("./CObject");
exports.CObject = CObject_1.CObject;
var Constants_1 = require("./Constants");
exports.Constants = Constants_1.Constants;
var Enums_1 = require("./Enums");
exports.TimeInterval = Enums_1.TimeInterval;
var Events_1 = require("./Events");
exports.EventArgument = Events_1.EventArgument;
exports.Events = Events_1.Events;
exports.MouseEventArgument = Events_1.MouseEventArgument;
exports.ObjectEventArgument = Events_1.ObjectEventArgument;
var Interfaces_1 = require("./Interfaces");
exports.Grid = Interfaces_1.Grid;
exports.TimeBar = Interfaces_1.TimeBar;
var Model_1 = require("./Model");
exports.ChartPoint = Model_1.ChartPoint;
exports.Mouse = Model_1.Mouse;
var SettingSet_1 = require("./SettingSet");
exports.SettingSet = SettingSet_1.SettingSet;
exports.SettingType = SettingSet_1.SettingType;
var StorageManager_1 = require("./StorageManager");
exports.StorageManager = StorageManager_1.StorageManager;
exports.StoreArray = StorageManager_1.StoreArray;
exports.StoreContainer = StorageManager_1.StoreContainer;
var VisualComponent_1 = require("./VisualComponent");
exports.VisualComponent = VisualComponent_1.VisualComponent;
var VisualContext_1 = require("./VisualContext");
exports.VisualContext = VisualContext_1.VisualContext;
},{"./AmountRange":41,"./CObject":42,"./ChartType":43,"./Constants":44,"./Enums":45,"./Events":46,"./Interfaces":47,"./Model":48,"./SettingSet":49,"./StorageManager":50,"./VisualComponent":51,"./VisualContext":52}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ArrayDataStorage_1 = require("./ArrayDataStorage");
var DataSource_1 = require("./DataSource");
var ArrayDataSource = (function (_super) {
    __extends(ArrayDataSource, _super);
    //    protected readonly comparer = (item1: IUidValue, item2: IUidValue) => { return item1.date.getTime() - item2.date.getTime(); };
    function ArrayDataSource(dataType, config, data, comparer) {
        var _this = _super.call(this, dataType, config) || this;
        // private readonly defaultMinValue = 0;
        // private readonly defaultMaxValue = 100;
        _this.comparer = function (item1, item2) { return item1.uid.compare(item2.uid); };
        if (comparer) {
            _this.comparer = comparer;
        }
        var initData = data.slice();
        initData.sort(_this.comparer);
        _this.dataStorage = new ArrayDataStorage_1.ArrayDataStorage(_this.comparer, initData);
        return _this;
    }
    ArrayDataSource.prototype.load = function (uid, count) {
    };
    ArrayDataSource.prototype.loadRange = function (uidFirst, uidLast) {
    };
    ArrayDataSource.prototype.getIterator = function (filter) {
        // return everything
        return this.dataStorage.getIterator(filter);
    };
    ArrayDataSource.prototype.lock = function (uid) { };
    ArrayDataSource.prototype.dispose = function () { };
    return ArrayDataSource;
}(DataSource_1.DataSource));
exports.ArrayDataSource = ArrayDataSource;
},{"./ArrayDataStorage":55,"./DataSource":59}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ArrayDataStorage class.
 */
var index_1 = require("../utils/index");
var ArrayIterator_1 = require("./ArrayIterator");
/**
 * Stores items in sorted array.
 */
var ArrayDataStorage = (function () {
    function ArrayDataStorage(comparer, initArray) {
        if (!comparer) {
            throw new Error('Argument \'comparer\' is null.');
        }
        this.comparer = comparer;
        this.dataSnapshot = {
            data: initArray ? initArray.slice() : [],
            timestamp: 0
        };
        // sort initial array
        this.dataSnapshot.data.sort(this.comparer);
    }
    Object.defineProperty(ArrayDataStorage.prototype, "length", {
        get: function () {
            return this.dataSnapshot.data.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayDataStorage.prototype, "first", {
        get: function () {
            var data = this.dataSnapshot.data;
            return (data.length > 0) ? data[0] : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayDataStorage.prototype, "last", {
        get: function () {
            var data = this.dataSnapshot.data;
            var length = data.length;
            return (length > 0) ? data[length - 1] : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayDataStorage.prototype, "isEmpty", {
        get: function () {
            return this.dataSnapshot.data.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    ArrayDataStorage.prototype.clear = function () {
        this.dataSnapshot.timestamp = this.dataSnapshot.timestamp + 1;
        this.dataSnapshot.data = [];
    };
    ArrayDataStorage.prototype.merge = function (update, updateFunction) {
        if (update && update.length) {
            // Sort incoming array
            update.sort(this.comparer);
            // Update current timestamp
            this.dataSnapshot.timestamp = this.dataSnapshot.timestamp + 1;
            // Import incoming data to the array
            this.dataSnapshot.data = index_1.ArrayUtils.merge(this.dataSnapshot.data, update, this.comparer, updateFunction);
        }
    };
    /**
     * Finds first element that matches the condition and removes all follwing items the element.
     * @param predicate
     */
    ArrayDataStorage.prototype.removeAfterInclusive = function (predicate) {
        var itemIndex = -1;
        this.dataSnapshot.data.some(function (e, i, array) {
            if (predicate(e)) {
                itemIndex = i;
                return true;
            }
            return false;
        });
        if (itemIndex === -1) {
            //throw new Error('Element is not found.');
            return;
        }
        // Update current timestamp
        this.dataSnapshot.timestamp = this.dataSnapshot.timestamp + 1;
        // Import incoming data to the array
        this.dataSnapshot.data.length = itemIndex;
        //this.dataSnapshot.data = this.dataSnapshot.data.slice(0, itemIndex + 1);
    };
    /**
     * Removes items from the start.
     * Iteratest through items from beginning, finds first item that is not fit to condition and removes all preceding.
     * @param predicate
     */
    ArrayDataStorage.prototype.trimLeft = function (predicate) {
        var index = -1;
        this.dataSnapshot.data.some(function (e, i) {
            if (!predicate(e)) {
                index = i;
                return true;
            }
            return false;
        });
        if (index === -1) {
            // If no elements in array or all elements fit the condition.
            this.dataSnapshot.data = [];
        }
        else {
            this.dataSnapshot.data.splice(0, index);
        }
        this.dataSnapshot.timestamp = this.dataSnapshot.timestamp + 1;
    };
    /**
     * Removes items from the end.
     * Iteratest through items from end, finds first item that is not fit to condition and removes all following.
     * @param predicate
     */
    ArrayDataStorage.prototype.trimRight = function (predicate) {
        var l = this.dataSnapshot.data.length;
        var index = -1;
        for (var i = l - 1; i >= 0; i -= 1) {
            if (!predicate(this.dataSnapshot.data[i])) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            // If no elements in array or all elements fit the condition.
            this.dataSnapshot.data = [];
        }
        else if ((index + 1) < l) {
            this.dataSnapshot.data.splice(index + 1); // remove all items after specified index (inclusive)
        }
        this.dataSnapshot.timestamp = this.dataSnapshot.timestamp + 1;
    };
    // public filter(filter?: (item: T) => boolean): IDataIterator<T> {
    //     return new ArrayIterator<T>(this.dataSnapshot, this.dataSnapshot.timestamp, filter);
    // }
    ArrayDataStorage.prototype.getIterator = function (filter) {
        return new ArrayIterator_1.ArrayIterator(this.dataSnapshot, this.dataSnapshot.timestamp, filter);
        // // Find the element
        // const itemIndex = this.findIndex(predicate);
        // if (itemIndex !== -1) {
        //     const imin = Math.min(itemIndex, itemIndex + count);
        //     const imax = Math.max(itemIndex, itemIndex + count);
        //     return new ArrayIterator(this.dataSnapshot, this.dataSnapshot.timestamp,
        //                              (e: T, i: number) => { return (i >= imin && i <= imax); });
        // } else {
        //     return new ArrayIterator(
        //         this.dataSnapshot, this.dataSnapshot.timestamp, (e: T, i: number) => false); // Do not return anything               
        // }
    };
    return ArrayDataStorage;
}());
exports.ArrayDataStorage = ArrayDataStorage;
},{"../utils/index":175,"./ArrayIterator":56}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ArrayIterator = (function () {
    function ArrayIterator(dataSnapshot, timestamp, filter) {
        this.dataSnapshot = dataSnapshot;
        this.timestamp = timestamp;
        this.currentIndex = 0;
        this.currentIndex = -1;
        this.filter = filter;
    }
    ArrayIterator.prototype.reset = function () {
        this.currentIndex = -1;
        this.timestamp = this.dataSnapshot.timestamp;
    };
    /**
     * Starts from the beginning of data.
     */
    ArrayIterator.prototype.goTo = function (predicate) {
        this.reset();
        while (this.moveNext()) {
            if (predicate(this.current)) {
                return true;
            }
        }
        return false;
    };
    /**
     * Moves iterator while condition is met. Stays on the last element that satisfy condition.
     * Starts from beginning.
     * @param predicate
     */
    ArrayIterator.prototype.goWhile = function (predicate) {
        if (this.filter) {
            throw new Error('Not implemented.');
        }
        this.reset();
        var nextIndex = 0;
        while (nextIndex < this.dataSnapshot.data.length
            && predicate(this.dataSnapshot.data[nextIndex])) {
            this.currentIndex = nextIndex;
            nextIndex += 1;
        }
        return (this.currentIndex >= 0 && this.currentIndex < this.dataSnapshot.data.length);
    };
    /**
     * Moves pointer from current position untill condition is met.
     * Returns count of moves done. Or -1 if could not find element.
     */
    ArrayIterator.prototype.moveTo = function (predicate) {
        var countMoves = 0;
        // First check current element:
        do {
            if (predicate(this.current)) {
                return countMoves;
            }
            countMoves += 1;
        } while (this.moveNext());
        return -1;
    };
    // public find(predicate: (item: T) => boolean): T | undefined {
    //     // Should not change state
    //     let index = -1;
    //     while (index < this.dataSnapshot.data.length) {
    //         index = this.skipFilteredForward(index);
    //         if (index < this.dataSnapshot.data.length && predicate(this.dataSnapshot.data[index])) {
    //             return this.dataSnapshot.data[index];
    //         }
    //     }
    // }
    // public count(): number {
    //     // Should not change state
    //     let count = 0;
    //     let index = -1;
    //     while (index < this.dataSnapshot.data.length) {
    //         index = this.skipFilteredForward(index);
    //         if (index < this.dataSnapshot.data.length) {
    //             count += 1;
    //         }
    //     }
    //     return count;
    // }
    ArrayIterator.prototype.skipFilteredForward = function (index) {
        if (this.filter) {
            do {
                index += 1;
            } while (index < this.dataSnapshot.data.length && !this.filter(this.dataSnapshot.data[index]));
        }
        else {
            index += 1;
        }
        return index;
    };
    ArrayIterator.prototype.skipFilteredBackward = function (index) {
        if (this.filter) {
            do {
                index -= 1;
            } while (index >= 0 && !this.filter(this.dataSnapshot.data[index]));
        }
        else {
            index -= 1;
        }
        return index;
    };
    /**
     * Moves pointer forward n times.
     * Returns actual count of moves done.
     */
    ArrayIterator.prototype.moveNextTimes = function (n) {
        var i = 0;
        while (i < n && this.moveNext()) {
            i += 1;
        }
        return i; //(i === n);
    };
    /**
     * Moves pointer forward/backward n times.
     * Returns actual count of moves done (positive or negative).
     * Current can not become undefined.
     */
    ArrayIterator.prototype.moveTimes = function (n) {
        this.checkTimestamp();
        if (this.dataSnapshot.data.length === 0 || n === 0) {
            return 0;
        }
        if (this.filter) {
            throw new Error('Not implemented.');
        }
        var shift;
        if (n < 0) {
            shift = Math.max(-this.currentIndex, n);
        }
        else {
            shift = Math.min(this.dataSnapshot.data.length - (this.currentIndex + 1), n);
        }
        this.currentIndex += shift;
        return shift;
    };
    /**
     * Moves pointer on 1 item forward.
     * Returns false if can not move.
     */
    ArrayIterator.prototype.moveNext = function () {
        this.checkTimestamp();
        if (this.dataSnapshot.data.length === 0) {
            return false;
        }
        // Current index must not get greater then length
        if (this.currentIndex === this.dataSnapshot.data.length) {
            return false;
        }
        do {
            this.currentIndex += 1;
        } while (this.currentIndex < this.dataSnapshot.data.length
            && this.filter && !this.filter(this.dataSnapshot.data[this.currentIndex])); // If filter is defined use it.
        return (this.currentIndex < this.dataSnapshot.data.length);
    };
    /**
     * Moves pointer on 1 item backwards.
     * Returns false if can not move.
     */
    ArrayIterator.prototype.movePrev = function () {
        this.checkTimestamp();
        if (this.dataSnapshot.data.length === 0) {
            return false;
        }
        // Current index must not get less then -1
        if (this.currentIndex === -1) {
            return false;
        }
        // Using filter to skip some elements
        do {
            this.currentIndex -= 1;
        } while (this.currentIndex >= 0
            && this.filter && !this.filter(this.dataSnapshot.data[this.currentIndex])); // If filter is defined use it.
        return (this.currentIndex >= 0 && this.currentIndex < this.dataSnapshot.data.length);
    };
    /**
     * Iterates backwards starting from the current position.
     * Iterats till @func returns "true" and begginning of storage is not reached.
     * Counter: [
     *   0 - current element,
     *   1 - previous element,
     *   ...
     * ]
     * @param func
     */
    ArrayIterator.prototype.somebackward = function (func) {
        this.checkTimestamp();
        if (this.currentIndex < 0 || this.currentIndex >= this.dataSnapshot.data.length) {
            return;
        }
        var counter = 0;
        do {
            if (!func(this.current, counter)) {
                break;
            }
            counter += 1;
        } while (this.movePrev());
    };
    Object.defineProperty(ArrayIterator.prototype, "current", {
        get: function () {
            this.checkTimestamp();
            return this.dataSnapshot.data[this.currentIndex];
        },
        enumerable: true,
        configurable: true
    });
    ArrayIterator.prototype.goToLast = function () {
        if (this.filter) {
            throw new Error('Not implemented.');
        }
        this.reset();
        if (this.dataSnapshot.data.length > 0) {
            this.currentIndex = this.dataSnapshot.data.length - 1;
            return true;
        }
        return false;
    };
    Object.defineProperty(ArrayIterator.prototype, "last", {
        get: function () {
            if (this.filter) {
                throw new Error('Not implemented.');
            }
            this.checkTimestamp();
            if (this.dataSnapshot.data.length > 0) {
                return this.dataSnapshot.data[this.dataSnapshot.data.length - 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayIterator.prototype, "previous", {
        get: function () {
            if (this.filter) {
                throw new Error('Not implemented.');
            }
            this.checkTimestamp();
            if (this.currentIndex >= 1) {
                return this.dataSnapshot.data[this.currentIndex - 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    ArrayIterator.prototype.checkTimestamp = function () {
        if (this.dataSnapshot.timestamp !== this.timestamp) {
            // TODO: Check behavior
            throw new Error('Data iterator is expired.');
        }
    };
    return ArrayIterator;
}());
exports.ArrayIterator = ArrayIterator;
},{}],57:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var ArrayDataStorage_1 = require("./ArrayDataStorage");
var DataSource_1 = require("./DataSource");
var DataSourceConfig_1 = require("./DataSourceConfig");
var TaskParams = (function () {
    function TaskParams(cuid, cuidLast, count) {
        this.cuid = cuid;
        this.cuidLast = cuidLast;
        this.count = count;
    }
    return TaskParams;
}());
var Request = (function () {
    function Request(uid, uidlast, count) {
        this.suid = uid;
        this.uidlast = uidlast;
        this.count = count;
    }
    Request.prototype.isEqual = function (other) {
        // return (other
        // && this.suid.compare(other.suid) === 0
        // && this.count === other.count);
        return (other !== undefined
            && this.suid.compare(other.suid) === 0
            && (this.uidlast === other.uidlast
                || (this.uidlast !== undefined && other.uidlast !== undefined && this.uidlast.compare(other.uidlast) === 0))
            && (this.count === other.count));
    };
    return Request;
}());
var ComputeTask = (function () {
    function ComputeTask(storage, params, datachanged, sendrequest, compute, next) {
        this.requests = [];
        this.isFinished = false;
        this.storage = storage;
        this.iterator = storage.getIterator();
        this.triggerDataChanged = datachanged;
        this.sendrequest = sendrequest;
        this.compute = compute;
        this.startTime = new Date();
        this.next = next;
        this.params = params;
        console.log("new ComputeTask( " + params.cuid.t.toISOString() + " " + (params.cuidLast ? params.cuidLast.t.toISOString() : "") + " " + params.count + " )");
        if (!params.count && !params.cuidLast) {
            throw new Error('Arguments "count" and "cuidLast" not defined.');
        }
    }
    Object.defineProperty(ComputeTask.prototype, "isOutdated", {
        get: function () {
            return ((new Date().getTime()) - this.startTime.getTime()) > (60 * 1000); // 1 min
        },
        enumerable: true,
        configurable: true
    });
    ComputeTask.prototype.start = function () {
        var _this = this;
        // clear timer
        this.startTime = new Date();
        console.log('----- Task.start -----');
        // Narrow load range
        if (this.params.count !== undefined && this.storage.first && this.storage.last) {
            if (this.params.cuid.compare(this.storage.first.uid) >= 0 && this.params.cuid.compare(this.storage.last.uid) <= 0) {
                var shift = void 0;
                if (this.storage.last.uid.compare(this.params.cuid) <= 0) {
                    shift = this.storage.length;
                }
                else {
                    this.iterator.goTo(function (item) { return true; }); // go to first element
                    shift = this.iterator.moveTo(function (item) { return item.uid.compare(_this.params.cuid) >= 0; });
                    if (shift === -1) {
                        shift = 0;
                    }
                }
                if (this.params.count > 0) {
                    this.params.cuid = this.storage.last.uid;
                    // Get distance b/w UID-LAST
                    this.params.count -= (this.storage.length - shift);
                    console.log("Narrowing range: " + this.storage.last.uid.t.toISOString() + " " + this.params.count);
                    if (this.params.count <= 0) {
                        this.params.count = 0;
                        this.isFinished = true;
                        return;
                    }
                }
                else {
                    this.params.cuid = this.storage.first.uid;
                    // Get distance b/w FIRST-UID
                    this.params.count += shift;
                    console.log("Narrowing range: " + this.storage.first.uid.t.toISOString() + " " + this.params.count);
                    if (this.params.count >= 0) {
                        this.params.count = 0;
                        this.isFinished = true;
                        return;
                    }
                }
            }
        }
        var newReqs = this.makeRequests();
        var _loop_1 = function (newReq) {
            // Check that requests are not repeated
            var some = this_1.requests.some(function (req) { return req.isEqual(newReq); });
            if (!some) {
                this_1.requests.push(newReq);
                // Send request
                this_1.sendrequest(newReq.suid, newReq.uidlast, newReq.count);
            }
        };
        var this_1 = this;
        for (var _i = 0, newReqs_1 = newReqs; _i < newReqs_1.length; _i++) {
            var newReq = newReqs_1[_i];
            _loop_1(newReq);
        }
    };
    ComputeTask.prototype.makeRequests = function () {
        var REQ_COUNT = 500;
        if (this.storage.first && this.storage.last) {
            var M = new index_1.AmountRange(this.params.cuid, this.params.cuidLast, this.params.count);
            var S = new index_1.AmountRange(this.storage.first.uid, this.storage.last.uid, this.storage.length);
            var diff = index_1.AmountRangeOps.difference(M, S);
            if (diff) {
                return diff.map(function (d) {
                    //-----------------------------------------------
                    var count = d.count;
                    if (d.count !== undefined) {
                        count = d.count > 0 ? REQ_COUNT : -REQ_COUNT; // extending to REQ_COUNT
                    }
                    //-----------------------------------------------
                    return new Request(d.uidStart, d.uidEnd, count);
                });
            }
            else {
                return [];
            }
        }
        else {
            return [
                new Request(this.params.cuid, undefined, REQ_COUNT)
            ];
        }
        // // Make request
        // let cuidRequest: Uid;
        // let countRequest: number;
        // if (this.params.count !== undefined) {
        //     if (this.params.count > 0) {
        //         cuidRequest = (this.storage.last !== undefined) ? this.storage.last.uid : this.params.cuid;
        //         countRequest = REQ_COUNT;
        //     } else if (this.params.count < 0) {
        //         cuidRequest = (this.storage.first !== undefined) ? this.storage.first.uid : this.params.cuid;
        //         countRequest = -REQ_COUNT;
        //     } else {
        //         this.isFinished = true;
        //         return;
        //     }
        // } else if (this.params.cuidLast !== undefined) {
        //     // get last uid
        //     cuidRequest = (this.storage.last !== undefined) ? this.storage.last.uid : this.params.cuid;
        //     countRequest = REQ_COUNT;
        // } else {
        //     throw new Error('Arguments "count" and "cuidLast" not defined.');
        // }
    };
    ComputeTask.prototype.computeAndTriggerEvent = function (arg) {
        var argres = this.compute(arg);
        if (argres) {
            this.triggerDataChanged(argres);
        }
    };
    ComputeTask.prototype.isArgRelated = function (arg) {
        var M = new index_1.AmountRange(arg.uidFirst, arg.uidLast, arg.count);
        var S = new index_1.AmountRange(this.params.cuid, this.params.cuidLast, this.params.count);
        return index_1.AmountRangeOps.isIntersected(M, S);
        // const argFirstTime = arg.uidFirst.t.getTime();
        // const argLastTime = arg.uidLast.t.getTime();
        // const cuidTime = this.params.cuid.t.getTime();
        // if (this.params.cuidLast !== undefined) {
        //     // Checking if at least one time is inside interval
        //     const cuidLastTime = this.params.cuidLast.t.getTime();
        //     return ((argFirstTime >= cuidTime && argFirstTime <= cuidLastTime)
        //     || (argLastTime >= cuidTime && argLastTime <= cuidLastTime));
        // } else if (this.params.count !== undefined) {
        //     // Check if one of incoming Uid is on the right side
        //     if (this.params.count > 0) {
        //         return argLastTime >= cuidTime;
        //     } else if (this.params.count < 0) {
        //         return argFirstTime <= cuidTime;
        //     }
        // } else {
        //     throw new Error('Arguments "count" and "cuidLast" not defined.');
        // }
        // return false;
    };
    ComputeTask.prototype.checkIfDataEnough = function (params) {
        var _this = this;
        // TODO: There can be no exact Uid. Use gt/lt comparing
        if (this.iterator.goTo(function (item) { return item.uid.compare(_this.params.cuid) === 0; })) {
            if (this.params.count !== undefined) {
                return (this.iterator.moveTimes(this.params.count) === this.params.count);
            }
            else if (this.params.cuidLast !== undefined) {
                // There can be no exact Uid
                return this.iterator.moveTo(function (item) { return item.uid.compare(_this.params.cuid) >= 0; });
            }
            else {
                throw new Error('Arguments "count" and "cuidLast" not defined.');
            }
        }
    };
    ComputeTask.prototype.handleEvent = function (arg, sourceIterator) {
        // if (this.isFinished) {
        //     if (this.next) {
        //         this.next.handleEvent(arg, sourceIterator);
        //     }
        //     return;
        // }
        // Check if data is related to this task
        var related = this.isArgRelated(arg);
        console.log('----- Task.handleEvent -----');
        console.log("arg " + arg.uidFirst.t.toISOString() + " - " + arg.uidLast.t.toISOString() + " ");
        console.log("params " + this.params.cuid.t.toISOString() + " - " + (this.params.cuidLast ? this.params.cuidLast.t.toISOString() : "N/A") + " / " + this.params.count + " ");
        console.log('Related: ' + related);
        if (!related && this.next) {
            // If not - pass it further
            this.next.handleEvent(arg, sourceIterator);
            return;
        }
        // If yes
        // Compute values
        this.computeAndTriggerEvent(arg);
        if (!related) {
            // do not send requests
            return;
        }
        // Recheck data.
        if (this.checkIfDataEnough(this.params)) {
            console.log('task is finished');
            // If data is enough, finish.
            this.isFinished = true;
        }
        else {
            // If data is not enough
            // send one more request
            // clear timer
            this.startTime = new Date();
            this.start();
        }
    };
    return ComputeTask;
}());
var ComputedDataSource = (function (_super) {
    __extends(ComputedDataSource, _super);
    function ComputedDataSource(source) {
        var _this = _super.call(this, index_2.Candlestick, new DataSourceConfig_1.DataSourceConfig(source.precision)) || this;
        _this.comparer = function (lhs, rhs) { return lhs.uid.compare(rhs.uid); };
        _this.triggerDataChanged = function (arg) {
            _this.dateChangedEvent.trigger(arg);
        };
        _this.sendDataRequest = function (uid, uidLast, count) {
            console.log("Sending request: " + uid.t.toISOString() + " " + count);
            if (uidLast) {
                _this.source.loadRange(uid, uidLast);
            }
            else if (count) {
                _this.source.load(uid, count);
            }
            else {
                throw new Error('uid or count must be defined.');
            }
        };
        _this.onDataSourceChanged = function (arg) {
            console.log('============ STARTING TASKS CHAIN ============================');
            // Pass result to the tasks
            if (_this.task) {
                _this.task.handleEvent(arg, _this.sourceIterator);
                // Remove "outdated" tasks
                if (_this.task.isOutdated) {
                    _this.task = undefined;
                }
                else {
                    var current = _this.task;
                    while (current.next && !current.next.isOutdated) {
                        current = current.next;
                    }
                    current.next = undefined;
                }
            }
            else {
                // If not current task then create a new task
                _this.task = _this.createTask(arg.uidFirst, arg.uidLast, arg.count);
                _this.task.handleEvent(arg, _this.sourceIterator);
                //this.task.start();
            }
        };
        _this.computeDelegate = function (arg) {
            return _this.compute(arg);
        };
        _this.dataStorage = new ArrayDataStorage_1.ArrayDataStorage(_this.comparer);
        _this.iterator = _this.dataStorage.getIterator();
        _this.source = source;
        _this.source.dataChanged.on(_this.onDataSourceChanged);
        _this.sourceIterator = source.getIterator();
        return _this;
    }
    ComputedDataSource.prototype.getIterator = function () {
        return this.dataStorage.getIterator();
    };
    ComputedDataSource.prototype.load = function (uid, count) {
        if (!uid || count === 0) {
            return;
        }
        console.log("CDS.load " + uid.t.toISOString() + " / " + count + " ");
        if (this.iterator.goTo(function (item) { return item.uid.compare(uid) === 0; })) {
            if (this.iterator.moveTimes(count) === count) {
                // data already loaded
                return;
            }
        }
        var params = new TaskParams(uid, undefined, count);
        this.task = new ComputeTask(this.dataStorage, params, this.triggerDataChanged, this.sendDataRequest, this.computeDelegate, this.task);
        this.task.start();
    };
    ComputedDataSource.prototype.loadRange = function (uidFirst, uidLast) {
        if (!uidFirst || !uidLast || uidFirst.compare(uidLast) === 0) {
            return;
        }
        console.log("CDS.load " + uidFirst.t.toISOString() + " / " + uidLast.t.toISOString() + " ");
        // sort arguments
        if (uidFirst.compare(uidLast) > 0) {
            var temp = uidFirst;
            uidFirst = uidLast;
            uidLast = temp;
        }
        // TODO: There can be no exact Uid. Use gt/lt comparing
        if (this.iterator.goTo(function (item) { return item.uid.compare(uidFirst) === 0; })) {
            if (this.iterator.moveTo(function (item) { return item.uid.compare(uidLast) >= 0; })) {
                // data already loaded
                return;
            }
        }
        // const params = new TaskParams(uidFirst, uidLast);
        // this.task = new ComputeTask(this.dataStorage, params, this.triggerDataChanged, this.sendDataRequest, 
        //                             this.computeDelegate, this.task);
        this.task = this.createTask(uidFirst, uidLast, undefined, this.task);
        this.task.start();
    };
    ComputedDataSource.prototype.createTask = function (uidFirst, uidLast, count, nextTask) {
        var params = new TaskParams(uidFirst, uidLast, count);
        return new ComputeTask(this.dataStorage, params, this.triggerDataChanged, this.sendDataRequest, this.computeDelegate, nextTask);
    };
    ComputedDataSource.prototype.lock = function (uid) { };
    ComputedDataSource.prototype.dispose = function () {
        this.source.dataChanged.off(this.onDataSourceChanged);
    };
    return ComputedDataSource;
}(DataSource_1.DataSource));
exports.ComputedDataSource = ComputedDataSource;
},{"../core/index":53,"../model/index":142,"./ArrayDataStorage":55,"./DataSource":59,"./DataSourceConfig":60}],58:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../shared/index");
var DataChangedEvent = (function (_super) {
    __extends(DataChangedEvent, _super);
    function DataChangedEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DataChangedEvent;
}(index_1.Event));
exports.DataChangedEvent = DataChangedEvent;
var DataChangedArgument = (function () {
    function DataChangedArgument(uidFirst, // uid of first element that changed
        uidLast, // uid of last element that changed
        count // count of elements that changed
    ) {
        this.uidFirst = uidFirst;
        this.uidLast = uidLast;
        this.count = count; // count of elements that changed
        if (count < 0) {
            throw new Error('DataChangedArgument property "count" must be positive.');
        }
    }
    return DataChangedArgument;
}());
exports.DataChangedArgument = DataChangedArgument;
// export class DataChangedArgument {
//     private readonly _range: IRange<Date>;
//     private readonly _interval: TimeInterval;
//     private readonly _lastDateBefore?: Date;
//     private readonly _lastDateAfter?: Date;
//     constructor(range: IRange<Date>, interval: TimeInterval, lastDateBefore?: Date, lastDateAfter?: Date) {
//         this._range = range;
//         this._interval = interval;
//         this._lastDateBefore = lastDateBefore;
//         this._lastDateAfter = lastDateAfter;
//     }
//     /**
//      * Range of updated data
//      */
//     public get range() {
//         return this._range;
//     }
//     public get interval() {
//         return this._interval;
//     }
//     /** 
//      * Date of the last item before data is changed 
//      */
//     public get lastDateBefore() {
//         return this._lastDateBefore;
//     }
//     /** 
//      * Date of the last item after data is changed 
//      */
//     public get lastDateAfter() {
//         return this._lastDateAfter;
//     }
// }
},{"../shared/index":166}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var index_3 = require("../shared/index");
var DataChangedEvent_1 = require("./DataChangedEvent");
var DataSource = (function () {
    function DataSource(dataType, config) {
        this.dateChangedEvent = new DataChangedEvent_1.DataChangedEvent();
        this._asset = '';
        this._name = '';
        this.defaultMinValue = 0;
        this.defaultMaxValue = 100;
        this.extensions = {};
        this._dataType = dataType;
        this._config = config;
    }
    Object.defineProperty(DataSource.prototype, "config", {
        // TODO: Derived classes have their own settings.
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "dataChanged", {
        get: function () {
            return this.dateChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "dataType", {
        get: function () {
            return this._dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "asset", {
        get: function () {
            return this._asset;
        },
        set: function (value) {
            this._asset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "precision", {
        get: function () {
            return this._config.precision;
        },
        set: function (value) {
            this.config.precision = value;
        },
        enumerable: true,
        configurable: true
    });
    DataSource.prototype.getValuesRange = function (range) {
        this.validateRange(range);
        if (this.dataStorage.isEmpty) {
            return { start: this.defaultMinValue, end: this.defaultMaxValue };
        }
        var minValue = Number.MAX_VALUE;
        var maxValue = Number.MIN_VALUE;
        var iterator = this.dataStorage.getIterator();
        if (iterator.goTo(function (item) { return item.uid.compare(range.start) >= 0; })) {
            do {
                var h = iterator.current.h;
                var l = iterator.current.l;
                if (l !== undefined && l < minValue) {
                    minValue = l;
                }
                if (h !== undefined && h > maxValue) {
                    maxValue = h;
                }
            } while (iterator.moveNext() && iterator.current.uid.compare(range.end) <= 0);
        }
        return { start: minValue, end: maxValue };
    };
    DataSource.prototype.getHHLL = function (uidFrom, uidTo) {
        var start = uidFrom.compare(uidTo) <= 0 ? uidFrom : uidTo;
        var end = uidFrom.compare(uidTo) <= 0 ? uidTo : uidFrom;
        var o = undefined;
        var c = undefined;
        var ll = undefined;
        var hh = undefined;
        var uid = undefined;
        var iterator = this.dataStorage.getIterator();
        if (iterator.goTo(function (item) { return item.uid.compare(start) >= 0; })) {
            o = iterator.current.o;
            do {
                var h = iterator.current.h;
                var l = iterator.current.l;
                ll = ll === undefined ? l : Math.min(ll, l !== undefined ? l : +Infinity);
                hh = hh === undefined ? h : Math.max(hh, h !== undefined ? h : -Infinity);
                c = iterator.current.c;
                uid = iterator.current.uid;
            } while (iterator.moveNext() && iterator.current.uid.compare(end) <= 0);
        }
        return uid !== undefined ? new index_2.Candlestick(uid.t, c, o, hh, ll) : undefined;
    };
    DataSource.prototype.getLastCandle = function () {
        return this.dataStorage.last;
    };
    DataSource.prototype.addExtension = function (name, ext) {
        this.extensions[name] = ext;
        // recompute only new extension over whole extension
        this.computeExtensions(undefined, name);
    };
    DataSource.prototype.removeExtension = function (name) {
        // replace
        this.extensions[name] = undefined;
    };
    /**
     * Computes extension values over specified range.
     * @param arg Specified range. If not specified, recompute all data.
     * @param extUid If undefined, calculates for all extensions.
     */
    DataSource.prototype.computeExtensions = function (arg, extName) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        // 1. Determine required amount of previous values. Select max of all extensions. 
        //    Check if there any extension.
        //
        var requiredLength = -1;
        var extCount = 0;
        for (var _i = 0, _a = Object.keys(this.extensions); _i < _a.length; _i++) {
            var uid = _a[_i];
            var ext = this.extensions[uid];
            if (ext && extName && uid === extName) {
                requiredLength = ext.amountRequires;
                extCount = 1;
            }
            else if (ext && !extName) {
                requiredLength = Math.max(requiredLength, ext.amountRequires);
                extCount += 1;
            }
        }
        if (requiredLength === -1 || extCount === 0) {
            return arg;
        }
        // 2. Load previous values (if range is constrained). Init fixed size array
        //
        var line = new index_3.FixedSizeArray(requiredLength, function (lhs, rhs) { throw new Error('Not implemented.'); });
        var iterator = this.dataStorage.getIterator();
        if (arg) {
            if (!iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                throw new Error('Source does not contain updated data');
            }
            // Fill fixed sized array
            var array = [];
            var counter = 0;
            while (counter < requiredLength && iterator.movePrev()) {
                array[counter] = iterator.current;
                counter += 1;
            }
            // Put in back order
            for (var i = array.length - 1; i >= 0; i -= 1) {
                line.push(array[i]);
            }
            // Return to first element
            iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            // go to first element
            if (!iterator.moveNext()) {
                return;
            } // Finish if no data
            // Fixed size array can not be filled
        }
        // 3. Compute (if range is constrained - till the end of array)
        //
        do {
            // Add current element
            line.push(iterator.current);
            for (var _b = 0, _c = Object.keys(this.extensions); _b < _c.length; _b++) {
                var uid = _c[_b];
                var ext = this.extensions[uid];
                if (ext && extName && uid === extName) {
                    ext.extend(line);
                }
                else if (ext && !extName) {
                    ext.extend(line);
                }
            }
        } while (iterator.moveNext());
        // 4. Return __original__ range.
        return arg;
    };
    DataSource.prototype.setTimeRange = function (range) {
        this.timeRange = range;
    };
    DataSource.prototype.getSettings = function () {
        return new index_1.SettingSet('datasource');
    };
    DataSource.prototype.setSettings = function (settings) {
        return;
    };
    DataSource.prototype.validateDateRange = function (range) {
        if (!range) {
            throw new Error('Argument "range" is not defined.');
        }
        if (!range.start || !range.end) {
            throw new Error('Range is not defined.');
        }
        if (range.start > range.end) {
            throw new Error('Start of specified range should not be less then end.');
        }
    };
    DataSource.prototype.validateRange = function (range) {
        if (!range) {
            throw new Error('Argument "range" is not defined.');
        }
        if (!range.start || !range.end) {
            throw new Error('Range is not defined.');
        }
        if (range.start.t > range.end.t) {
            throw new Error('Start of specified range should not be less then end.');
        }
        else if (range.start.t.getTime() === range.end.t.getTime() && range.start.n > range.end.n) {
            throw new Error('Start of specified range should not be less then end.');
        }
    };
    DataSource.prototype.validateInterval = function (interval) {
        if (!interval) {
            throw new Error('Argument "interval" is not defined.');
        }
    };
    return DataSource;
}());
exports.DataSource = DataSource;
},{"../core/index":53,"../model/index":142,"../shared/index":166,"./DataChangedEvent":58}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var DataSourceConfig = (function () {
    function DataSourceConfig(precision) {
        this.precision = precision;
    }
    return DataSourceConfig;
}());
exports.DataSourceConfig = DataSourceConfig;
},{}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * DataSourceFactory class.
 */
var index_1 = require("../core/index");
var LineBreakDataSource_1 = require("./LineBreakDataSource");
var RangeBarDataSource_1 = require("./RangeBarDataSource");
var RenkoDataSource_1 = require("./RenkoDataSource");
var HeikinAshiDataSource_1 = require("./HeikinAshiDataSource");
var DataSourceFactory = (function () {
    function DataSourceFactory() {
    }
    DataSourceFactory.CREATE = function (chartType, source, timeRange, context) {
        switch (chartType) {
            case index_1.ChartType.candle:
                return source;
            case index_1.ChartType.heikinashi:
                return new HeikinAshiDataSource_1.HeikinAshiDataSource(source, context);
            case index_1.ChartType.hollow:
                return source;
            case index_1.ChartType.line:
                return source;
            case index_1.ChartType.mountain:
                return source;
            case index_1.ChartType.ohlc:
                return source;
            case index_1.ChartType.rangebar:
                return new RangeBarDataSource_1.RangeBarDataSource(source, timeRange);
            case index_1.ChartType.renko:
                return new RenkoDataSource_1.RenkoDataSource(source, timeRange);
            case index_1.ChartType.linebreak:
                return new LineBreakDataSource_1.LineBreakDataSource(source, timeRange);
            default:
                throw new Error("Unexpected chart type=" + chartType);
        }
    };
    return DataSourceFactory;
}());
exports.DataSourceFactory = DataSourceFactory;
},{"../core/index":53,"./HeikinAshiDataSource":64,"./LineBreakDataSource":68,"./RangeBarDataSource":69,"./RenkoDataSource":70}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../shared/index");
var DataSourceRegister = (function () {
    //private static instance: DataSourceLocator;
    // public static get Instance() {
    //     return this.instance || (this.instance = new this());
    // }
    function DataSourceRegister() {
        this.sources = {};
    }
    DataSourceRegister.prototype.register = function (uid, ds) {
        this.sources[uid] = ds;
    };
    DataSourceRegister.prototype.list = function () {
        var ar = [];
        for (var _i = 0, _a = Object.keys(this.sources); _i < _a.length; _i++) {
            var id = _a[_i];
            var ds = this.sources[id];
            ar.push(new index_1.IdValue(id, ds.asset));
        }
        return ar;
    };
    DataSourceRegister.prototype.getItem = function (uid) {
        var ds = this.sources[uid];
        if (ds) {
            return ds;
        }
        else {
            throw new Error("Can not find data source with id='" + uid + "'.");
        }
    };
    return DataSourceRegister;
}());
exports.DataSourceRegister = DataSourceRegister;
},{"../shared/index":166}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var DataType = (function () {
    function DataType() {
    }
    return DataType;
}());
DataType.point = 'point';
DataType.candle = 'candle';
exports.DataType = DataType;
},{}],64:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../data/index");
var index_2 = require("../model/index");
var IndicatorDataSource_1 = require("./IndicatorDataSource");
var HeikinAshiDataSource = (function (_super) {
    __extends(HeikinAshiDataSource, _super);
    function HeikinAshiDataSource(source, context) {
        return _super.call(this, index_2.Candlestick, source, context) || this;
    }
    HeikinAshiDataSource.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        // Get source data without loading
        var iterator = this.source.getIterator();
        var move;
        move = arg ? iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; }) : iterator.moveNext();
        if (!move) {
            return; // Finish if no data
        }
        // Calculations
        // 
        var computedArray = [];
        var firstUid = iterator.current.uid;
        var lastUid;
        do {
            lastUid = iterator.current.uid;
            var computed = this.computeCandle(iterator.current, iterator.previous);
            computedArray.push(computed);
        } while (iterator.moveNext());
        // Merge
        this.dataStorage.merge(computedArray);
        // Merge new data and notify subscribers
        return new index_1.DataChangedArgument(firstUid, lastUid, computedArray.length);
    };
    HeikinAshiDataSource.prototype.computeCandle = function (current, previous) {
        var computed = new index_2.Candlestick(current.date);
        computed.uid.t = current.uid.t;
        computed.uid.n = current.uid.n;
        if (current.c !== undefined && current.o !== undefined && current.h !== undefined && current.l !== undefined
            && previous && previous.c !== undefined && previous.o !== undefined) {
            // HA-Close = (Open(0) + High(0) + Low(0) + Close(0)) / 4
            var hac = (current.o + current.h + current.l + current.c) / 4;
            computed.c = hac;
            // HA-Open = (HA-Open(-1) + HA-Close(-1)) / 2
            var hao = (previous.o + previous.c) / 2;
            computed.o = hao;
            // HA-High = Maximum of the High(0), HA-Open(0) or HA-Close(0) 
            computed.h = Math.max(current.h, hao, hac);
            // HA-Low = Minimum of the Low(0), HA-Open(0) or HA-Close(0)
            computed.l = Math.max(current.l, hao, hac);
        }
        else if (current.c !== undefined && current.o !== undefined && current.h !== undefined && current.l !== undefined) {
            computed.c = (current.o + current.h + current.l + current.c) / 4;
            computed.o = (current.o + current.c) / 2;
            computed.h = current.h;
            computed.l = current.l;
        }
        return computed;
    };
    HeikinAshiDataSource.prototype.load = function (uid, count) {
        this.source.load(uid, count);
    };
    HeikinAshiDataSource.prototype.loadRange = function (uidFirst, uidLast) {
        this.source.loadRange(uidFirst, uidLast);
    };
    HeikinAshiDataSource.prototype.lock = function (uid) {
        this.source.lock(uid);
    };
    return HeikinAshiDataSource;
}(IndicatorDataSource_1.IndicatorDataSource));
exports.HeikinAshiDataSource = HeikinAshiDataSource;
},{"../data/index":71,"../model/index":142,"./IndicatorDataSource":67}],65:[function(require,module,exports){
(function (global){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * HttpDataSource class.
 *
 * @classdesc Data source with dynamic data loading.
 */
var index_1 = require("../core/index");
var index_2 = require("../utils/index");
var ArrayDataStorage_1 = require("./ArrayDataStorage");
var DataChangedEvent_1 = require("./DataChangedEvent");
var DataSource_1 = require("./DataSource");
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);
var HttpDataSource = (function (_super) {
    __extends(HttpDataSource, _super);
    function HttpDataSource(dataType, config) {
        var _this = _super.call(this, dataType, config) || this;
        //private readonly defaultMinDate = new Date(2000, 0, 1);
        //private readonly defaultMaxItemsRequested = 100;
        _this.autoUpdatePeriodSec = 10;
        //protected borderTime: Date|undefined;
        _this.comparer = function (item1, item2) { return item1.uid.compare(item2.uid); };
        _this.isDisposed = false;
        _this.autoUpdate = function () {
            console.debug("auto update, interval=" + index_1.TimeInterval[_this.config.timeInterval]);
            // Define now and time of last candle
            var now = new Date();
            var lastT = new Date();
            lastT.setDate(lastT.getDate() - 1); // default value is now minus 1 day
            var lastItem = _this.dataStorage.last;
            if (lastItem) {
                // Last candle should be also updated
                lastT = index_2.DateUtils.substractInterval(lastItem.uid.t, _this.config.timeInterval);
            }
            // make request
            _this.makeRequest({ start: lastT, end: now }, _this.config.timeInterval);
            // schedule next autoupdate
            _this.scheduleAutoupdate();
        };
        _this.onResolved = function (response) {
            if (_this.isDisposed) {
                console.debug('Ignoring response to the disposed data source.');
                return;
            }
            if (response && response.data && response.data.length > 0) {
                var timeInterval = response.interval; //this.stringToTimeInterval(response.interval);
                if (timeInterval !== _this.config.timeInterval) {
                    // if timeinterval changed ignore response
                    console.debug("Ignoring request with wrong time interval " + timeInterval);
                    return;
                }
                // Update data
                //
                var lastBefore = _this.dataStorage.last !== undefined ? _this.dataStorage.last.uid : undefined;
                _this.merge(response.data);
                var lastAfter = _this.dataStorage.last !== undefined ? _this.dataStorage.last.uid : undefined;
                // TODO: Remove conversion
                var uidFirst = response.data[0].uid; // first (new Date(response.startDateTime));
                var uidLast = response.data[response.data.length - 1].uid; // last
                var count = response.data.length;
                var arg = new DataChangedEvent_1.DataChangedArgument(uidFirst, uidLast, count);
                arg.lastUidBefore = lastBefore;
                arg.lastUidAfter = lastAfter;
                // Update borderTime. It can only increase.
                //this.borderTime = (this.borderTime === undefined || this.borderTime < uidLast.t) ? uidLast.t : this.borderTime;
                _this.computeExtensions(arg);
                console.debug("HTTP: triggering event " + uidFirst.t.toISOString() + "-" + uidLast.t.toISOString());
                // Notify subscribers:
                _this.dateChangedEvent.trigger(arg);
            }
        };
        if (!config || (!config.url && !config.readData)) {
            throw new Error('Url and readData are not initialized.');
        }
        if (config.timeInterval === undefined) {
            throw new Error('Time interval is not set.');
        }
        _this.dataStorage = new ArrayDataStorage_1.ArrayDataStorage(_this.comparer);
        _this.config.readData = config.readData || _this.makeDefaultReader();
        _this.config.resolveData = config.resolveData || _this.makeDefaultResolver();
        _this.config.autoupdate = (config.autoupdate !== undefined) ? config.autoupdate : false;
        _this.requestManager = new HttpRequestManager(_this.config.readData, _this.config.resolveData);
        if (_this.config.autoupdate) {
            // start autoupdate
            _this.scheduleAutoupdate();
        }
        return _this;
    }
    Object.defineProperty(HttpDataSource.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    HttpDataSource.prototype.scheduleAutoupdate = function () {
        this.timer = setTimeout(this.autoUpdate, this.autoUpdatePeriodSec * 1000);
        console.debug("scheduled autoupdate, timer=" + this.timer);
    };
    HttpDataSource.prototype.getIterator = function (filter) {
        // return everything
        return this.dataStorage.getIterator(filter);
    };
    HttpDataSource.prototype.lock = function (uid) {
        // TODO: When unloading data from memory do not unload specified range.
    };
    HttpDataSource.prototype.load = function (uid, count) {
        // HttpDataSource ignores uid.n
        var dateStart = uid.t;
        var dateEnd = index_2.DateUtils.addInterval(dateStart, this.config.timeInterval, count);
        var range = (count > 0) ? { start: dateStart, end: dateEnd } : { start: dateEnd, end: dateStart };
        return this.getDataInRange(range, this.config.timeInterval);
    };
    // Both UID are inclusive.
    HttpDataSource.prototype.loadRange = function (uidFirst, uidLast) {
        var dateFirst = uidFirst.t;
        var dateLast = uidLast.t;
        var range = (dateLast > dateFirst) ? { start: dateFirst, end: dateLast } : { start: dateLast, end: dateFirst };
        return this.getDataInRange(range, this.config.timeInterval);
    };
    HttpDataSource.prototype.getDataInRange = function (range, interval) {
        this.validateDateRange(range);
        this.validateInterval(interval);
        this.makeRequest(range, interval);
    };
    HttpDataSource.prototype.setTimeInterval = function (interval) {
        // set interval and clear storage
        //
        this.config.timeInterval = interval;
        this.dataStorage.clear();
        this.requestManager.clear();
    };
    HttpDataSource.prototype.makeRequest = function (range, interval) {
        if (this.isDisposed) {
            console.debug('Ignoring request from the disposed data source.');
            return;
        }
        // Make request
        var promises = this.requestManager.makeRequest(range, this.config.timeInterval);
        var self = this;
        for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {
            var promise = promises_1[_i];
            promise
                .then(this.onResolved);
        }
    };
    HttpDataSource.prototype.makeDefaultReader = function () {
        var url = this.config.url;
        var timeIntervalToString = this.timeIntervalToString;
        return function (timeStart, timeEnd, interval) {
            var settings = {
                method: 'GET',
                dataType: 'jsonp',
                url: url,
                data: {
                    interval: timeIntervalToString(interval),
                    startDateTime: timeStart.toISOString(),
                    endDateTime: timeEnd.toISOString()
                }
            };
            return $.ajax(settings);
        };
    };
    HttpDataSource.prototype.makeDefaultResolver = function () {
        var _this = this;
        return function (response) {
            // Map incoming data to model
            //
            var objects = response.data
                .filter(function (el) { return el && el.date; })
                .map(function (el) {
                var date = new Date(el.date);
                var obj = new _this.dataType(date);
                obj.deserialize(el);
                //obj.uid = this.dateToUid(el.date);
                return obj;
            });
            return {
                data: objects,
                interval: response.interval,
                dateFrom: new Date(response.startDateTime),
                dateTo: new Date(response.endDateTime)
            };
        };
    };
    HttpDataSource.prototype.merge = function (data) {
        this.dataStorage.merge(data);
    };
    HttpDataSource.prototype.timeIntervalToString = function (interval) {
        return index_1.TimeInterval[interval];
    };
    HttpDataSource.prototype.stringToTimeInterval = function (interval) {
        return index_1.TimeInterval[interval];
    };
    HttpDataSource.prototype.dispose = function () {
        if (this.timer) {
            console.debug("dispose, timer=" + this.timer);
            clearTimeout(this.timer);
        }
        this.isDisposed = true;
    };
    return HttpDataSource;
}(DataSource_1.DataSource));
exports.HttpDataSource = HttpDataSource;
/**
 *
 */
var HttpRequestManager = (function () {
    function HttpRequestManager(reader, resolver) {
        var _this = this;
        this.total = new CompositeRange();
        this.queue = [];
        this.isRunningRequest = false;
        this.throttle = 100; // milliseconds
        this.sendRequest = function () {
            // Send first request in queue and schedule next one
            var promise = _this.queue.shift();
            if (promise) {
                _this.isRunningRequest = true;
                // start request
                if (promise.resolve) {
                    promise.resolve();
                }
                else {
                    throw new Error('Resolve function is not initialized.');
                }
                // schedule next request
                setTimeout(_this.sendRequest, _this.throttle);
            }
            else {
                _this.isRunningRequest = false;
            }
        };
        this.onSucceeded = function (response) {
            // If no errors append range
            _this.total.append({ start: response.dateFrom, end: response.dateTo });
        };
        this.onFailed = function (jqXhr, textStatus, errorThrown) {
            console.error("Request failed: " + textStatus + " " + errorThrown);
        };
        this.reader = reader;
        this.resolver = resolver;
    }
    HttpRequestManager.prototype.clear = function () {
        this.total.clear();
    };
    HttpRequestManager.prototype.makeRequest = function (range, interval, force) {
        var _this = this;
        if (force === void 0) { force = false; }
        var ranges = [range];
        if (!force) {
            // Check loaded range
            ranges = this.total.diff(range);
            if (ranges.length === 0) {
                return [];
            }
        }
        // 2. Check the queue; filter out intersections with pending requests.
        var filteredRanges = [];
        for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {
            var requestedRange = ranges_1[_i];
            var reqStartTime = requestedRange.start.getTime();
            var reqEndTime = requestedRange.end.getTime();
            // If there are pending requests, compare new request to them and exclude overlapping ranges.
            for (var _a = 0, _b = this.queue; _a < _b.length; _a++) {
                var req = _b[_a];
                var pendingStart = req.range.start.getTime();
                var pendingEnd = req.range.end.getTime();
                if (reqStartTime >= pendingStart && reqEndTime <= pendingEnd) {
                    // Pending requests includes new request. Just ignore new request.
                    return [];
                }
                else if (reqStartTime < pendingStart && reqEndTime > pendingStart && reqEndTime <= pendingEnd) {
                    reqEndTime = pendingStart; // exclude overlapping end
                }
                else if (reqEndTime > pendingEnd && reqStartTime >= pendingStart && reqStartTime < pendingEnd) {
                    reqStartTime = pendingEnd; // exclude overlapping start
                }
            }
            filteredRanges.push({ start: new Date(reqStartTime), end: new Date(reqEndTime) });
        }
        if (filteredRanges.length === 0) {
            return [];
        }
        // 3. Push requested ranges to queue
        var promises = [];
        var self = this;
        var _loop_1 = function (req) {
            var queuedPromise = new Promise(function (resolved, rejected) {
                _this.queue.push({ resolve: resolved, range: req });
            });
            var promise = new Promise(function (resolved, rejected) {
                // Add new request to collection of pending requests
                queuedPromise.then(function () {
                    var request = _this.reader(req.start, req.end, interval);
                    request
                        .then(_this.resolver)
                        .then(function (resp) { self.onSucceeded(resp); resolved(resp); })
                        .fail(function (jqXhr, textStatus, errorThrown) { self.onFailed(jqXhr, textStatus, errorThrown); rejected(errorThrown); });
                });
            });
            promises.push(promise);
        };
        for (var _c = 0, filteredRanges_1 = filteredRanges; _c < filteredRanges_1.length; _c++) {
            var req = filteredRanges_1[_c];
            _loop_1(req);
        }
        // 4. Kick off requests if they are not kicked off yet
        if (!this.isRunningRequest) {
            this.sendRequest();
        }
        return promises;
    };
    return HttpRequestManager;
}());
exports.HttpRequestManager = HttpRequestManager;
var Node = (function () {
    function Node(data, start, prev, next) {
        this.data = data;
        this.start = start;
        this.prev = prev;
        this.next = next;
    }
    return Node;
}());
var CompositeRange = (function () {
    function CompositeRange() {
        this.start = new Node(new Date(1900, 0), false);
    }
    /**
     * Appends specified range.
     * @param range
     */
    CompositeRange.prototype.append = function (range) {
        var S = range.start.getTime();
        var E = range.end.getTime();
        var prev = undefined;
        var cur = this.start;
        // 1. Insert range.start
        //
        var handledS = false;
        while (cur.next) {
            prev = cur;
            cur = cur.next;
            if (cur.start) {
                var Rs = cur.data.getTime();
                if (S < Rs) {
                    // Insert S, move to next point, go to insert E
                    var node = new Node(new Date(S), true, prev, cur);
                    prev.next = node;
                    cur.prev = node;
                    cur = node;
                    // prev = node;    // go to next
                    // cur = node.next;
                    handledS = true;
                    break;
                }
                else if (S === Rs) {
                    // Do not insert S, move to next point go to insert E
                    // prev = cur;    // go to next
                    // cur = cur.next;
                    handledS = true;
                    break;
                }
                else {
                    continue;
                }
            }
            else {
                var Re = cur.data.getTime();
                if (S < Re) {
                    // Do not insert anything, go to insert E
                    cur = prev; // step back
                    // prev = cur;    // go to next
                    // cur = cur.next;
                    handledS = true;
                    break;
                }
                else if (S === Re) {
                    // Remove Re, go to insert E, stay on current point
                    prev.next = cur.next;
                    if (cur.next) {
                        cur.next.prev = prev;
                    }
                    cur = prev;
                    handledS = true;
                    break;
                }
                else {
                    continue;
                }
            }
        }
        // 2. Insert range.end
        //
        var handledE = false;
        while (cur.next) {
            prev = cur;
            cur = cur.next;
            if (cur.start) {
                var Rs = cur.data.getTime();
                if (E < Rs) {
                    // Insert E, finish
                    var node = new Node(new Date(E), false, prev, cur);
                    prev.next = node;
                    cur.prev = node;
                    handledE = true;
                    break;
                }
                else if (E === Rs) {
                    // Remove Rs and finish
                    prev.next = cur.next;
                    if (cur.next) {
                        cur.next.prev = prev;
                    }
                    handledE = true;
                    break;
                }
                else {
                    // Remove Rs and continue
                    prev.next = cur.next;
                    if (cur.next) {
                        cur.next.prev = prev;
                    }
                    cur = prev;
                }
            }
            else {
                var Re = cur.data.getTime();
                if (E <= Re) {
                    // Do nothing, finish
                    handledE = true;
                    break;
                }
                else {
                    // Remove Re and continue
                    prev.next = cur.next;
                    if (cur.next) {
                        cur.next.prev = prev;
                    }
                    cur = prev;
                    // if (cur.next === undefined) {
                    //     insert E;
                    // }
                    // handledE = false;
                }
            }
        }
        // Case 1: If no ranges yet  => insert S and E
        // Case 2: S > all     => insert S and E
        // Case 3: E > last    => insert E
        if (!handledS) {
            // insert S
            var node = new Node(new Date(S), true, cur, cur.next);
            cur.next = node;
            if (cur.next) {
                cur.next.prev = node;
            }
            cur = node;
        }
        if (!handledE) {
            // insert E
            var node = new Node(new Date(E), false, cur, cur.next);
            cur.next = node;
            if (cur.next) {
                cur.next.prev = node;
            }
        }
    };
    CompositeRange.prototype.clear = function () {
        this.start.next = undefined;
    };
    /**
     * Checks if the specified range intersects composite range.
     * Returns difference.
     * @param range
     */
    CompositeRange.prototype.diff = function (range) {
        var ranges = [];
        var curRange;
        var mode = true; // start, end
        var S = range.start.getTime();
        var E = range.end.getTime();
        var prev = this.start;
        var cur = this.start;
        var finished = false;
        while (cur.next) {
            prev = cur;
            cur = cur.next;
            if (mode === true) {
                if (cur.start) {
                    var Rs = cur.data.getTime();
                    if (S < Rs) {
                        // Create new range, go to end mode
                        curRange = new Range(new Date(S), new Date(S));
                        mode = false; // end mode
                        cur = prev; // go back one step
                        continue;
                    }
                    else if (S > Rs) {
                        continue;
                    }
                    else {
                        if (cur.next) {
                            var Re = cur.next.data.getTime();
                            if (E <= Re) {
                                // Return what's there
                                finished = true;
                                break;
                            }
                            else {
                                // S = next Re, continue
                                S = Re;
                                continue;
                            }
                        }
                        else {
                            throw new Error('End time is not found');
                        }
                    }
                }
                else {
                    var Re = cur.data.getTime();
                    if (S < Re) {
                        S = Re;
                        if (E < S) {
                            finished = true;
                        }
                        curRange = new Range(new Date(S), new Date(S));
                        mode = false;
                        continue;
                    }
                    else if (S >= Re) {
                        // Skip
                        continue;
                    }
                }
            }
            else {
                if (cur.start) {
                    var Rs = cur.data.getTime();
                    if (E <= Rs) {
                        if (curRange) {
                            curRange.end = new Date(E);
                            ranges.push(curRange);
                        }
                        else {
                            throw new Error('Range is not created');
                        }
                        finished = true;
                        break;
                    }
                    else {
                        if (curRange) {
                            curRange.end = new Date(Rs);
                            ranges.push(curRange);
                        }
                        else {
                            throw new Error('Range is not created');
                        }
                        S = Rs;
                        mode = true; // start mode
                        cur = prev; // go back one step
                        continue;
                    }
                }
                else {
                    var Re = cur.data.getTime();
                    throw new Error('Unexpected condition.');
                }
            }
        }
        if (!finished) {
            ranges.push({ start: new Date(S), end: new Date(E) });
        }
        return ranges;
    };
    return CompositeRange;
}());
exports.CompositeRange = CompositeRange;
var Range = (function () {
    function Range(start, end) {
        this.start = start;
        this.end = end;
    }
    return Range;
}());
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../core/index":53,"../utils/index":175,"./ArrayDataStorage":55,"./DataChangedEvent":58,"./DataSource":59}],66:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DataSourceConfig_1 = require("./DataSourceConfig");
var HttpDataSourceConfig = (function (_super) {
    __extends(HttpDataSourceConfig, _super);
    function HttpDataSourceConfig(url, timeInterval, readData, resolveData, precision, autoupdate) {
        if (autoupdate === void 0) { autoupdate = false; }
        var _this = _super.call(this, precision) || this;
        _this.url = url;
        _this.timeInterval = timeInterval;
        _this.readData = readData;
        _this.resolveData = resolveData;
        _this.precision = precision;
        _this.autoupdate = autoupdate;
        return _this;
    }
    return HttpDataSourceConfig;
}(DataSourceConfig_1.DataSourceConfig));
exports.HttpDataSourceConfig = HttpDataSourceConfig;
},{"./DataSourceConfig":60}],67:[function(require,module,exports){
/**
 * IndicatorDataSource class.
 */
// import {
//     //ArrayDataStorage,
//     ArrayIterator,
//     DataChangedArgument,
//     DataSource,
//     DataSourceConfig,
//     IContext,
//     IDataIterator,
//     IDataSource } from '../data/index';
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ArrayDataStorage_1 = require("./ArrayDataStorage");
var DataSource_1 = require("./DataSource");
var DataSourceConfig_1 = require("./DataSourceConfig");
/**
 * 1-to-1 mapping with source.
 * uid the same as in source.
 */
var IndicatorDataSource = (function (_super) {
    __extends(IndicatorDataSource, _super);
    function IndicatorDataSource(dataType, source, context, comparer) {
        var _this = _super.call(this, dataType, new DataSourceConfig_1.DataSourceConfig(source.precision)) || this;
        _this.isInitialized = false;
        _this.defaultComparer = function (lhs, rhs) { return lhs.uid.compare(rhs.uid); };
        _this.triggerDataChanged = function (arg) {
            _this.dateChangedEvent.trigger(arg);
        };
        _this.onDataSourceChanged = function (arg) {
            var generatedArg = _this.compute(arg);
            if (generatedArg) {
                _this.triggerDataChanged(generatedArg);
            }
        };
        _this.dataStorage = new ArrayDataStorage_1.ArrayDataStorage(comparer || _this.defaultComparer);
        _this.source = source;
        _this.source.dataChanged.on(_this.onDataSourceChanged);
        _this.addInterval = context.addInterval; // should be initialized before computing
        _this.context = context;
        return _this;
    }
    IndicatorDataSource.prototype.getIterator = function (filter) {
        if (!this.isInitialized) {
            this.compute();
            this.isInitialized = true;
        }
        return this.dataStorage.getIterator(filter);
    };
    IndicatorDataSource.prototype.dispose = function () {
        this.source.dataChanged.off(this.onDataSourceChanged);
    };
    IndicatorDataSource.prototype.load = function (uid, count) { };
    IndicatorDataSource.prototype.loadRange = function (uidFirst, uidLast) { };
    IndicatorDataSource.prototype.lock = function (uid) { };
    /**
     * Returns last values from source
     */
    IndicatorDataSource.getPreviousValues = function (iterator, N, arg, accessor) {
        if (!iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
            throw new Error('Source does not contain updated data');
        }
        var array = [];
        iterator.somebackward(function (item, counter) {
            if (counter > N) {
                return false;
            }
            if (counter > 0) {
                var val = accessor(item);
                if (val !== undefined) {
                    array.push(val);
                }
                return true;
            }
            return true; // Skip current item
        });
        array.reverse();
        return array;
    };
    IndicatorDataSource.getPreviousItems = function (iterator, N) {
        var array = [];
        iterator.somebackward(function (item, counter) {
            if (counter > N) {
                return false;
            }
            if (counter > 0) {
                array.push(item);
                return true;
            }
            return true; // Skip current item
        });
        array.reverse();
        return array;
    };
    return IndicatorDataSource;
}(DataSource_1.DataSource));
exports.IndicatorDataSource = IndicatorDataSource;
},{"./ArrayDataStorage":55,"./DataSource":59,"./DataSourceConfig":60}],68:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var ComputedDataSource_1 = require("./ComputedDataSource");
var DataChangedEvent_1 = require("./DataChangedEvent");
var LineBreakDataSource = (function (_super) {
    __extends(LineBreakDataSource, _super);
    function LineBreakDataSource(source, timeRange) {
        var _this = _super.call(this, source) || this;
        _this.settings = new LineBreakSettings();
        _this.timeRange = timeRange;
        // Compute initial data set
        _this.compute();
        return _this;
    }
    LineBreakDataSource.prototype.compute = function (arg) {
        var computedData = [];
        if (arg) {
            // Keep all uid that less than arg, and remove all that 
            var time_1 = arg.uidFirst.t.getTime();
            this.dataStorage.removeAfterInclusive(function (c) { return c.uid.t.getTime() >= time_1; });
            // Find 2 or 3 last computed item.
            var iter = this.dataStorage.getIterator();
            if (iter.goToLast()) {
                computedData.push(iter.current);
                if (iter.movePrev()) {
                    computedData.push(iter.current);
                }
                if (this.settings.breakType === BreakType.LineBreak3 && iter.movePrev()) {
                    computedData.push(iter.current);
                }
                // invert array
                computedData.reverse();
            }
            var res = this.sourceIterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
            if (!res) {
                return;
            }
        }
        else {
            // Remove everything and recompute
            this.dataStorage.clear();
            var res = this.sourceIterator.goTo(function (item) { return true; }); // go to first element
            if (!res) {
                return;
            }
        }
        do {
            this.computeOne(computedData, this.sourceIterator.current);
        } while (this.sourceIterator.moveNext());
        // Merge new data and notify subscribers
        if (computedData.length > 0) {
            this.dataStorage.merge(computedData);
            return new DataChangedEvent_1.DataChangedArgument(computedData[0].uid, computedData[computedData.length - 1].uid, computedData.length);
        }
    };
    LineBreakDataSource.prototype.computeOne = function (computedArray, source) {
        var last = computedArray.length > 0 ? computedArray[computedArray.length - 1] : undefined;
        // TODO: replace with "isEmpty" function:
        if (!source.o || !source.c || !source.h || !source.l) {
            return;
        }
        var computed;
        if (last === undefined) {
            // Generate first item, just copying first candlestick
            computed = new index_2.Candlestick(source.date, source.c, source.o, source.h, source.l);
            computedArray.push(computed);
        }
        else {
            if (!last.c || !last.o) {
                throw new Error('Value of computed candle is undefined.');
            }
            var lastSign = last.c - last.o; // -1 down / +1 up / 0 can go both way
            var reverseValues = this.computeReverseValue(computedArray, this.settings.breakType === BreakType.LineBreak2 ? 2 : 3);
            if ((lastSign >= 0 && (source.c > last.c || source.c < reverseValues.start))
                || (lastSign <= 0 && (source.c < last.c || source.c > reverseValues.end))) {
                computed = new index_2.Candlestick(source.date, source.c, last.c, Math.max(last.c, source.c), Math.min(last.c, source.c));
                computedArray.push(computed);
            }
        }
    };
    LineBreakDataSource.prototype.computeReverseValue = function (lines, count) {
        if (lines.length === 0) {
            throw new Error('Array is empty.');
        }
        var min = Number.MAX_VALUE;
        var max = Number.MIN_VALUE;
        for (var i = lines.length - 1; i >= lines.length - count && i >= 0; i -= 1) {
            var c = lines[i].c;
            var o = lines[i].o;
            if (c > max) {
                max = c;
            }
            if (o > max) {
                max = o;
            }
            if (c < min) {
                min = c;
            }
            if (o < min) {
                min = o;
            }
        }
        return { start: min, end: max };
    };
    LineBreakDataSource.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('breakType', new index_1.SettingSet({
            name: 'breakType',
            displayName: 'Box',
            value: this.settings.breakType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: BreakType.LineBreak2.toString(), text: '2-Line Break' },
                { value: BreakType.LineBreak3.toString(), text: '3-Line Break' }
            ]
        }));
        return group;
    };
    LineBreakDataSource.prototype.setSettings = function (value) {
        var breakType = value.getSetting('datasource.breakType');
        this.settings.breakType = (breakType && breakType.value) ? parseInt(breakType.value, 10) : this.settings.breakType;
        // recompute
        this.compute();
    };
    return LineBreakDataSource;
}(ComputedDataSource_1.ComputedDataSource));
exports.LineBreakDataSource = LineBreakDataSource;
var BreakType;
(function (BreakType) {
    BreakType[BreakType["LineBreak2"] = 2] = "LineBreak2";
    BreakType[BreakType["LineBreak3"] = 3] = "LineBreak3";
})(BreakType || (BreakType = {}));
var LineBreakSettings = (function () {
    function LineBreakSettings() {
        this.breakType = BreakType.LineBreak2;
    }
    return LineBreakSettings;
}());
},{"../core/index":53,"../model/index":142,"./ComputedDataSource":57,"./DataChangedEvent":58}],69:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * RangeBarDataSource class
 */
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var ComputedDataSource_1 = require("./ComputedDataSource");
var DataChangedEvent_1 = require("./DataChangedEvent");
var RangeBarDataSource = (function (_super) {
    __extends(RangeBarDataSource, _super);
    function RangeBarDataSource(source, timeRange) {
        var _this = _super.call(this, source) || this;
        _this.settings = new RangeBarSettings();
        _this.timeRange = timeRange;
        // Renco requires ATR to define optimal box size
        _this.source.addExtension(index_1.AvgTrueRangeExtension.uname, new index_1.AvgTrueRangeExtension());
        // Compute initial data set
        _this.compute();
        return _this;
    }
    RangeBarDataSource.prototype.compute = function (arg) {
        // Get ATR from last item in the time range. This will be box size.
        var range = this.settings.range;
        if (this.settings.mode === Mode.ATR && this.timeRange) {
            var endTime_1 = this.timeRange.end.getTime();
            // Find first element that is greater than time range and move back
            if (this.sourceIterator.goTo(function (item) { return item.uid.t.getTime() > endTime_1; })
                && this.sourceIterator.movePrev()
                && this.sourceIterator.current.ext['atr']) {
                range = this.sourceIterator.current.ext['atr'];
            }
            else if (this.sourceIterator.last
                && this.sourceIterator.last.ext['atr']) {
                range = this.sourceIterator.last.ext['atr'];
            }
        }
        console.log("ATR=" + range);
        var computedData = [];
        if (arg) {
            // Keep all uid that less than arg, and remove all that 
            var time_1 = arg.uidFirst.t.getTime();
            this.dataStorage.removeAfterInclusive(function (c) { return c.uid.t.getTime() >= time_1; });
            // Find last computed item
            if (this.dataStorage.last) {
                computedData.push(this.dataStorage.last);
            }
            var res = this.sourceIterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
            if (!res) {
                return;
            }
        }
        else {
            // Remove everything and recompute
            this.dataStorage.clear();
            var res = this.sourceIterator.goTo(function (item) { return true; }); // go to first element
            if (!res) {
                return;
            }
        }
        do {
            this.computeOne(computedData, this.sourceIterator.current, range);
        } while (this.sourceIterator.moveNext());
        // Merge new data and notify subscribers
        if (computedData.length > 0) {
            this.dataStorage.merge(computedData);
            return new DataChangedEvent_1.DataChangedArgument(computedData[0].uid, computedData[computedData.length - 1].uid, computedData.length);
        }
    };
    RangeBarDataSource.prototype.computeOne = function (computedArray, source, range) {
        var last = computedArray.length > 0 ? computedArray[computedArray.length - 1] : undefined;
        // TODO: replace with "isEmpty" function:
        if (!source.o || !source.c || !source.h || !source.l) {
            return;
        }
        var C = source.c;
        if (last === undefined) {
            // Build a new range
            var computed = new index_3.Candlestick(source.date);
            computed.o = source.c;
            computed.h = source.c;
            computed.l = source.c;
            // Close is undefined as the range is not built yet
            computedArray.push(computed);
        }
        else {
            if (last.h === undefined || last.o === undefined || last.l === undefined) {
                throw new Error('Value of computed candle is undefined.');
            }
            var counter = 0;
            //  while can build a new range
            while (last.h !== undefined && last.l !== undefined && (C < (last.h - range) || C > (last.l + range))) {
                // Close previous
                if (C < last.h - range) {
                    last.l = last.h - range;
                    last.c = last.h - range;
                }
                else if (C > last.l + range) {
                    last.h = last.l + range;
                    last.c = last.l + range;
                }
                // update time of previous
                last.uid.t = source.date;
                last.uid.n = counter;
                counter += 1;
                // Start new range
                var computed = new index_3.Candlestick(source.date);
                //computed.uid.n = counter;
                computed.o = last.c;
                computed.h = last.c;
                computed.l = last.c;
                computedArray.push(computed);
                last = computed;
                //counter += 1;
            }
            // Just update H / L
            last.uid.t = source.date;
            last.uid.n = counter;
            last.h = Math.max(last.h !== undefined ? last.h : -Infinity, C);
            last.l = Math.min(last.l !== undefined ? last.l : Infinity, C);
        }
    };
    RangeBarDataSource.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('mode', new index_2.SettingSet({
            name: 'mode',
            displayName: 'Mode',
            value: this.settings.mode.toString(),
            settingType: index_2.SettingType.select,
            options: [
                { value: Mode.Fixed.toString(), text: 'Fixed' },
                { value: Mode.ATR.toString(), text: 'ATR' }
            ]
        }));
        group.setSetting('range', new index_2.SettingSet({
            name: 'range',
            displayName: 'Range',
            value: this.settings.range.toString(),
            settingType: index_2.SettingType.numeric,
            visible: this.settings.mode === Mode.Fixed
        }));
        return group;
    };
    RangeBarDataSource.prototype.setSettings = function (value) {
        var mode = value.getSetting('datasource.mode');
        this.settings.mode = (mode && mode.value) ? parseInt(mode.value, 10) : this.settings.mode;
        var range = value.getSetting('datasource.range');
        this.settings.range = (range && range.value) ? parseInt(range.value, 10) : this.settings.range;
        // recompute
        this.compute();
    };
    return RangeBarDataSource;
}(ComputedDataSource_1.ComputedDataSource));
exports.RangeBarDataSource = RangeBarDataSource;
var Mode;
(function (Mode) {
    Mode[Mode["Fixed"] = 1] = "Fixed";
    Mode[Mode["ATR"] = 2] = "ATR";
})(Mode || (Mode = {}));
var RangeBarSettings = (function () {
    function RangeBarSettings() {
        this.mode = Mode.Fixed;
        this.range = 10;
    }
    return RangeBarSettings;
}());
},{"../compute/index":40,"../core/index":53,"../model/index":142,"./ComputedDataSource":57,"./DataChangedEvent":58}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var ComputedDataSource_1 = require("./ComputedDataSource");
var DataChangedEvent_1 = require("./DataChangedEvent");
var RenkoCandle = (function (_super) {
    __extends(RenkoCandle, _super);
    function RenkoCandle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.visible = true;
        return _this;
    }
    return RenkoCandle;
}(index_3.Candlestick));
exports.RenkoCandle = RenkoCandle;
var RenkoDataSource = (function (_super) {
    __extends(RenkoDataSource, _super);
    function RenkoDataSource(source, timeRange) {
        var _this = _super.call(this, source) || this;
        _this.settings = new RencoSettings();
        _this.timeRange = timeRange;
        // Renco requires ATR to define optimal box size
        _this.source.addExtension(index_1.AvgTrueRangeExtension.uname, new index_1.AvgTrueRangeExtension());
        // Compute initial data set
        _this.compute();
        return _this;
    }
    RenkoDataSource.prototype.compute = function (arg) {
        // Get ATR from last item in the time range. This will be box size.
        var boxSize = this.settings.boxSize;
        if (this.settings.boxType === BoxType.ATR && this.timeRange) {
            var endTime_1 = this.timeRange.end.getTime();
            // Find first element that is greater than time range and move back
            if (this.sourceIterator.goTo(function (item) { return item.uid.t.getTime() > endTime_1; })
                && this.sourceIterator.movePrev()
                && this.sourceIterator.current.ext['atr']) {
                boxSize = this.sourceIterator.current.ext['atr'];
            }
            else if (this.sourceIterator.last
                && this.sourceIterator.last.ext['atr']) {
                boxSize = this.sourceIterator.last.ext['atr'];
            }
        }
        console.log("ATR=" + boxSize);
        var computedData = [];
        if (arg) {
            // Keep all uid that less than arg, and remove all that 
            var time_1 = arg.uidFirst.t.getTime();
            this.dataStorage.removeAfterInclusive(function (c) { return c.uid.t.getTime() >= time_1; });
            // Find last computed item
            //const last = this.storage.findLast(c => c.uid < first_suid);
            if (this.dataStorage.last) {
                computedData.push(this.dataStorage.last);
            }
            var res = this.sourceIterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
            if (!res) {
                return;
            }
        }
        else {
            // Remove everything and recompute
            this.dataStorage.clear();
            var res = this.sourceIterator.goTo(function (item) { return true; }); // go to first element
            if (!res) {
                return;
            }
        }
        do {
            this.computeOne(computedData, this.sourceIterator.current, boxSize);
        } while (this.sourceIterator.moveNext());
        // Merge new data and notify subscribers
        if (computedData.length > 0) {
            this.dataStorage.merge(computedData);
            return new DataChangedEvent_1.DataChangedArgument(computedData[0].uid, computedData[computedData.length - 1].uid, computedData.length);
        }
    };
    RenkoDataSource.prototype.computeOne = function (computedArray, source, box) {
        // ! if no close price, then ignore item
        // At least one candle should be generated, even 
        // if (source === undefined) {
        //     throw new Error('"source" argument is undefined.');
        // }
        var last = computedArray.length > 0 ? computedArray[computedArray.length - 1] : undefined;
        // TODO: replace with "isEmpty" function:
        if (!source.o || !source.c || !source.h || !source.l) {
            return;
        }
        var computed;
        // Generate first item
        if (last === undefined) {
            computed = new RenkoCandle(source.date, source.c, source.o, source.h, source.l);
            computed.visible = false;
            computedArray.push(computed);
        }
        else {
            if (last.c === undefined || last.h === undefined || last.o === undefined || last.l === undefined) {
                throw new Error('Value of computed candle is undefined.');
            }
            var diff = source.c - last.c;
            var change_dir = false;
            if (last.c < last.o && diff > 0) {
                change_dir = true;
            }
            else if (last.c > last.o && diff < 0) {
                change_dir = true;
            }
            var counter = 0;
            while ((!change_dir && Math.abs(diff) >= box) || (change_dir && Math.abs(diff) >= 2 * box)) {
                var addbox = (change_dir && counter === 0) ? 2 * box : box;
                diff = diff + (diff > 0 ? (-addbox) : addbox);
                if (last.visible === false) {
                    last.uid.t = source.uid.t;
                    last.uid.n = counter;
                    last.c = last.c + (diff > 0 ? addbox : (-addbox));
                    last.o = last.c + (diff > 0 ? (-box) : box); // depends on close
                    last.h = Math.max(last.o, last.c); // depends on open, close
                    last.l = Math.min(last.o, last.c); // depends on open, close
                    last.visible = true;
                }
                else {
                    computed = new RenkoCandle(source.date);
                    computed.uid.t = source.uid.t;
                    computed.uid.n = counter;
                    computed.c = last.c + (diff > 0 ? addbox : (-addbox));
                    computed.o = computed.c + (diff > 0 ? (-box) : box); // depends on close
                    computed.h = Math.max(computed.o, computed.c); // depends on open, close
                    computed.l = Math.min(computed.o, computed.c); // depends on open, close
                    computed.visible = true;
                    computedArray.push(computed);
                    last = computed;
                }
                counter += 1;
            }
        }
    };
    RenkoDataSource.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('boxType', new index_2.SettingSet({
            name: 'boxType',
            displayName: 'Box',
            value: this.settings.boxType.toString(),
            settingType: index_2.SettingType.select,
            options: [
                { value: BoxType.Fixed.toString(), text: 'Fixed' },
                { value: BoxType.ATR.toString(), text: 'ATR' }
            ]
        }));
        group.setSetting('boxSize', new index_2.SettingSet({
            name: 'boxSize',
            displayName: 'Box size',
            value: this.settings.boxSize.toString(),
            settingType: index_2.SettingType.numeric,
            visible: this.settings.boxType === BoxType.Fixed
        }));
        return group;
    };
    RenkoDataSource.prototype.setSettings = function (value) {
        var boxType = value.getSetting('datasource.boxType');
        this.settings.boxType = (boxType && boxType.value) ? parseInt(boxType.value, 10) : this.settings.boxType;
        var boxSize = value.getSetting('datasource.boxSize');
        this.settings.boxSize = (boxSize && boxSize.value) ? parseInt(boxSize.value, 10) : this.settings.boxSize;
        // recompute
        this.compute();
    };
    return RenkoDataSource;
}(ComputedDataSource_1.ComputedDataSource));
exports.RenkoDataSource = RenkoDataSource;
var BoxType;
(function (BoxType) {
    BoxType[BoxType["Fixed"] = 1] = "Fixed";
    BoxType[BoxType["ATR"] = 2] = "ATR";
})(BoxType || (BoxType = {}));
var RencoSettings = (function () {
    function RencoSettings() {
        //public period: number = 20;
        this.boxType = BoxType.Fixed;
        this.boxSize = 10;
    }
    return RencoSettings;
}());
},{"../compute/index":40,"../core/index":53,"../model/index":142,"./ComputedDataSource":57,"./DataChangedEvent":58}],71:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var ArrayDataSource_1 = require("./ArrayDataSource");
exports.ArrayDataSource = ArrayDataSource_1.ArrayDataSource;
var ArrayDataStorage_1 = require("./ArrayDataStorage");
exports.ArrayDataStorage = ArrayDataStorage_1.ArrayDataStorage;
var ArrayIterator_1 = require("./ArrayIterator");
exports.ArrayIterator = ArrayIterator_1.ArrayIterator;
var DataChangedEvent_1 = require("./DataChangedEvent");
exports.DataChangedArgument = DataChangedEvent_1.DataChangedArgument;
exports.DataChangedEvent = DataChangedEvent_1.DataChangedEvent;
var DataSource_1 = require("./DataSource");
exports.DataSource = DataSource_1.DataSource;
var DataSourceConfig_1 = require("./DataSourceConfig");
exports.DataSourceConfig = DataSourceConfig_1.DataSourceConfig;
var DataSourceFactory_1 = require("./DataSourceFactory");
exports.DataSourceFactory = DataSourceFactory_1.DataSourceFactory;
var DataSourceRegister_1 = require("./DataSourceRegister");
exports.DataSourceRegister = DataSourceRegister_1.DataSourceRegister;
var DataType_1 = require("./DataType");
exports.DataType = DataType_1.DataType;
var HttpDataSource_1 = require("./HttpDataSource");
exports.CompositeRange = HttpDataSource_1.CompositeRange;
exports.HttpDataSource = HttpDataSource_1.HttpDataSource;
var HeikinAshiDataSource_1 = require("./HeikinAshiDataSource");
exports.HeikinAshiDataSource = HeikinAshiDataSource_1.HeikinAshiDataSource;
var HttpDataSourceConfig_1 = require("./HttpDataSourceConfig");
exports.HttpDataSourceConfig = HttpDataSourceConfig_1.HttpDataSourceConfig;
var IndicatorDataSource_1 = require("./IndicatorDataSource");
exports.IndicatorDataSource = IndicatorDataSource_1.IndicatorDataSource;
},{"./ArrayDataSource":54,"./ArrayDataStorage":55,"./ArrayIterator":56,"./DataChangedEvent":58,"./DataSource":59,"./DataSourceConfig":60,"./DataSourceFactory":61,"./DataSourceRegister":62,"./DataType":63,"./HeikinAshiDataSource":64,"./HttpDataSource":65,"./HttpDataSourceConfig":66,"./IndicatorDataSource":67}],72:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing curve.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var CurveFigureComponent = (function (_super) {
    __extends(CurveFigureComponent, _super);
    function CurveFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Curve', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new CurveSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v)
                };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('c'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        return _this;
    }
    Object.defineProperty(CurveFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CurveFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CurveFigureComponent.prototype, "pointC", {
        get: function () {
            return this.pc.point;
        },
        set: function (value) {
            this.pc.point = value;
        },
        enumerable: true,
        configurable: true
    });
    CurveFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        return (a && b && c) ? index_5.DrawUtils.IS_POINT_ON_QUADCURVE(p, a, b, c, 5) : false;
    };
    CurveFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    CurveFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        var c = this.pc.shift(dx, dy);
        return a || b || c;
    };
    CurveFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        if (a && b && c) {
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.moveTo(a.x, a.y);
            canvas.quadraticCurveTo(b.x, b.y, c.x, c.y);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    CurveFigureComponent.prototype.getEditState = function () {
        return EditCurveState.instance;
    };
    CurveFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    CurveFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return CurveFigureComponent;
}(index_1.FigureComponent));
exports.CurveFigureComponent = CurveFigureComponent;
var CurveSettings = (function () {
    function CurveSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return CurveSettings;
}());
exports.CurveSettings = CurveSettings;
var DrawCurveState = (function (_super) {
    __extends(DrawCurveState, _super);
    function DrawCurveState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawCurveState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawCurveState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawCurveState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawCurveState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.curve);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
            this.figure.pointC = { uid: coordX, v: coordY };
            this.firstXY = this.stack.toXY({ uid: coordX, v: coordY });
        }
        else if (this.count === 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawCurveState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (coordX && coordY) {
            if (this.count === 2) {
                this.figure.pointC = { uid: coordX, v: coordY };
                // recompute B
                var a = this.stack.toXY({ uid: coordX, v: coordY });
                if (a && this.firstXY) {
                    var mid = index_5.DrawUtils.MID(a, this.firstXY);
                    this.figure.pointB = this.stack.xyToValue(mid);
                }
            }
        }
    };
    DrawCurveState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawCurveState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawCurveState = DrawCurveState;
var EditCurveState = (function () {
    function EditCurveState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditCurveState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditCurveState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditCurveState.prototype.onMouseWheel = function (board, mouse) { };
    EditCurveState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditCurveState.prototype.onMouseEnter = function (board, mouse) { };
    EditCurveState.prototype.onMouseLeave = function (board, mouse) { };
    EditCurveState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditCurveState.prototype.onMouseDown = function (board, mouse) { };
    EditCurveState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditCurveState.prototype.deactivate = function (board, mouse) { };
    EditCurveState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditCurveState;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing date ranges.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var DateRangeFigureComponent = (function (_super) {
    __extends(DateRangeFigureComponent, _super);
    function DateRangeFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Date Range', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new DateRangeSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(DateRangeFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateRangeFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (v) {
            this.pb.point = v;
        },
        enumerable: true,
        configurable: true
    });
    DateRangeFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var c = new index_3.Point(a.x, b.y);
            var d = new index_3.Point(b.x, a.y);
            var arrow1 = index_4.DrawUtils.MID(a, c);
            var arrow2 = index_4.DrawUtils.MID(b, d);
            return index_4.DrawUtils.IS_POINT_ON_LINE(p, a, c, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, c, b, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, b, d, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, a, d, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, arrow1, arrow2, 5);
        }
        return false;
    };
    DateRangeFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    DateRangeFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    DateRangeFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var c = new index_3.Point(a.x, b.y);
            var d = new index_3.Point(b.x, a.y);
            var arrow1 = index_4.DrawUtils.MID(a, c);
            var arrow2 = index_4.DrawUtils.MID(b, d);
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.setFillStyle('rgba(190, 230, 255, 0.3)');
            canvas.fillRect(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.abs(b.x - a.x), Math.abs(b.y - a.y));
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(c.x, c.y);
            canvas.moveTo(d.x, d.y);
            canvas.lineTo(b.x, b.y);
            canvas.moveTo(arrow1.x, arrow1.y);
            canvas.lineTo(arrow2.x, arrow2.y);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    DateRangeFigureComponent.prototype.getEditState = function () {
        return EditDateRangeState.instance;
    };
    DateRangeFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    DateRangeFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return DateRangeFigureComponent;
}(index_1.FigureComponent));
exports.DateRangeFigureComponent = DateRangeFigureComponent;
var DateRangeSettings = (function () {
    function DateRangeSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return DateRangeSettings;
}());
exports.DateRangeSettings = DateRangeSettings;
var DrawDateRangeState = (function (_super) {
    __extends(DrawDateRangeState, _super);
    function DrawDateRangeState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawDateRangeState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawDateRangeState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawDateRangeState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawDateRangeState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.daterange);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawDateRangeState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawDateRangeState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawDateRangeState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawDateRangeState = DrawDateRangeState;
var EditDateRangeState = (function () {
    function EditDateRangeState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditDateRangeState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditDateRangeState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditDateRangeState.prototype.onMouseWheel = function (board, mouse) { };
    EditDateRangeState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditDateRangeState.prototype.onMouseEnter = function (board, mouse) { };
    EditDateRangeState.prototype.onMouseLeave = function (board, mouse) { };
    EditDateRangeState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditDateRangeState.prototype.onMouseDown = function (board, mouse) { };
    EditDateRangeState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditDateRangeState.prototype.deactivate = function (board, mouse) { };
    EditDateRangeState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditDateRangeState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],74:[function(require,module,exports){
/**
 * Classes for drawing ellipses.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var EllipseFigureComponent = (function (_super) {
    __extends(EllipseFigureComponent, _super);
    function EllipseFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Ellipse', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new EllipseSettings();
        _this.r1 = 0;
        //private r2: number = 0;
        _this.angle = 0;
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined && _this.pd.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid, _this.pd.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid, _this.pd.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined && _this.pd.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v, _this.pd.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v, _this.pd.point.v)
                };
            }
        };
        _this.onPointChanged = function () {
            _this.updatePoints();
        };
        _this.onP3changed = function () {
            var updRadius = _this.computeRadius(_this.pc.pixel);
            _this.store.radiusB = updRadius || _this.store.radiusB;
            _this.updatePoints();
        };
        _this.onP4changed = function () {
            var updRadius = _this.computeRadius(_this.pd.pixel);
            _this.store.radiusB = updRadius || _this.store.radiusB;
            _this.updatePoints();
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, undefined, true);
        _this.pd = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, undefined, true);
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        _this.addChild(_this.pd);
        _this.store = new EllipseStore(container);
        // recompute points after loading figure
        _this.updatePoints();
        _this.subscribe();
        return _this;
    }
    Object.defineProperty(EllipseFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EllipseFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EllipseFigureComponent.prototype, "radiusB", {
        get: function () {
            return this.store.radiusB;
        },
        set: function (value) {
            this.store.radiusB = value;
            this.updatePoints();
        },
        enumerable: true,
        configurable: true
    });
    EllipseFigureComponent.prototype.isHit = function (p) {
        var point = p;
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var angle = index_5.DrawUtils.ANGLE(a, b);
            var mid = index_5.DrawUtils.MID(a, b);
            var r1 = index_5.DrawUtils.DIST(a, b) / 2;
            var r2 = this.store.radiusB;
            // transfer to (0,0)
            point = { x: p.x - mid.x, y: p.y - mid.y };
            // rotate
            point = { x: point.x * Math.cos(angle) + point.y * Math.sin(angle),
                y: -point.x * Math.sin(angle) + point.y * Math.cos(angle) };
            var res = (r1 !== 0 && r2 !== 0)
                ? (point.x * point.x) / (r1 * r1) + (point.y * point.y) / (r2 * r2)
                : 0;
            return res > 0.7 && res < 1.3;
        }
        return false;
    };
    EllipseFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    EllipseFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        this.updatePoints();
        // const c = this.pc.shift(dx, dy);
        // const d = this.pd.shift(dx, dy);
        return a || b;
    };
    EllipseFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var r2 = this.store.radiusB;
        var canvas = this.area.frontCanvas;
        if (a && b && r2) {
            // update computed points' coordinates
            this.updatePoints();
            var angle = index_5.DrawUtils.ANGLE(a, b);
            var dist = index_5.DrawUtils.DIST(a, b);
            var mid = index_5.DrawUtils.MID(a, b);
            canvas.beginPath();
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.ellipse(mid.x, mid.y, dist / 2, r2, angle, 0, 2 * Math.PI);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    EllipseFigureComponent.prototype.getEditState = function () {
        return EditEllipseState.instance;
    };
    EllipseFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    EllipseFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    EllipseFigureComponent.prototype.computeRadius = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            return index_5.DrawUtils.DIST_TO_LINE(p, a, b);
        }
    };
    EllipseFigureComponent.prototype.subscribe = function (sub) {
        if (sub === void 0) { sub = true; }
        if (sub) {
            this.pa.changed.on(this.onPointChanged);
            this.pb.changed.on(this.onPointChanged);
            this.pc.changed.on(this.onP3changed);
            this.pd.changed.on(this.onP4changed);
        }
        else {
            this.pa.changed.off(this.onPointChanged);
            this.pb.changed.off(this.onPointChanged);
            this.pc.changed.off(this.onP3changed);
            this.pd.changed.off(this.onP4changed);
        }
    };
    EllipseFigureComponent.prototype.updatePoints = function () {
        this.subscribe(false); // prevent change events while recomputing
        // Update p3, p4
        var r2 = this.store.radiusB;
        var y1 = r2;
        var y2 = -r2;
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var angle = index_5.DrawUtils.ANGLE(a, b);
            var mid = index_5.DrawUtils.MID(a, b);
            // rotate
            var rotp1 = { x: y1 * Math.sin(-angle),
                y: y1 * Math.cos(-angle) };
            var rotp2 = { x: y2 * Math.sin(-angle),
                y: y2 * Math.cos(-angle) };
            // transfer
            var tp1 = { x: rotp1.x + mid.x, y: rotp1.y + mid.y };
            var tp2 = { x: rotp2.x + mid.x, y: rotp2.y + mid.y };
            this.pc.pixel = { x: tp1.x, y: tp1.y };
            this.pd.pixel = { x: tp2.x, y: tp2.y };
        }
        this.subscribe();
    };
    return EllipseFigureComponent;
}(index_1.FigureComponent));
exports.EllipseFigureComponent = EllipseFigureComponent;
var EllipseSettings = (function () {
    function EllipseSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return EllipseSettings;
}());
exports.EllipseSettings = EllipseSettings;
var DrawEllipseState = (function (_super) {
    __extends(DrawEllipseState, _super);
    function DrawEllipseState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawEllipseState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawEllipseState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawEllipseState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawEllipseState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.ellipse);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.pa = { x: relX, y: relY };
        }
        else if (this.count === 1) {
            if (this.figure) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            this.pb = { x: relX, y: relY };
        }
        else if (this.count === 2 && this.pa && this.pb) {
            var dist = index_5.DrawUtils.DIST_TO_LINE({ x: relX, y: relY }, this.pa, this.pb);
            if (this.figure) {
                this.figure.radiusB = dist;
                // this.figure.pointB.uid = coordX;
                // this.figure.pointB.v = coordY;
            }
        }
        else if (this.count > 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawEllipseState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (this.count === 2) {
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
                this.pb = { x: relX, y: relY };
            }
        }
        else if (this.count === 3 && this.pa && this.pb) {
            var dist = index_5.DrawUtils.DIST_TO_LINE({ x: relX, y: relY }, this.pa, this.pb);
            if (this.figure) {
                this.figure.radiusB = dist;
            }
        }
    };
    DrawEllipseState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawEllipseState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawEllipseState = DrawEllipseState;
var EditEllipseState = (function () {
    function EditEllipseState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditEllipseState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditEllipseState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditEllipseState.prototype.onMouseWheel = function (board, mouse) { };
    EditEllipseState.prototype.onMouseMove = function (board, mouse) {
        if (this.figure && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.figure.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditEllipseState.prototype.onMouseEnter = function (board, mouse) { };
    EditEllipseState.prototype.onMouseLeave = function (board, mouse) { };
    EditEllipseState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditEllipseState.prototype.onMouseDown = function (board, mouse) { };
    EditEllipseState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.figure = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditEllipseState.prototype.deactivate = function (board, mouse) { };
    EditEllipseState.prototype.exit = function (board, mouse) {
        this.figure = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditEllipseState;
}());
var EllipseStore = (function () {
    function EllipseStore(container) {
        this.container = container;
    }
    Object.defineProperty(EllipseStore.prototype, "radiusB", {
        get: function () {
            return this.container.getProperty('point') || 0;
        },
        set: function (value) {
            this.container.setProperty('point', value);
        },
        enumerable: true,
        configurable: true
    });
    return EllipseStore;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing fibonacci fan.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var FiboFanFigureComponent = (function (_super) {
    __extends(FiboFanFigureComponent, _super);
    function FiboFanFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Fibo Fan', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new FiboFanSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(FiboFanFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FiboFanFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    FiboFanFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        return (a && b)
            ? index_4.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
            : false;
    };
    FiboFanFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    FiboFanFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    FiboFanFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var length100 = b.y - a.y;
            var p1 = { x: b.x, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[1] };
            var p2 = { x: b.x, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[2] };
            var p3 = { x: b.x, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[3] };
            var extP1 = index_4.DrawUtils.EXTEND(a, p1, frame);
            var extP2 = index_4.DrawUtils.EXTEND(a, p2, frame);
            var extP3 = index_4.DrawUtils.EXTEND(a, p3, frame);
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            if (this.isSelected) {
                canvas.moveTo(a.x, a.y);
                canvas.lineTo(b.x, b.y);
            }
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(extP1.x, extP1.y);
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(extP2.x, extP2.y);
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(extP3.x, extP3.y);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    FiboFanFigureComponent.prototype.getEditState = function () {
        return EditFiboFanState.instance;
    };
    FiboFanFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    FiboFanFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return FiboFanFigureComponent;
}(index_1.FigureComponent));
exports.FiboFanFigureComponent = FiboFanFigureComponent;
var FiboFanSettings = (function () {
    function FiboFanSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return FiboFanSettings;
}());
exports.FiboFanSettings = FiboFanSettings;
var DrawFiboFanState = (function (_super) {
    __extends(DrawFiboFanState, _super);
    function DrawFiboFanState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawFiboFanState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawFiboFanState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawFiboFanState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawFiboFanState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.fibofan);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawFiboFanState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawFiboFanState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawFiboFanState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawFiboFanState = DrawFiboFanState;
var EditFiboFanState = (function () {
    function EditFiboFanState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditFiboFanState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditFiboFanState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditFiboFanState.prototype.onMouseWheel = function (board, mouse) { };
    EditFiboFanState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditFiboFanState.prototype.onMouseEnter = function (board, mouse) { };
    EditFiboFanState.prototype.onMouseLeave = function (board, mouse) { };
    EditFiboFanState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditFiboFanState.prototype.onMouseDown = function (board, mouse) { };
    EditFiboFanState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditFiboFanState.prototype.deactivate = function (board, mouse) { };
    EditFiboFanState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditFiboFanState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing fibonacci levels.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var FiboLevelFigureComponent = (function (_super) {
    __extends(FiboLevelFigureComponent, _super);
    function FiboLevelFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Fibo Level', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new FiboLevelSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(FiboLevelFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FiboLevelFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    FiboLevelFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        return (a && b)
            ? index_4.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
            : false;
    };
    FiboLevelFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    FiboLevelFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    FiboLevelFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var length100 = b.y - a.y;
            var minx = Math.min(b.x, a.x);
            var maxx = frame.x + frame.w;
            var p1 = { x: minx, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[1] };
            var p2 = { x: minx, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[2] };
            var p3 = { x: minx, y: a.y + length100 * index_2.Constants.FIBO_PERCENTAGE[3] };
            var extP1 = { x: maxx, y: p1.y };
            var extP2 = { x: maxx, y: p2.y };
            var extP3 = { x: maxx, y: p3.y };
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            if (this.isSelected) {
                canvas.moveTo(a.x, a.y);
                canvas.lineTo(b.x, b.y);
            }
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(maxx, a.y); // level 0
            canvas.moveTo(p1.x, p1.y);
            canvas.lineTo(extP1.x, extP1.y);
            canvas.moveTo(p2.x, p2.y);
            canvas.lineTo(extP2.x, extP2.y);
            canvas.moveTo(p3.x, p3.y);
            canvas.lineTo(extP3.x, extP3.y);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    FiboLevelFigureComponent.prototype.getEditState = function () {
        return EditFiboLevelState.instance;
    };
    FiboLevelFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    FiboLevelFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return FiboLevelFigureComponent;
}(index_1.FigureComponent));
exports.FiboLevelFigureComponent = FiboLevelFigureComponent;
var FiboLevelSettings = (function () {
    function FiboLevelSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return FiboLevelSettings;
}());
exports.FiboLevelSettings = FiboLevelSettings;
var DrawFiboLevelState = (function (_super) {
    __extends(DrawFiboLevelState, _super);
    function DrawFiboLevelState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawFiboLevelState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawFiboLevelState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawFiboLevelState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawFiboLevelState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.fibolevel);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawFiboLevelState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawFiboLevelState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawFiboLevelState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawFiboLevelState = DrawFiboLevelState;
var EditFiboLevelState = (function () {
    function EditFiboLevelState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditFiboLevelState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditFiboLevelState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditFiboLevelState.prototype.onMouseWheel = function (board, mouse) { };
    EditFiboLevelState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditFiboLevelState.prototype.onMouseEnter = function (board, mouse) { };
    EditFiboLevelState.prototype.onMouseLeave = function (board, mouse) { };
    EditFiboLevelState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditFiboLevelState.prototype.onMouseDown = function (board, mouse) { };
    EditFiboLevelState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditFiboLevelState.prototype.deactivate = function (board, mouse) { };
    EditFiboLevelState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditFiboLevelState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing fibonacci projection.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var FiboProjectionFigureComponent = (function (_super) {
    __extends(FiboProjectionFigureComponent, _super);
    function FiboProjectionFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Fibo Projection', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new FiboProjectionSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v)
                };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('c'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        return _this;
    }
    Object.defineProperty(FiboProjectionFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FiboProjectionFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FiboProjectionFigureComponent.prototype, "pointC", {
        get: function () {
            return this.pc.point;
        },
        set: function (value) {
            this.pc.point = value;
        },
        enumerable: true,
        configurable: true
    });
    FiboProjectionFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        if (a && b && c) {
            return index_5.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, b, c, 5);
        }
        return false;
    };
    FiboProjectionFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    FiboProjectionFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        var c = this.pc.shift(dx, dy);
        return a || b || c;
    };
    FiboProjectionFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        var canvas = this.area.frontCanvas;
        canvas.setStrokeStyle(this.settings.color);
        canvas.lineWidth = this.settings.width;
        canvas.beginPath();
        if (a && b && !c) {
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(b.x, b.y);
        }
        else if (a && b && c) {
            var length100 = b.y - a.y;
            var x = c.x;
            var maxx = frame.x + frame.w;
            var basey = c.y;
            var p1 = { x: x, y: basey + length100 * index_2.Constants.FIBO_PERCENTAGE[1] };
            var p2 = { x: x, y: basey + length100 * index_2.Constants.FIBO_PERCENTAGE[2] };
            var p3 = { x: x, y: basey + length100 * index_2.Constants.FIBO_PERCENTAGE[3] };
            var extP1 = { x: maxx, y: p1.y };
            var extP2 = { x: maxx, y: p2.y };
            var extP3 = { x: maxx, y: p3.y };
            if (this.isSelected) {
                canvas.moveTo(a.x, a.y);
                canvas.lineTo(b.x, b.y);
                canvas.lineTo(c.x, c.y);
            }
            canvas.moveTo(c.x, c.y);
            canvas.lineTo(maxx, c.y); // level 0
            canvas.moveTo(p1.x, p1.y);
            canvas.lineTo(extP1.x, extP1.y);
            canvas.moveTo(p2.x, p2.y);
            canvas.lineTo(extP2.x, extP2.y);
            canvas.moveTo(p3.x, p3.y);
            canvas.lineTo(extP3.x, extP3.y);
        }
        canvas.stroke();
        _super.prototype.render.call(this, context, renderLocator);
    };
    FiboProjectionFigureComponent.prototype.getEditState = function () {
        return EditPitchforkState.instance;
    };
    FiboProjectionFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    FiboProjectionFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return FiboProjectionFigureComponent;
}(index_1.FigureComponent));
exports.FiboProjectionFigureComponent = FiboProjectionFigureComponent;
var FiboProjectionSettings = (function () {
    function FiboProjectionSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return FiboProjectionSettings;
}());
exports.FiboProjectionSettings = FiboProjectionSettings;
var DrawFiboProjectionState = (function (_super) {
    __extends(DrawFiboProjectionState, _super);
    function DrawFiboProjectionState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawFiboProjectionState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawFiboProjectionState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawFiboProjectionState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawFiboProjectionState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.fiboprojection);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count === 2) {
            if (this.figure) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
        else if (this.count > 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawFiboProjectionState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (coordX && coordY) {
            if (this.count === 2) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            else if (this.count === 3) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
    };
    DrawFiboProjectionState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawFiboProjectionState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawFiboProjectionState = DrawFiboProjectionState;
var EditPitchforkState = (function () {
    function EditPitchforkState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditPitchforkState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditPitchforkState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditPitchforkState.prototype.onMouseWheel = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditPitchforkState.prototype.onMouseEnter = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseLeave = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditPitchforkState.prototype.onMouseDown = function (board, mouse) { };
    EditPitchforkState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditPitchforkState.prototype.deactivate = function (board, mouse) { };
    EditPitchforkState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditPitchforkState;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing fibonacci time projection.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var Line = (function () {
    function Line(uid, percentage) {
        this.uid = uid;
        this.percentage = percentage;
    }
    return Line;
}());
var FiboTimeProjectionFigureComponent = (function (_super) {
    __extends(FiboTimeProjectionFigureComponent, _super);
    function FiboTimeProjectionFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Fibo Time Projection', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new FiboTimeProjectionSettings();
        _this.lines = [];
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.onPointChanged = function () {
            _this.updateLines();
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.subscribe();
        return _this;
    }
    Object.defineProperty(FiboTimeProjectionFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FiboTimeProjectionFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    FiboTimeProjectionFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        return (a && b)
            ? index_4.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
            : false;
    };
    FiboTimeProjectionFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    FiboTimeProjectionFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    FiboTimeProjectionFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var minx = Math.min(a.x, b.x);
            var maxx = Math.min(a.x, b.x);
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {
                var line = _a[_i];
                var x = this.taxis.toX(line.uid);
                if (x) {
                    canvas.moveTo(x, frame.y);
                    canvas.lineTo(x, frame.y + frame.h);
                }
            }
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    FiboTimeProjectionFigureComponent.prototype.getEditState = function () {
        return EditFiboTimeProjectionState.instance;
    };
    FiboTimeProjectionFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    FiboTimeProjectionFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    FiboTimeProjectionFigureComponent.prototype.subscribe = function (sub) {
        if (sub === void 0) { sub = true; }
        if (sub) {
            this.pa.changed.on(this.onPointChanged);
            this.pb.changed.on(this.onPointChanged);
        }
        else {
            this.pa.changed.off(this.onPointChanged);
            this.pb.changed.off(this.onPointChanged);
        }
    };
    FiboTimeProjectionFigureComponent.prototype.updateLines = function () {
        this.subscribe(false); // prevent change events while recomputing
        this.lines = [];
        if (this.pa.point.uid && this.pb.point.uid) {
            var uidStart = this.pa.point.uid.compare(this.pb.point.uid) <= 0 ? this.pa.point.uid : this.pb.point.uid;
            var uidEnd = this.pa.point.uid.compare(this.pb.point.uid) <= 0 ? this.pb.point.uid : this.pa.point.uid;
            var dist100 = this.taxis.dist(this.pa.point.uid, this.pb.point.uid);
            if (dist100 !== undefined) {
                dist100 = Math.abs(dist100);
                var percantage = [
                    0,
                    index_2.Constants.FIBO_PERCENTAGE[1],
                    index_2.Constants.FIBO_PERCENTAGE[2],
                    index_2.Constants.FIBO_PERCENTAGE[3],
                    index_2.Constants.FIBO_PERCENTAGE[6]
                ];
                for (var _i = 0, percantage_1 = percantage; _i < percantage_1.length; _i++) {
                    var perc = percantage_1[_i];
                    var shift = Math.floor(dist100 * perc);
                    var uid = this.taxis.add(uidStart, shift);
                    if (uid) {
                        this.lines.push(new Line(uid, perc));
                    }
                }
            }
        }
        this.subscribe();
    };
    return FiboTimeProjectionFigureComponent;
}(index_1.FigureComponent));
exports.FiboTimeProjectionFigureComponent = FiboTimeProjectionFigureComponent;
var FiboTimeProjectionSettings = (function () {
    function FiboTimeProjectionSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return FiboTimeProjectionSettings;
}());
exports.FiboTimeProjectionSettings = FiboTimeProjectionSettings;
var DrawFiboTimeProjectionState = (function (_super) {
    __extends(DrawFiboTimeProjectionState, _super);
    function DrawFiboTimeProjectionState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawFiboTimeProjectionState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawFiboTimeProjectionState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawFiboTimeProjectionState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawFiboTimeProjectionState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.fibotimeprojection);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawFiboTimeProjectionState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawFiboTimeProjectionState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawFiboTimeProjectionState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawFiboTimeProjectionState = DrawFiboTimeProjectionState;
var EditFiboTimeProjectionState = (function () {
    function EditFiboTimeProjectionState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditFiboTimeProjectionState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditFiboTimeProjectionState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditFiboTimeProjectionState.prototype.onMouseWheel = function (board, mouse) { };
    EditFiboTimeProjectionState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditFiboTimeProjectionState.prototype.onMouseEnter = function (board, mouse) { };
    EditFiboTimeProjectionState.prototype.onMouseLeave = function (board, mouse) { };
    EditFiboTimeProjectionState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditFiboTimeProjectionState.prototype.onMouseDown = function (board, mouse) { };
    EditFiboTimeProjectionState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditFiboTimeProjectionState.prototype.deactivate = function (board, mouse) { };
    EditFiboTimeProjectionState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditFiboTimeProjectionState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing Gann fan.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var Line = (function () {
    function Line(coff, text) {
        this.coff = coff;
        this.text = text;
    }
    return Line;
}());
var GannFanFigureComponent = (function (_super) {
    __extends(GannFanFigureComponent, _super);
    function GannFanFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Gann Fan', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new GannFanSettings();
        _this.lines = [
            new Line(0.125, '8/1'),
            new Line(0.25, '4/1'),
            new Line(0.33333, '3/1'),
            new Line(0.5, '2/1'),
            new Line(1, '1/1'),
            new Line(2, '1/2'),
            new Line(3, '1/3'),
            new Line(4, '1/4'),
            new Line(8, '1/8')
        ];
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(GannFanFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GannFanFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    GannFanFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        return (a && b)
            ? index_4.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
            : false;
    };
    GannFanFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    GannFanFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    GannFanFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var length100 = b.y - a.y;
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            for (var _i = 0, _a = this.lines; _i < _a.length; _i++) {
                var line = _a[_i];
                var p = { x: b.x, y: a.y + length100 * line.coff };
                var ext = index_4.DrawUtils.EXTEND(a, p, frame);
                canvas.moveTo(a.x, a.y);
                canvas.lineTo(ext.x, ext.y);
            }
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    GannFanFigureComponent.prototype.getEditState = function () {
        return EditGannFanState.instance;
    };
    GannFanFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    GannFanFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return GannFanFigureComponent;
}(index_1.FigureComponent));
exports.GannFanFigureComponent = GannFanFigureComponent;
var GannFanSettings = (function () {
    function GannFanSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return GannFanSettings;
}());
exports.GannFanSettings = GannFanSettings;
var DrawGannFanState = (function (_super) {
    __extends(DrawGannFanState, _super);
    function DrawGannFanState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawGannFanState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawGannFanState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawGannFanState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawGannFanState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.gannfan);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawGannFanState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawGannFanState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawGannFanState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawGannFanState = DrawGannFanState;
var EditGannFanState = (function () {
    function EditGannFanState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditGannFanState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditGannFanState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditGannFanState.prototype.onMouseWheel = function (board, mouse) { };
    EditGannFanState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditGannFanState.prototype.onMouseEnter = function (board, mouse) { };
    EditGannFanState.prototype.onMouseLeave = function (board, mouse) { };
    EditGannFanState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditGannFanState.prototype.onMouseDown = function (board, mouse) { };
    EditGannFanState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditGannFanState.prototype.deactivate = function (board, mouse) { };
    EditGannFanState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditGannFanState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],80:[function(require,module,exports){
/**
 * Classes for drawing horizontal lines.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../component/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var HorizontalLineFigureComponent = (function (_super) {
    __extends(HorizontalLineFigureComponent, _super);
    function HorizontalLineFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Horizontal Line', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.p = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('p'));
        _this.addChild(_this.p);
        return _this;
    }
    Object.defineProperty(HorizontalLineFigureComponent.prototype, "point", {
        get: function () {
            return this.p.point;
        },
        set: function (value) {
            this.p.point = value;
        },
        enumerable: true,
        configurable: true
    });
    HorizontalLineFigureComponent.prototype.isHit = function (p) {
        if (!this.p.point.uid || !this.p.point.v) {
            return false;
        }
        // // TODO: Can be stored when coords are changed
        // const ax = this.coords.toX(this.pa.point.t === undefined ? <string>this.pa.point.uid : this.pa.point.t);
        // const bx = this.coords.toX(this.pb.point.t === undefined ? <string>this.pb.point.uid : this.pb.point.t);
        var pointy = this.yaxis.toX(this.p.point.v);
        // const by = this.coords.toY(this.pb.point.v);
        return p.y >= pointy - 3 && p.y <= pointy + 3;
    };
    HorizontalLineFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        if (this.p.point.uid && this.p.point.v) {
            var y = this.yaxis.toX(this.p.point.v);
            var canvas = this.area.frontCanvas;
            if (this.isHovered) {
                canvas.setStrokeStyle('#FF0000');
            }
            else {
                canvas.setStrokeStyle('#FF0000');
            }
            canvas.lineWidth = 2;
            canvas.beginPath();
            canvas.moveTo(0, y);
            canvas.lineTo(this.size.width, y);
            canvas.stroke();
            canvas.closePath();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    HorizontalLineFigureComponent.prototype.getEditState = function () {
        return EditHorizontalLineState.instance;
    };
    return HorizontalLineFigureComponent;
}(index_1.FigureComponent));
exports.HorizontalLineFigureComponent = HorizontalLineFigureComponent;
var DrawHorizontalLineState = (function (_super) {
    __extends(DrawHorizontalLineState, _super);
    function DrawHorizontalLineState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawHorizontalLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawHorizontalLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawHorizontalLineState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawHorizontalLineState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.hline);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.point = { uid: coordX, v: coordY };
            this.exit();
        }
        this.count += 1;
    };
    DrawHorizontalLineState.prototype.setLastPoint = function (mouse) { };
    DrawHorizontalLineState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawHorizontalLineState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawHorizontalLineState = DrawHorizontalLineState;
var EditHorizontalLineState = (function () {
    function EditHorizontalLineState() {
    }
    Object.defineProperty(EditHorizontalLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditHorizontalLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditHorizontalLineState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            var coordY = this.chartStack.yToValue(mouse.pos.y - board.offset.y - this.chartStack.offset.y);
            this.line.point = { uid: this.line.point.uid, v: coordY };
        }
        else {
            console.debug('Edit state: line or chartStack is not found.');
        }
    };
    EditHorizontalLineState.prototype.onMouseEnter = function (board, mouse) { };
    EditHorizontalLineState.prototype.onMouseLeave = function (board, mouse) { };
    EditHorizontalLineState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditHorizontalLineState.prototype.onMouseDown = function (board, mouse) { };
    EditHorizontalLineState.prototype.onMouseWheel = function (board, mouse) { };
    EditHorizontalLineState.prototype.activate = function (board, mouse, stack, activationParameters) {
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
    };
    EditHorizontalLineState.prototype.deactivate = function (board, mouse) { };
    EditHorizontalLineState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditHorizontalLineState;
}());
},{"../component/index":38,"./FigureStateBase":90,"./PointFigureComponent":91}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing lines.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var LineFigureComponent = (function (_super) {
    __extends(LineFigureComponent, _super);
    function LineFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Trend Line', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new LineSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(LineFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    LineFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        return (a && b)
            ? index_4.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
            : false;
    };
    LineFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    LineFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    LineFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(b.x, b.y);
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    LineFigureComponent.prototype.getEditState = function () {
        return EditLineState.instance;
    };
    LineFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    LineFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return LineFigureComponent;
}(index_1.FigureComponent));
exports.LineFigureComponent = LineFigureComponent;
var LineSettings = (function () {
    function LineSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return LineSettings;
}());
exports.LineSettings = LineSettings;
var DrawLineState = (function (_super) {
    __extends(DrawLineState, _super);
    function DrawLineState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawLineState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawLineState.prototype.setChartStack = function (stack) {
        this.stack = stack;
    };
    DrawLineState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.line);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawLineState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawLineState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawLineState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawLineState = DrawLineState;
var EditLineState = (function () {
    function EditLineState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditLineState.prototype.onMouseWheel = function (board, mouse) { };
    EditLineState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditLineState.prototype.onMouseEnter = function (board, mouse) { };
    EditLineState.prototype.onMouseLeave = function (board, mouse) { };
    EditLineState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditLineState.prototype.onMouseDown = function (board, mouse) { };
    EditLineState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditLineState.prototype.deactivate = function (board, mouse) { };
    EditLineState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditLineState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var OhlcProjFigureComponent = (function (_super) {
    __extends(OhlcProjFigureComponent, _super);
    function OhlcProjFigureComponent(area, offset, size, settings, taxis, yaxis, container, source) {
        var _this = _super.call(this, 'OHLC Projection', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.source = source;
        _this.settings = new OhlcProjSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v)
                };
            }
        };
        _this.onPointAChanged = function () {
            _this.subscribe(false);
            _this.constraintPointLast(_this.pa);
            _this.constraintPoint(_this.pa, undefined, _this.pb.point);
            _this.updateHHLL();
            _this.subscribe();
        };
        _this.onPointBChanged = function () {
            _this.subscribe(false);
            _this.constraintPointLast(_this.pb);
            _this.constraintPoint(_this.pb, _this.pa.point, _this.pc.point);
            _this.updateHHLL();
            _this.subscribe();
        };
        _this.onPointCChanged = function () {
            _this.subscribe(false);
            _this.constraintPoint(_this.pc, _this.pb.point, undefined);
            _this.subscribe();
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('c'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        // update values after loading figures
        _this.updateHHLL();
        _this.subscribe();
        return _this;
    }
    Object.defineProperty(OhlcProjFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OhlcProjFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OhlcProjFigureComponent.prototype, "pointC", {
        get: function () {
            return this.pc.point;
        },
        set: function (value) {
            this.pc.point = value;
        },
        enumerable: true,
        configurable: true
    });
    OhlcProjFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        return (a && b && c)
            ? (index_5.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, b, c, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, c, a, 5))
            : false;
    };
    OhlcProjFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    OhlcProjFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        var c = this.pc.shift(dx, dy);
        return a || b || c;
    };
    OhlcProjFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        if (a && b) {
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.moveTo(a.x, frame.y);
            canvas.lineTo(a.x, frame.y + frame.h);
            canvas.moveTo(b.x, frame.y);
            canvas.lineTo(b.x, frame.y + frame.h);
            if (c) {
                canvas.moveTo(c.x, frame.y);
                canvas.lineTo(c.x, frame.y + frame.h);
            }
            var minx = Math.min(a.x, b.x);
            var maxx = Math.max(a.x, b.x, c ? c.x : -Infinity);
            if (this.hhll) {
                if (this.hhll.o) {
                    this.hline(canvas, minx, this.yaxis.toX(this.hhll.o), maxx - minx);
                }
                if (this.hhll.c) {
                    this.hline(canvas, minx, this.yaxis.toX(this.hhll.c), maxx - minx);
                }
                if (this.hhll.h) {
                    this.hline(canvas, minx, this.yaxis.toX(this.hhll.h), maxx - minx);
                }
                if (this.hhll.l) {
                    this.hline(canvas, minx, this.yaxis.toX(this.hhll.l), maxx - minx);
                }
            }
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    OhlcProjFigureComponent.prototype.hline = function (canvas, x, y, l) {
        canvas.moveTo(x, y);
        canvas.lineTo(x + l, y);
    };
    OhlcProjFigureComponent.prototype.getEditState = function () {
        return EditOhlcProjState.instance;
    };
    OhlcProjFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    OhlcProjFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    OhlcProjFigureComponent.prototype.subscribe = function (sub) {
        if (sub === void 0) { sub = true; }
        if (sub) {
            this.pa.changed.on(this.onPointAChanged);
            this.pb.changed.on(this.onPointBChanged);
            this.pc.changed.on(this.onPointCChanged);
        }
        else {
            this.pa.changed.off(this.onPointAChanged);
            this.pb.changed.off(this.onPointBChanged);
            this.pc.changed.off(this.onPointCChanged);
        }
    };
    OhlcProjFigureComponent.prototype.constraintPoint = function (p, pfrom, pto) {
        if (pfrom && p.point.uid && pfrom.uid && p.point.uid.compare(pfrom.uid) < 0) {
            p.point = { uid: pfrom.uid, v: p.point.v };
        }
        if (pto && p.point.uid && pto.uid && p.point.uid.compare(pto.uid) > 0) {
            p.point = { uid: pto.uid, v: p.point.v };
        }
    };
    OhlcProjFigureComponent.prototype.constraintPointLast = function (p) {
        if (this.source) {
            var last = this.source.getLastCandle();
            if (last && p.point.uid && p.point.uid.compare(last.uid) > 0) {
                p.point = { uid: last.uid, v: p.point.v };
            }
        }
    };
    OhlcProjFigureComponent.prototype.updateHHLL = function () {
        this.hhll = undefined;
        if (this.source && this.pa.point.uid && this.pb.point.uid) {
            this.hhll = this.source.getHHLL(this.pa.point.uid, this.pb.point.uid);
        }
    };
    return OhlcProjFigureComponent;
}(index_1.FigureComponent));
exports.OhlcProjFigureComponent = OhlcProjFigureComponent;
var OhlcProjSettings = (function () {
    function OhlcProjSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return OhlcProjSettings;
}());
exports.OhlcProjSettings = OhlcProjSettings;
var DrawOhlcProjState = (function (_super) {
    __extends(DrawOhlcProjState, _super);
    function DrawOhlcProjState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawOhlcProjState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawOhlcProjState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawOhlcProjState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawOhlcProjState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.ohlcproj);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count === 2) {
            if (this.figure) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
        else if (this.count > 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawOhlcProjState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (coordX && coordY) {
            if (this.count === 2) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            else if (this.count === 3) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
    };
    DrawOhlcProjState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawOhlcProjState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawOhlcProjState = DrawOhlcProjState;
var EditOhlcProjState = (function () {
    function EditOhlcProjState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditOhlcProjState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditOhlcProjState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditOhlcProjState.prototype.onMouseWheel = function (board, mouse) { };
    EditOhlcProjState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditOhlcProjState.prototype.onMouseEnter = function (board, mouse) { };
    EditOhlcProjState.prototype.onMouseLeave = function (board, mouse) { };
    EditOhlcProjState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditOhlcProjState.prototype.onMouseDown = function (board, mouse) { };
    EditOhlcProjState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditOhlcProjState.prototype.deactivate = function (board, mouse) { };
    EditOhlcProjState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditOhlcProjState;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],83:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing path.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var PathFigureComponent = (function (_super) {
    __extends(PathFigureComponent, _super);
    function PathFigureComponent(area, offset, size, chartSettings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Path', offset, size, container) || this;
        _this.area = area;
        _this.chartSettings = chartSettings;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new PathSettings();
        _this.p = [];
        _this._closed = false;
        _this.getTimeRange = function (ctx, size) {
            if (_this.p.length > 0) {
                var min_1;
                var max_1;
                _this.p.forEach(function (value) {
                    var uid = value.point.uid;
                    if (uid) {
                        min_1 = min_1 ? (min_1.compare(uid) <= 0 ? min_1 : uid) : uid;
                        max_1 = max_1 ? (max_1.compare(uid) >= 0 ? max_1 : uid) : uid;
                    }
                });
                return (min_1 && max_1) ? { start: min_1, end: max_1 } : undefined;
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.p.length > 0) {
                var min_2;
                var max_2;
                _this.p.forEach(function (value) {
                    var v = value.point.v;
                    if (v) {
                        min_2 = min_2 ? (min_2 <= v ? min_2 : v) : v;
                        max_2 = max_2 ? (max_2 >= v ? max_2 : v) : v;
                    }
                });
                return (min_2 && max_2) ? { start: min_2, end: max_2 } : undefined;
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, chartSettings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, chartSettings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        // restore points
        _this.pointsStore = container.getArrayProperty('points');
        for (var _i = 0, _a = _this.pointsStore.asArray(); _i < _a.length; _i++) {
            var pStore = _a[_i];
            _this.insertPoint(pStore);
            _this.closed = true; // for loaded figure set close
        }
        return _this;
    }
    Object.defineProperty(PathFigureComponent.prototype, "closed", {
        get: function () {
            return this._closed;
        },
        set: function (value) {
            this._closed = value;
        },
        enumerable: true,
        configurable: true
    });
    PathFigureComponent.prototype.addPoint = function (uid, v) {
        var pointContainer = this.pointsStore.addItem();
        var pf = this.insertPoint(pointContainer);
        pf.point = { uid: uid, v: v };
    };
    PathFigureComponent.prototype.insertPoint = function (container) {
        var pf = new PointFigureComponent_1.PointFigureComponent(this.area, this.offset, this.size, this.chartSettings, this.taxis, this.yaxis, container);
        this.p.push(pf);
        this.addChild(pf);
        return pf;
    };
    PathFigureComponent.prototype.getPoint = function (index) {
        if (index >= 0 && index < this.p.length) {
            return this.p[index].point;
        }
        else {
            throw new Error("Index out of ranges " + index + ". Length = " + this.p.length);
        }
    };
    PathFigureComponent.prototype.setPoint = function (index, v) {
        if (index >= 0 && index < this.p.length) {
            this.p[index].point = v;
        }
        else {
            throw new Error("Index out of ranges " + index + ". Length = " + this.p.length);
        }
    };
    PathFigureComponent.prototype.removePoint = function (index) {
        if (index >= 0 && index < this.p.length) {
            // remove from store and from ponts array
            this.pointsStore.removeItem(index);
            var removed = this.p.splice(index, 1);
            this.removeChild(removed[0]);
        }
    };
    Object.defineProperty(PathFigureComponent.prototype, "count", {
        get: function () {
            return this.p.length;
        },
        enumerable: true,
        configurable: true
    });
    PathFigureComponent.prototype.isHit = function (p) {
        var cur = undefined;
        var prev = undefined;
        // Check first last
        var hit = this.p.some(function (value) {
            cur = value.getXY();
            if (cur && prev) {
                if (index_4.DrawUtils.IS_POINT_ON_LINE(p, cur, prev, 5)) {
                    return true;
                }
            }
            prev = cur;
            return false;
        });
        // check last line
        if (!hit) {
            if (this.p.length > 1) {
                var first = this.p[0].getXY();
                if (cur && first) {
                    return index_4.DrawUtils.IS_POINT_ON_LINE(p, first, cur, 5);
                }
            }
        }
        return hit;
    };
    PathFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    PathFigureComponent.prototype.shift = function (dx, dy) {
        var result = false;
        this.p.forEach(function (point) {
            result = point.shift(dx, dy) || result;
        });
        return result;
    };
    PathFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var canvas = this.area.frontCanvas;
        canvas.setStrokeStyle(this.settings.color);
        canvas.lineWidth = this.settings.width;
        canvas.beginPath();
        var prev = undefined;
        this.p.forEach(function (value) {
            var cur = value.getXY();
            if (cur && prev) {
                canvas.lineTo(cur.x, cur.y);
            }
            else if (cur) {
                canvas.moveTo(cur.x, cur.y);
            }
            prev = cur;
            //return false;
        });
        if (this._closed) {
            canvas.closePath();
        }
        canvas.stroke();
        _super.prototype.render.call(this, context, renderLocator);
    };
    PathFigureComponent.prototype.getEditState = function () {
        return EditPathState.instance;
    };
    PathFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    PathFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return PathFigureComponent;
}(index_1.FigureComponent));
exports.PathFigureComponent = PathFigureComponent;
var PathSettings = (function () {
    function PathSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return PathSettings;
}());
exports.PathSettings = PathSettings;
var DrawPathState = (function (_super) {
    __extends(DrawPathState, _super);
    function DrawPathState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawPathState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawPathState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawPathState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawPathState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (!coordX || coordY === undefined) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.path);
            this.figure.addPoint(coordX, coordY);
            this.firstXY = new index_3.Point(relX, relY);
        }
        else {
            if (this.figure) {
                this.figure.addPoint(coordX, coordY);
                this.lastXY = new index_3.Point(relX, relY);
            }
        }
        this.count += 1;
    };
    DrawPathState.prototype.fixPoint = function (mouse) {
        if (this.firstXY && this.lastXY && index_4.DrawUtils.IS_POINT_OVER(this.firstXY, this.lastXY, 10)) {
            // remove last point
            if (this.figure) {
                this.figure.removePoint(this.figure.count - 1);
                this.figure.closed = true;
            }
            this.exit();
            return;
        }
    };
    DrawPathState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        this.lastXY = new index_3.Point(relX, relY);
        if (coordX && coordY && this.figure.count > 0) {
            this.figure.setPoint(this.figure.count - 1, { uid: coordX, v: coordY });
        }
    };
    DrawPathState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        this.lastXY = undefined;
        this.firstXY = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawPathState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawPathState = DrawPathState;
var EditPathState = (function () {
    function EditPathState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditPathState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditPathState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditPathState.prototype.onMouseWheel = function (board, mouse) { };
    EditPathState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditPathState.prototype.onMouseEnter = function (board, mouse) { };
    EditPathState.prototype.onMouseLeave = function (board, mouse) { };
    EditPathState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditPathState.prototype.onMouseDown = function (board, mouse) { };
    EditPathState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditPathState.prototype.deactivate = function (board, mouse) { };
    EditPathState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditPathState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],84:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing pitchfork.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var PitchforkFigureComponent = (function (_super) {
    __extends(PitchforkFigureComponent, _super);
    function PitchforkFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Pitchfork', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new PitchforkSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v)
                };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('c'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        return _this;
    }
    Object.defineProperty(PitchforkFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PitchforkFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PitchforkFigureComponent.prototype, "pointC", {
        get: function () {
            return this.pc.point;
        },
        set: function (value) {
            this.pc.point = value;
        },
        enumerable: true,
        configurable: true
    });
    PitchforkFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        if (a && b && c) {
            var mid = index_5.DrawUtils.MID(b, c);
            return index_5.DrawUtils.IS_POINT_ON_LINE(p, a, mid, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, b, c, 5);
        }
        return false;
    };
    PitchforkFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    PitchforkFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        var c = this.pc.shift(dx, dy);
        return a || b || c;
    };
    PitchforkFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var frame = { x: this.offset.x, y: this.offset.y, w: this.size.width, h: this.size.height };
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        var extA = undefined;
        var mid = undefined;
        if (a && b) {
            if (c) {
                mid = index_5.DrawUtils.MID(b, c);
                extA = index_5.DrawUtils.EXTEND(a, mid, frame);
            }
            else {
                extA = index_5.DrawUtils.EXTEND(a, b, frame);
            }
        }
        var canvas = this.area.frontCanvas;
        canvas.setStrokeStyle(this.settings.color);
        canvas.lineWidth = this.settings.width;
        canvas.beginPath();
        if (a && b && !c && extA) {
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(extA.x, extA.y);
        }
        else if (a && b && c && extA && mid) {
            // find left and right extensions
            var midAC = index_5.DrawUtils.MID(a, c);
            var midAB = index_5.DrawUtils.MID(a, b);
            // find 4th vertex of parallelogram
            var a1 = {
                x: 2 * midAC.x - mid.x,
                y: 2 * midAC.y - mid.y
            };
            var a2 = {
                x: 2 * midAB.x - mid.x,
                y: 2 * midAB.y - mid.y
            };
            // extend side lines
            var ext1 = index_5.DrawUtils.EXTEND(a1, c, frame);
            var ext2 = index_5.DrawUtils.EXTEND(a2, b, frame);
            canvas.moveTo(b.x, b.y);
            canvas.lineTo(c.x, c.y);
            // extensions
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(extA.x, extA.y);
            canvas.moveTo(c.x, c.y);
            canvas.lineTo(ext1.x, ext1.y);
            canvas.moveTo(b.x, b.y);
            canvas.lineTo(ext2.x, ext2.y);
        }
        canvas.stroke();
        _super.prototype.render.call(this, context, renderLocator);
    };
    PitchforkFigureComponent.prototype.getEditState = function () {
        return EditPitchforkState.instance;
    };
    PitchforkFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    PitchforkFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return PitchforkFigureComponent;
}(index_1.FigureComponent));
exports.PitchforkFigureComponent = PitchforkFigureComponent;
var PitchforkSettings = (function () {
    function PitchforkSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return PitchforkSettings;
}());
exports.PitchforkSettings = PitchforkSettings;
var DrawPitchforkState = (function (_super) {
    __extends(DrawPitchforkState, _super);
    function DrawPitchforkState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawPitchforkState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawPitchforkState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawPitchforkState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawPitchforkState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.pitchfork);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count === 2) {
            if (this.figure) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
        else if (this.count > 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawPitchforkState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (coordX && coordY) {
            if (this.count === 2) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            else if (this.count === 3) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
    };
    DrawPitchforkState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawPitchforkState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawPitchforkState = DrawPitchforkState;
var EditPitchforkState = (function () {
    function EditPitchforkState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditPitchforkState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditPitchforkState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditPitchforkState.prototype.onMouseWheel = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditPitchforkState.prototype.onMouseEnter = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseLeave = function (board, mouse) { };
    EditPitchforkState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditPitchforkState.prototype.onMouseDown = function (board, mouse) { };
    EditPitchforkState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditPitchforkState.prototype.deactivate = function (board, mouse) { };
    EditPitchforkState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditPitchforkState;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],85:[function(require,module,exports){
/**
 * Classes for drawing rectangles.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var RectFigureComponent = (function (_super) {
    __extends(RectFigureComponent, _super);
    function RectFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Rectangle', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new RectSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined) {
                return { start: _this.pa.point.uid, end: _this.pb.point.uid };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return { start: _this.pa.point.v, end: _this.pb.point.v };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        return _this;
    }
    Object.defineProperty(RectFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RectFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (v) {
            this.pb.point = v;
        },
        enumerable: true,
        configurable: true
    });
    RectFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var c = new index_3.Point(a.x, b.y);
            var d = new index_3.Point(b.x, a.y);
            return index_4.DrawUtils.IS_POINT_ON_LINE(p, a, c, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, c, b, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, b, d, 5)
                || index_4.DrawUtils.IS_POINT_ON_LINE(p, a, d, 5);
        }
        return false;
    };
    RectFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    RectFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        return a || b;
    };
    RectFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var ca = this.pa.getXY();
        var cb = this.pb.getXY();
        if (ca && cb) {
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.strokeRect(ca.x, ca.y, cb.x - ca.x, cb.y - ca.y);
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    RectFigureComponent.prototype.getEditState = function () {
        return EditRectState.instance;
    };
    RectFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    RectFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return RectFigureComponent;
}(index_1.FigureComponent));
exports.RectFigureComponent = RectFigureComponent;
var RectSettings = (function () {
    function RectSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return RectSettings;
}());
exports.RectSettings = RectSettings;
var DrawRectState = (function (_super) {
    __extends(DrawRectState, _super);
    function DrawRectState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawRectState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawRectState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawRectState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawRectState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.rect);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count > 1) {
            this.exit();
        }
        this.count += 1;
    };
    DrawRectState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        if (this.count === 2) {
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
        }
    };
    DrawRectState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawRectState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawRectState = DrawRectState;
var EditRectState = (function () {
    function EditRectState() {
        this.last = new index_3.Point();
    }
    Object.defineProperty(EditRectState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditRectState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditRectState.prototype.onMouseWheel = function (board, mouse) { };
    EditRectState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditRectState.prototype.onMouseEnter = function (board, mouse) { };
    EditRectState.prototype.onMouseLeave = function (board, mouse) { };
    EditRectState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditRectState.prototype.onMouseDown = function (board, mouse) { };
    EditRectState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditRectState.prototype.deactivate = function (board, mouse) { };
    EditRectState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditRectState;
}());
},{"../component/index":38,"../core/index":53,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],86:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing text.
 */
var index_1 = require("../canvas/index");
var index_2 = require("../component/index");
var index_3 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var TextFigureComponent = (function (_super) {
    __extends(TextFigureComponent, _super);
    function TextFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Text', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new TextSettings();
        _this.p = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis);
        _this.p.visible = false;
        _this.addChild(_this.p);
        return _this;
    }
    Object.defineProperty(TextFigureComponent.prototype, "point", {
        get: function () {
            return this.p.point;
        },
        set: function (v) {
            this.p.point = v;
        },
        enumerable: true,
        configurable: true
    });
    TextFigureComponent.prototype.isHit = function (p) {
        if (!this.p.point.uid || !this.p.point.v) {
            return false;
        }
        var x = this.taxis.toX(this.p.point.uid);
        var y = this.yaxis.toX(this.p.point.v);
        if (x !== undefined && this.rect) {
            return index_3.DrawUtils.IS_POINT_OVER_RECT(p, this.rect, 5);
        }
        return false;
    };
    TextFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        if (this.p.point.uid && this.p.point.v) {
            var x = this.taxis.toX(this.p.point.uid);
            var y = this.yaxis.toX(this.p.point.v);
            if (x !== undefined) {
                var canvas = this.area.frontCanvas;
                canvas.setStrokeStyle('#FF0000');
                canvas.font = '15pt Arial';
                canvas.setTextAlign(index_1.CanvasTextAlign.Center);
                canvas.setFillStyle('#FF0000');
                var metrics = canvas.measureText(this.settings.text);
                canvas.fillText(this.settings.text, x, y);
                this.rect = { x: x, y: y, w: metrics.width, h: 15 }; // Height in px is equal to font size in pts
            }
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    TextFigureComponent.prototype.getEditState = function () {
        return EditTextState.instance;
    };
    return TextFigureComponent;
}(index_2.FigureComponent));
exports.TextFigureComponent = TextFigureComponent;
var TextSettings = (function () {
    function TextSettings() {
        this.color = '#FF0000';
        this.text = 'Text';
    }
    return TextSettings;
}());
exports.TextSettings = TextSettings;
var DrawTextState = (function (_super) {
    __extends(DrawTextState, _super);
    function DrawTextState() {
        return _super.call(this) || this;
    }
    Object.defineProperty(DrawTextState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawTextState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawTextState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawTextState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        this.figure = this.stack.addFigure(index_2.FigureType.text);
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        this.figure.point = { uid: coordX, v: coordY };
        this.exit();
    };
    DrawTextState.prototype.setLastPoint = function (mouse) { };
    DrawTextState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawTextState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawTextState = DrawTextState;
var EditTextState = (function () {
    function EditTextState() {
    }
    Object.defineProperty(EditTextState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditTextState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditTextState.prototype.onMouseMove = function (board, mouse) {
        if (this.figure && this.chartStack) {
            var coordX = this.chartStack.xToValue(mouse.pos.x - board.offset.x - this.chartStack.offset.x);
            var coordY = this.chartStack.yToValue(mouse.pos.y - board.offset.y - this.chartStack.offset.y);
            this.figure.point = { uid: coordX, v: coordY };
        }
        else {
            console.debug('Edit state: line or chartStack is not found.');
        }
    };
    EditTextState.prototype.onMouseEnter = function (board, mouse) { };
    EditTextState.prototype.onMouseLeave = function (board, mouse) { };
    EditTextState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditTextState.prototype.onMouseDown = function (board, mouse) { };
    EditTextState.prototype.onMouseWheel = function (board, mouse) { };
    EditTextState.prototype.activate = function (board, mouse, stack, activationParameters) {
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.figure = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
    };
    EditTextState.prototype.deactivate = function (board, mouse) { };
    EditTextState.prototype.exit = function (board, mouse) {
        this.figure = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditTextState;
}());
},{"../canvas/index":17,"../component/index":38,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],87:[function(require,module,exports){
/**
 * Classes for drawing trend channels.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var TrendChannelFigureComponent = (function (_super) {
    __extends(TrendChannelFigureComponent, _super);
    function TrendChannelFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Trend channel', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new TrendChannelSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v)
                };
            }
        };
        _this.onPointChanged = function () {
            _this.updatePoints();
        };
        _this.onP3changed = function () {
            var updSpread = _this.computeSpread(_this.pc.pixel);
            _this.store.spread = updSpread || _this.store.spread;
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, undefined, true);
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        _this.store = new ChannelStore(container);
        // recompute point after loading figure
        _this.updatePoints();
        _this.subscribe();
        return _this;
    }
    Object.defineProperty(TrendChannelFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrendChannelFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrendChannelFigureComponent.prototype, "spread", {
        get: function () {
            return this.store.spread;
        },
        set: function (value) {
            this.store.spread = value;
            this.updatePoints();
        },
        enumerable: true,
        configurable: true
    });
    TrendChannelFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var hit = false;
        if (a && b) {
            var spread = this.store.spread;
            hit = index_5.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, { x: a.x, y: a.y + spread }, { x: b.x, y: b.y + spread }, 5);
        }
        return hit;
    };
    TrendChannelFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    TrendChannelFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        this.updatePoints();
        return a || b;
    };
    TrendChannelFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var canvas = this.area.frontCanvas;
        canvas.setStrokeStyle(this.settings.color);
        canvas.lineWidth = this.settings.width;
        if (a && b) {
            // update computed points' coordinates
            this.updatePoints();
            canvas.beginPath();
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(b.x, b.y);
            canvas.stroke();
            var spread = this.store.spread;
            if (spread) {
                canvas.beginPath();
                canvas.moveTo(a.x, a.y + spread);
                canvas.lineTo(b.x, b.y + spread);
                canvas.stroke();
            }
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    TrendChannelFigureComponent.prototype.getEditState = function () {
        return EditTrendChannelState.instance;
    };
    TrendChannelFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    TrendChannelFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    TrendChannelFigureComponent.prototype.computeSpread = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var y = index_5.DrawUtils.LINEAR(a, b, p.x);
            return y !== undefined ? p.y - y : 0;
        }
    };
    TrendChannelFigureComponent.prototype.subscribe = function (sub) {
        if (sub === void 0) { sub = true; }
        if (sub) {
            this.pa.changed.on(this.onPointChanged);
            this.pb.changed.on(this.onPointChanged);
            this.pc.changed.on(this.onP3changed);
        }
        else {
            this.pa.changed.off(this.onPointChanged);
            this.pb.changed.off(this.onPointChanged);
            this.pc.changed.off(this.onP3changed);
        }
    };
    TrendChannelFigureComponent.prototype.updatePoints = function () {
        this.subscribe(false); // prevent change events while recomputing
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        if (a && b) {
            var mid = index_5.DrawUtils.MID(a, b);
            this.pc.pixel = { x: mid.x, y: mid.y + this.store.spread };
        }
        this.subscribe();
    };
    return TrendChannelFigureComponent;
}(index_1.FigureComponent));
exports.TrendChannelFigureComponent = TrendChannelFigureComponent;
var TrendChannelSettings = (function () {
    function TrendChannelSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return TrendChannelSettings;
}());
exports.TrendChannelSettings = TrendChannelSettings;
var DrawTrendChannelState = (function (_super) {
    __extends(DrawTrendChannelState, _super);
    function DrawTrendChannelState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawTrendChannelState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawTrendChannelState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawTrendChannelState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawTrendChannelState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.trendchannel);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.pa = { x: relX, y: relY };
        }
        else if (this.count === 1) {
            if (this.figure) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            this.pb = { x: relX, y: relY };
        }
        else if (this.count === 3) {
            this.exit();
        }
        this.count += 1;
    };
    DrawTrendChannelState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var relX = mouse.pos.x - this.board.offset.x - this.stack.offset.x;
        var relY = mouse.pos.y - this.board.offset.y - this.stack.offset.y;
        var coordX = this.stack.xToValue(relX);
        var coordY = this.stack.yToValue(relY);
        if (this.count === 2) {
            if (coordX && coordY) {
                this.figure.pointB = { uid: coordX, v: coordY };
                this.pb = { x: relX, y: relY };
            }
        }
        else if (this.count === 3 && this.pa && this.pb) {
            var y = index_5.DrawUtils.LINEAR(this.pa, this.pb, relX);
            if (this.figure) {
                this.figure.spread = y !== undefined ? relY - y : 0;
            }
        }
    };
    DrawTrendChannelState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawTrendChannelState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawTrendChannelState = DrawTrendChannelState;
var EditTrendChannelState = (function () {
    function EditTrendChannelState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditTrendChannelState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditTrendChannelState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditTrendChannelState.prototype.onMouseWheel = function (board, mouse) { };
    EditTrendChannelState.prototype.onMouseMove = function (board, mouse) {
        if (this.figure && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.figure.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditTrendChannelState.prototype.onMouseEnter = function (board, mouse) { };
    EditTrendChannelState.prototype.onMouseLeave = function (board, mouse) { };
    EditTrendChannelState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditTrendChannelState.prototype.onMouseDown = function (board, mouse) { };
    EditTrendChannelState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.figure = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditTrendChannelState.prototype.deactivate = function (board, mouse) { };
    EditTrendChannelState.prototype.exit = function (board, mouse) {
        this.figure = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditTrendChannelState;
}());
var ChannelStore = (function () {
    function ChannelStore(container) {
        this.container = container;
    }
    Object.defineProperty(ChannelStore.prototype, "spread", {
        get: function () {
            return this.container.getProperty('spread') || 0;
        },
        set: function (value) {
            this.container.setProperty('spread', value);
        },
        enumerable: true,
        configurable: true
    });
    return ChannelStore;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],88:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing triangle.
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var index_5 = require("../utils/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var TriangleFigureComponent = (function (_super) {
    __extends(TriangleFigureComponent, _super);
    function TriangleFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Triangle', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.settings = new TriangleSettings();
        _this.getTimeRange = function (ctx, size) {
            if (_this.pa.point.uid !== undefined && _this.pb.point.uid !== undefined && _this.pc.point.uid !== undefined) {
                return {
                    start: index_3.Uid.min(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid),
                    end: index_3.Uid.max(_this.pa.point.uid, _this.pb.point.uid, _this.pc.point.uid)
                };
            }
        };
        _this.getValueRange = function (ctx, size) {
            if (_this.pa.point.v !== undefined && _this.pb.point.v !== undefined && _this.pc.point.v !== undefined) {
                return {
                    start: Math.min(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v),
                    end: Math.max(_this.pa.point.v, _this.pb.point.v, _this.pc.point.v)
                };
            }
        };
        _this.timeRegion = new index_1.TimeRegionMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, settings, _this.getTimeRange);
        _this.addChild(_this.timeRegion);
        _this.valueRegion = new index_1.NumberRegionMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValueRange);
        _this.addChild(_this.valueRegion);
        _this.pa = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('a'));
        _this.pb = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('b'));
        _this.pc = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('c'));
        _this.addChild(_this.pa);
        _this.addChild(_this.pb);
        _this.addChild(_this.pc);
        return _this;
    }
    Object.defineProperty(TriangleFigureComponent.prototype, "pointA", {
        get: function () {
            return this.pa.point;
        },
        set: function (value) {
            this.pa.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TriangleFigureComponent.prototype, "pointB", {
        get: function () {
            return this.pb.point;
        },
        set: function (value) {
            this.pb.point = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TriangleFigureComponent.prototype, "pointC", {
        get: function () {
            return this.pc.point;
        },
        set: function (value) {
            this.pc.point = value;
        },
        enumerable: true,
        configurable: true
    });
    TriangleFigureComponent.prototype.isHit = function (p) {
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        return (a && b && c)
            ? (index_5.DrawUtils.IS_POINT_ON_LINE(p, a, b, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, b, c, 5)
                || index_5.DrawUtils.IS_POINT_ON_LINE(p, c, a, 5))
            : false;
    };
    TriangleFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.valueRegion.visible = selected;
        this.timeRegion.visible = selected;
    };
    TriangleFigureComponent.prototype.shift = function (dx, dy) {
        var a = this.pa.shift(dx, dy);
        var b = this.pb.shift(dx, dy);
        var c = this.pc.shift(dx, dy);
        return a || b || c;
    };
    TriangleFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var a = this.pa.getXY();
        var b = this.pb.getXY();
        var c = this.pc.getXY();
        if (a && b) {
            var canvas = this.area.frontCanvas;
            canvas.setStrokeStyle(this.settings.color);
            canvas.lineWidth = this.settings.width;
            canvas.beginPath();
            canvas.moveTo(a.x, a.y);
            canvas.lineTo(b.x, b.y);
            if (c) {
                canvas.lineTo(c.x, c.y);
                canvas.lineTo(a.x, a.y);
            }
            //canvas.closePath();
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    TriangleFigureComponent.prototype.getEditState = function () {
        return EditTriangleState.instance;
    };
    TriangleFigureComponent.prototype.getSettings = function () {
        return new index_2.SettingSet({
            name: 'line',
            group: true,
            settings: [
                {
                    name: 'color',
                    value: this.settings.color.toString(),
                    settingType: index_2.SettingType.color,
                    displayName: 'Color'
                }, {
                    name: 'width',
                    value: this.settings.width.toString(),
                    settingType: index_2.SettingType.numeric,
                    displayName: 'Width'
                }
            ]
        });
    };
    TriangleFigureComponent.prototype.setSettings = function (value) {
        this.settings.color = value.getValueOrDefault('line.color', this.settings.color);
        this.settings.width = value.getValueOrDefault('line.width', this.settings.width);
        // rerender
        //this.context.render();
    };
    return TriangleFigureComponent;
}(index_1.FigureComponent));
exports.TriangleFigureComponent = TriangleFigureComponent;
var TriangleSettings = (function () {
    function TriangleSettings() {
        this.color = '#FF0000';
        this.width = 1;
    }
    return TriangleSettings;
}());
exports.TriangleSettings = TriangleSettings;
var DrawTriangleState = (function (_super) {
    __extends(DrawTriangleState, _super);
    function DrawTriangleState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawTriangleState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawTriangleState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawTriangleState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawTriangleState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.triangle);
            this.figure.pointA = { uid: coordX, v: coordY };
            this.figure.pointB = { uid: coordX, v: coordY };
        }
        else if (this.count === 2) {
            if (this.figure) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
        else if (this.count > 2) {
            this.exit();
        }
        this.count += 1;
    };
    DrawTriangleState.prototype.setLastPoint = function (mouse) {
        if (!this.board || !this.stack || !this.figure) {
            return;
        }
        var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
        var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
        if (coordX && coordY) {
            if (this.count === 2) {
                this.figure.pointB = { uid: coordX, v: coordY };
            }
            else if (this.count === 3) {
                this.figure.pointC = { uid: coordX, v: coordY };
            }
        }
    };
    DrawTriangleState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawTriangleState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawTriangleState = DrawTriangleState;
var EditTriangleState = (function () {
    function EditTriangleState() {
        this.last = new index_4.Point();
    }
    Object.defineProperty(EditTriangleState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditTriangleState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditTriangleState.prototype.onMouseWheel = function (board, mouse) { };
    EditTriangleState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            // Change mouse x/y only if line was shifted. Ignoring "empty" movement.
            var shifted = this.line.shift(mouse.pos.x - this.last.x, mouse.pos.y - this.last.y);
            if (shifted) {
                _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
            }
        }
        else {
            _b = [mouse.pos.x, mouse.pos.y], this.last.x = _b[0], this.last.y = _b[1];
            console.debug('Edit state: line or chartStack is not found.');
        }
        var _a, _b;
    };
    EditTriangleState.prototype.onMouseEnter = function (board, mouse) { };
    EditTriangleState.prototype.onMouseLeave = function (board, mouse) { };
    EditTriangleState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditTriangleState.prototype.onMouseDown = function (board, mouse) { };
    EditTriangleState.prototype.activate = function (board, mouse, stack, activationParameters) {
        _a = [mouse.pos.x, mouse.pos.y], this.last.x = _a[0], this.last.y = _a[1];
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
        var _a;
    };
    EditTriangleState.prototype.deactivate = function (board, mouse) { };
    EditTriangleState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditTriangleState;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166,"../utils/index":175,"./FigureStateBase":90,"./PointFigureComponent":91}],89:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Classes for drawing vertical lines.
 */
var index_1 = require("../component/index");
var FigureStateBase_1 = require("./FigureStateBase");
var PointFigureComponent_1 = require("./PointFigureComponent");
var VerticalLineFigureComponent = (function (_super) {
    __extends(VerticalLineFigureComponent, _super);
    function VerticalLineFigureComponent(area, offset, size, settings, taxis, yaxis, container) {
        var _this = _super.call(this, 'Vertical Line', offset, size, container) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.p = new PointFigureComponent_1.PointFigureComponent(area, offset, size, settings, taxis, yaxis, container.getObjectProperty('p'));
        _this.addChild(_this.p);
        return _this;
    }
    Object.defineProperty(VerticalLineFigureComponent.prototype, "point", {
        get: function () {
            return this.p.point;
        },
        set: function (value) {
            this.p.point = value;
        },
        enumerable: true,
        configurable: true
    });
    VerticalLineFigureComponent.prototype.isHit = function (p) {
        if (!this.p.point.uid || !this.p.point.v) {
            return false;
        }
        var pointx = this.taxis.toX(this.p.point.uid);
        return pointx ? (p.x >= pointx - 3 && p.x <= pointx + 3) : false;
    };
    VerticalLineFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        if (this.p.point.uid && this.p.point.v) {
            var x = this.taxis.toX(this.p.point.uid);
            if (x !== undefined) {
                var canvas = this.area.frontCanvas;
                if (this.isHovered) {
                    canvas.setStrokeStyle('#FF0000');
                }
                else {
                    canvas.setStrokeStyle('#FF0000');
                }
                canvas.lineWidth = 2;
                canvas.beginPath();
                canvas.moveTo(x, 0);
                canvas.lineTo(x, this.size.height);
                canvas.stroke();
                canvas.closePath();
            }
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    VerticalLineFigureComponent.prototype.getEditState = function () {
        return EditVerticalLineState.instance;
    };
    return VerticalLineFigureComponent;
}(index_1.FigureComponent));
exports.VerticalLineFigureComponent = VerticalLineFigureComponent;
var DrawVerticalLineState = (function (_super) {
    __extends(DrawVerticalLineState, _super);
    function DrawVerticalLineState() {
        var _this = _super.call(this) || this;
        _this.count = 0;
        return _this;
    }
    Object.defineProperty(DrawVerticalLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new DrawVerticalLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    DrawVerticalLineState.prototype.activate = function (board, mouse, stack, parameters) {
        this.board = board;
        this.stack = stack;
        this.count = 0;
        _super.prototype.activate.call(this, board, mouse, stack, parameters);
    };
    DrawVerticalLineState.prototype.addPoint = function (mouse) {
        if (!this.board || !this.stack) {
            return;
        }
        if (this.count === 0) {
            this.figure = this.stack.addFigure(index_1.FigureType.vline);
            var coordX = this.stack.xToValue(mouse.pos.x - this.board.offset.x - this.stack.offset.x);
            var coordY = this.stack.yToValue(mouse.pos.y - this.board.offset.y - this.stack.offset.y);
            this.figure.point = { uid: coordX, v: coordY };
            this.exit();
        }
        this.count += 1;
    };
    DrawVerticalLineState.prototype.setLastPoint = function (mouse) { };
    DrawVerticalLineState.prototype.exit = function () {
        this.figure = undefined;
        this.stack = undefined;
        if (this.board) {
            this.board.changeState('hover');
        }
    };
    return DrawVerticalLineState;
}(FigureStateBase_1.FigureStateBase));
exports.DrawVerticalLineState = DrawVerticalLineState;
var EditVerticalLineState = (function () {
    function EditVerticalLineState() {
    }
    Object.defineProperty(EditVerticalLineState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditVerticalLineState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditVerticalLineState.prototype.onMouseMove = function (board, mouse) {
        if (this.line && this.chartStack) {
            var coordX = this.chartStack.xToValue(mouse.pos.x - board.offset.x - this.chartStack.offset.x);
            this.line.point = { uid: coordX, v: this.line.point.v };
        }
        else {
            console.debug('Edit state: line or chartStack is not found.');
        }
    };
    EditVerticalLineState.prototype.onMouseEnter = function (board, mouse) { };
    EditVerticalLineState.prototype.onMouseLeave = function (board, mouse) { };
    EditVerticalLineState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditVerticalLineState.prototype.onMouseDown = function (board, mouse) { };
    EditVerticalLineState.prototype.onMouseWheel = function (board, mouse) { };
    EditVerticalLineState.prototype.activate = function (board, mouse, stack, activationParameters) {
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.line = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
    };
    EditVerticalLineState.prototype.deactivate = function (board, mouse) { };
    EditVerticalLineState.prototype.exit = function (board, mouse) {
        this.line = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditVerticalLineState;
}());
},{"../component/index":38,"./FigureStateBase":90,"./PointFigureComponent":91}],90:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FigureStateBase = (function () {
    function FigureStateBase() {
        this.state = 0; // current state
    }
    FigureStateBase.prototype.onMouseDown = function (board, mouse, stack) {
        if (!stack) {
            throw new Error('Stack is not specified');
        }
        if (!this.stack) {
            //this.setChartStack(stack);
            this.stack = stack;
        }
        if (this.state === 0) {
            // add first point and fix it
            this.addPoint(mouse);
            this.fixPoint(mouse);
            this.state = 1;
        }
        else if (this.state === 1) {
            // ignore
        }
        else if (this.state === 2) {
            // fix last point = finish line
            this.fixPoint(mouse);
            this.state = 1;
        }
    };
    FigureStateBase.prototype.onMouseMove = function (board, mouse) {
        if (this.state === 0) {
            // hovering
        }
        else if (this.state === 1) {
            // fix last point
            this.fixPoint(mouse);
            // add new point = start drawing line
            this.addPoint(mouse);
            this.state = 2;
        }
        else if (this.state === 2) {
            // change last point
            this.setLastPoint(mouse);
        }
    };
    FigureStateBase.prototype.onMouseUp = function (board, mouse) {
        if (this.state === 0) {
            // ignore
        }
        else if (this.state === 1) {
            // point is selected
            // fix last point
            this.fixPoint(mouse);
        }
        else if (this.state === 2) {
            // line is drawn. Add new point and go
            // fix last point
            this.fixPoint(mouse);
            // add new point = start drawing line
            this.state = 1; // start another line
        }
    };
    FigureStateBase.prototype.onMouseWheel = function (board, mouse) { };
    FigureStateBase.prototype.onMouseEnter = function (board, mouse) { };
    FigureStateBase.prototype.onMouseLeave = function (board, mouse) { };
    FigureStateBase.prototype.activate = function (board, mouse, stack, parameters) {
        this.state = 0;
        //this.stackIsSet = false;
        this.stack = undefined;
    };
    FigureStateBase.prototype.deactivate = function () { };
    FigureStateBase.prototype.fixPoint = function (mouse) { };
    ;
    return FigureStateBase;
}());
exports.FigureStateBase = FigureStateBase;
},{}],91:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * PointFigureComponent class
 */
var index_1 = require("../component/index");
var index_2 = require("../core/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var PointChangedEvent = (function (_super) {
    __extends(PointChangedEvent, _super);
    function PointChangedEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PointChangedEvent;
}(index_4.Event));
exports.PointChangedEvent = PointChangedEvent;
var PointChangedArgument = (function () {
    function PointChangedArgument(p) {
        this.p = p;
    }
    Object.defineProperty(PointChangedArgument.prototype, "point", {
        get: function () {
            return this.p;
        },
        enumerable: true,
        configurable: true
    });
    return PointChangedArgument;
}());
exports.PointChangedArgument = PointChangedArgument;
var PointFigureComponent = (function (_super) {
    __extends(PointFigureComponent, _super);
    function PointFigureComponent(area, offset, size, settings, taxis, yaxis, container, pixelMode) {
        if (pixelMode === void 0) { pixelMode = false; }
        var _this = _super.call(this, 'Point', offset, size, container || new index_2.StoreContainer()) || this;
        _this.area = area;
        _this.taxis = taxis;
        _this.yaxis = yaxis;
        _this.container = container;
        _this.changedEvent = new PointChangedEvent();
        _this.getUid = function (ctx, size) {
            return _this.pixelMode ? _this.taxis.toValue(_this.pixel.x) : _this.point.uid;
        };
        _this.getValue = function (ctx, size) {
            return _this.pixelMode ? _this.yaxis.toValue(_this.pixel.y) : _this.point.v;
        };
        _this.store = new PointStore(container || new index_2.StoreContainer());
        _this.store.pixelMode = pixelMode;
        _this.valueMarker = new index_1.NumberMarker(_this.area.getYArea(), _this.offset, _this.size, yaxis, settings, _this.getValue);
        _this.addChild(_this.valueMarker);
        _this.timeMarker = new index_1.TimeMarker(_this.area.getXArea(), _this.offset, _this.size, taxis, _this.getUid);
        _this.addChild(_this.timeMarker);
        return _this;
    }
    Object.defineProperty(PointFigureComponent.prototype, "point", {
        get: function () {
            return this.store.point;
        },
        set: function (value) {
            this.store.point.uid = value.uid;
            this.store.point.v = value.v;
            this.store.setChanged();
            this.changedEvent.trigger();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointFigureComponent.prototype, "pixel", {
        get: function () {
            return this.store.pixel;
        },
        set: function (value) {
            this.store.pixel.x = value.x;
            this.store.pixel.y = value.y;
            this.changedEvent.trigger();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointFigureComponent.prototype, "pixelMode", {
        get: function () {
            return this.store.pixelMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointFigureComponent.prototype, "changed", {
        get: function () {
            return this.changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PointFigureComponent.prototype.isHit = function (p) {
        if (!this.visible) {
            return false;
        }
        if (this.pixelMode) {
            var diff = Math.sqrt((this.pixel.x - p.x) * (this.pixel.x - p.x) + (this.pixel.y - p.y) * (this.pixel.y - p.y));
            return diff < 5;
        }
        else if (this.point.uid && this.point.v) {
            var px = this.taxis.toX(this.point.uid);
            var py = this.yaxis.toX(this.point.v);
            if (px) {
                var diff = Math.sqrt((px - p.x) * (px - p.x) + (py - p.y) * (py - p.y));
                return diff < 5;
            }
        }
        return false;
    };
    PointFigureComponent.prototype.setSelected = function (selected) {
        _super.prototype.setSelected.call(this, selected);
        this.timeMarker.visible = selected;
        this.valueMarker.visible = selected;
    };
    PointFigureComponent.prototype.getXY = function () {
        if (this.pixelMode) {
            return this.pixel;
        }
        if (this.point.uid && this.point.v) {
            var x = this.taxis.toX(this.point.uid);
            var y = this.yaxis.toX(this.point.v);
            if (x !== undefined) {
                return { x: x, y: y };
            }
        }
    };
    PointFigureComponent.prototype.shift = function (dx, dy) {
        if (this.pixelMode) {
            this.pixel = { x: this.pixel.x + dx, y: this.pixel.y + dy };
        }
        else if (this.point.uid && this.point.v) {
            var origPoint = new index_2.ChartPoint(this.point.uid, this.point.v);
            var px = this.taxis.toX(this.point.uid);
            var py = this.yaxis.toX(this.point.v);
            if (px) {
                this.point = { uid: this.taxis.toValue(px + dx), v: this.yaxis.toValue(py + dy) };
            }
            return !this.store.point.equals(origPoint);
        }
        return false;
    };
    PointFigureComponent.prototype.render = function (context, renderLocator) {
        // only render on front
        if (!context.renderFront) {
            return;
        }
        var coord;
        if (this.pixelMode) {
            coord = this.pixel;
        }
        else if (this.point.uid && this.point.v) {
            coord = this.getXY();
        }
        if (coord) {
            var canvas = this.area.frontCanvas;
            canvas.lineWidth = 2;
            canvas.beginPath();
            if (this.isHovered || this.isSelected) {
                canvas.arc(coord.x, coord.y, 5, 0, 2 * Math.PI, false);
                canvas.setFillStyle('#FFFFFF');
                canvas.setStrokeStyle('#606060');
                canvas.fill();
            }
            else {
                canvas.setStrokeStyle('#C9001D');
            }
            canvas.stroke();
        }
        _super.prototype.render.call(this, context, renderLocator);
    };
    PointFigureComponent.prototype.getCreateState = function () {
        throw new Error('Operation is not supported');
    };
    PointFigureComponent.prototype.getEditState = function () {
        return EditPointState.instance;
    };
    return PointFigureComponent;
}(index_1.FigureComponent));
exports.PointFigureComponent = PointFigureComponent;
var EditPointState = (function () {
    function EditPointState() {
    }
    Object.defineProperty(EditPointState, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new EditPointState();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    EditPointState.prototype.onMouseMove = function (board, mouse) {
        if (this.point && this.chartStack) {
            var relX = mouse.pos.x - board.offset.x - this.chartStack.offset.x;
            var relY = mouse.pos.y - board.offset.y - this.chartStack.offset.y;
            if (this.point.pixelMode) {
                this.point.pixel = { x: relX, y: relY };
            }
            else {
                var coordX = this.chartStack.xToValue(relX);
                var coordY = this.chartStack.yToValue(relY);
                this.point.point = { uid: coordX, v: coordY };
            }
        }
        else {
            console.debug('Edit state: line or chartStack is not found.');
        }
    };
    EditPointState.prototype.onMouseEnter = function (board, mouse) { };
    EditPointState.prototype.onMouseLeave = function (board, mouse) { };
    EditPointState.prototype.onMouseUp = function (board, mouse) {
        this.exit(board, mouse);
    };
    EditPointState.prototype.onMouseDown = function (board, mouse) { };
    EditPointState.prototype.onMouseWheel = function (board, mouse) { };
    EditPointState.prototype.activate = function (board, mouse, stack, activationParameters) {
        this.chartStack = stack;
        if (activationParameters && activationParameters['component']) {
            this.point = activationParameters['component'];
        }
        else {
            throw new Error('Editable component is not specified for edit.');
        }
    };
    EditPointState.prototype.deactivate = function (board, mouse) { };
    EditPointState.prototype.exit = function (board, mouse) {
        this.point = undefined;
        this.chartStack = undefined;
        board.changeState('hover');
    };
    return EditPointState;
}());
var PointStore = (function () {
    function PointStore(container) {
        this.container = container;
        // ensure values are initialized
        var dto = container.getObjectProperty('point');
        var uid = dto.getObjectProperty('uid');
        var modelUid = new index_3.Uid(uid.getProperty('t'), uid.getProperty('n'));
        var model = dto ? new index_2.ChartPoint(modelUid, dto.getProperty('v')) : new index_2.ChartPoint();
        container.setProperty('point', model);
        container.setProperty('pixel', new index_4.Point());
    }
    Object.defineProperty(PointStore.prototype, "point", {
        get: function () {
            return this.container.getProperty('point');
        },
        set: function (value) {
            this.container.setProperty('point', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointStore.prototype, "pixel", {
        get: function () {
            return this.container.getProperty('pixel');
        },
        set: function (value) {
            this.container.setProperty('pixel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PointStore.prototype, "pixelMode", {
        get: function () {
            return this.container.getProperty('pixelmode');
        },
        set: function (value) {
            this.container.setProperty('pixelmode', value);
        },
        enumerable: true,
        configurable: true
    });
    PointStore.prototype.setChanged = function () {
        this.container.setChanged();
    };
    return PointStore;
}());
},{"../component/index":38,"../core/index":53,"../model/index":142,"../shared/index":166}],92:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var DrawCurveState_1 = require("./DrawCurveState");
exports.CurveFigureComponent = DrawCurveState_1.CurveFigureComponent;
exports.DrawCurveState = DrawCurveState_1.DrawCurveState;
var DrawDateRangeState_1 = require("./DrawDateRangeState");
exports.DateRangeFigureComponent = DrawDateRangeState_1.DateRangeFigureComponent;
exports.DrawDateRangeState = DrawDateRangeState_1.DrawDateRangeState;
var DrawEllipseState_1 = require("./DrawEllipseState");
exports.DrawEllipseState = DrawEllipseState_1.DrawEllipseState;
exports.EllipseFigureComponent = DrawEllipseState_1.EllipseFigureComponent;
var DrawFiboFanState_1 = require("./DrawFiboFanState");
exports.DrawFiboFanState = DrawFiboFanState_1.DrawFiboFanState;
exports.FiboFanFigureComponent = DrawFiboFanState_1.FiboFanFigureComponent;
var DrawFiboLevelState_1 = require("./DrawFiboLevelState");
exports.DrawFiboLevelState = DrawFiboLevelState_1.DrawFiboLevelState;
exports.FiboLevelFigureComponent = DrawFiboLevelState_1.FiboLevelFigureComponent;
var DrawFiboProjectionState_1 = require("./DrawFiboProjectionState");
exports.DrawFiboProjectionState = DrawFiboProjectionState_1.DrawFiboProjectionState;
exports.FiboProjectionFigureComponent = DrawFiboProjectionState_1.FiboProjectionFigureComponent;
var DrawFiboTimeProjectionState_1 = require("./DrawFiboTimeProjectionState");
exports.DrawFiboTimeProjectionState = DrawFiboTimeProjectionState_1.DrawFiboTimeProjectionState;
exports.FiboTimeProjectionFigureComponent = DrawFiboTimeProjectionState_1.FiboTimeProjectionFigureComponent;
var DrawGannFanState_1 = require("./DrawGannFanState");
exports.DrawGannFanState = DrawGannFanState_1.DrawGannFanState;
exports.GannFanFigureComponent = DrawGannFanState_1.GannFanFigureComponent;
var DrawHorizontalLineState_1 = require("./DrawHorizontalLineState");
exports.DrawHorizontalLineState = DrawHorizontalLineState_1.DrawHorizontalLineState;
exports.HorizontalLineFigureComponent = DrawHorizontalLineState_1.HorizontalLineFigureComponent;
var DrawLineState_1 = require("./DrawLineState");
exports.DrawLineState = DrawLineState_1.DrawLineState;
exports.LineFigureComponent = DrawLineState_1.LineFigureComponent;
var DrawOhlcProjState_1 = require("./DrawOhlcProjState");
exports.DrawOhlcProjState = DrawOhlcProjState_1.DrawOhlcProjState;
exports.OhlcProjFigureComponent = DrawOhlcProjState_1.OhlcProjFigureComponent;
var DrawPathState_1 = require("./DrawPathState");
exports.DrawPathState = DrawPathState_1.DrawPathState;
exports.PathFigureComponent = DrawPathState_1.PathFigureComponent;
var DrawPitchforkState_1 = require("./DrawPitchforkState");
exports.DrawPitchforkState = DrawPitchforkState_1.DrawPitchforkState;
exports.PitchforkFigureComponent = DrawPitchforkState_1.PitchforkFigureComponent;
var DrawRectState_1 = require("./DrawRectState");
exports.DrawRectState = DrawRectState_1.DrawRectState;
exports.RectFigureComponent = DrawRectState_1.RectFigureComponent;
var DrawTextState_1 = require("./DrawTextState");
exports.DrawTextState = DrawTextState_1.DrawTextState;
exports.TextFigureComponent = DrawTextState_1.TextFigureComponent;
var DrawTrendChannelState_1 = require("./DrawTrendChannelState");
exports.DrawTrendChannelState = DrawTrendChannelState_1.DrawTrendChannelState;
exports.TrendChannelFigureComponent = DrawTrendChannelState_1.TrendChannelFigureComponent;
var DrawTriangleState_1 = require("./DrawTriangleState");
exports.DrawTriangleState = DrawTriangleState_1.DrawTriangleState;
exports.TriangleFigureComponent = DrawTriangleState_1.TriangleFigureComponent;
var DrawVerticalLineState_1 = require("./DrawVerticalLineState");
exports.DrawVerticalLineState = DrawVerticalLineState_1.DrawVerticalLineState;
exports.VerticalLineFigureComponent = DrawVerticalLineState_1.VerticalLineFigureComponent;
var PointFigureComponent_1 = require("./PointFigureComponent");
exports.PointFigureComponent = PointFigureComponent_1.PointFigureComponent;
},{"./DrawCurveState":72,"./DrawDateRangeState":73,"./DrawEllipseState":74,"./DrawFiboFanState":75,"./DrawFiboLevelState":76,"./DrawFiboProjectionState":77,"./DrawFiboTimeProjectionState":78,"./DrawGannFanState":79,"./DrawHorizontalLineState":80,"./DrawLineState":81,"./DrawOhlcProjState":82,"./DrawPathState":83,"./DrawPitchforkState":84,"./DrawRectState":85,"./DrawTextState":86,"./DrawTrendChannelState":87,"./DrawTriangleState":88,"./DrawVerticalLineState":89,"./PointFigureComponent":91}],93:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var DMIIndicator_1 = require("./DMIIndicator");
var MovingAverage_1 = require("./MovingAverage");
// export class ADXCandlestick extends CandlestickExt {
//     /** 
//      * Smoothed TR
//      */
//     public TRA: number | undefined;
//     /**
//      * Smoothed +DM
//      */
//     public pDMA: number | undefined;
//     /**
//      * Smoothed -DM
//      */
//     public mDMA: number | undefined;
//     public DX: number | undefined;
// }
var ADXCandlestick = (function (_super) {
    __extends(ADXCandlestick, _super);
    function ADXCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ADXCandlestick.prototype.toString = function (precision) {
        return 'ADX: '
            + ("" + (this.c !== undefined ? this.c.toFixed(precision) : 'n/a'));
    };
    return ADXCandlestick;
}(DMIIndicator_1.DMICandlestick));
exports.ADXCandlestick = ADXCandlestick;
var ADXIndicator = (function (_super) {
    __extends(ADXIndicator, _super);
    function ADXIndicator(source, context) {
        var _this = _super.call(this, source, context) || this;
        _this.name = 'ADX';
        _this.adxma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.ADX);
        // ADX requires TR, +DM, -DM
        _this.source.addExtension(index_1.TrueRangeExtension.uname, new index_1.TrueRangeExtension());
        _this.source.addExtension(index_1.UpDirectionalMovementExtension.uname, new index_1.UpDirectionalMovementExtension());
        _this.source.addExtension(index_1.DownDirectionalMovementExtension.uname, new index_1.DownDirectionalMovementExtension());
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    ADXIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var lastComputed = computedArray.lastOrDefault();
        var computedDMI = _super.prototype.computeOne.call(this, sourceItems, computedArray, accessor);
        // Copy values from computed DMI
        var computed = new ADXCandlestick(computedDMI.date);
        computed.uidOrig.t = computedDMI.uid.t;
        computed.uidOrig.n = computedDMI.uid.n;
        computed.TRA = computedDMI.TRA;
        computed.pDMA = computedDMI.pDMA;
        computed.mDMA = computedDMI.mDMA;
        computed.DX = computedDMI.c;
        // Compute ADX
        var lastComputedADX = lastComputed !== undefined ? lastComputed.c : undefined;
        computed.c = this.adxma.compute(N, computedArray, function (item) { return item.DX; }, computed, lastComputedADX);
        computed.h = computed.c;
        computed.l = computed.c;
        return computed;
    };
    ADXIndicator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    ADXIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return ADXIndicator;
}(DMIIndicator_1.DMIIndicator));
exports.ADXIndicator = ADXIndicator;
},{"../compute/index":40,"../core/index":53,"./DMIIndicator":103,"./MovingAverage":112}],94:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// ATR = (ATR prev x (n - 1) + TR) / n
var ATRIndicator = (function (_super) {
    __extends(ATRIndicator, _super);
    function ATRIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'ATR';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.ADX);
        // ADX requires TR
        _this.source.addExtension(index_1.TrueRangeExtension.uname, new index_1.TrueRangeExtension());
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    ATRIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        // const value = this.accessor(source);
        // if (value !== undefined) {
        var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
        computed.c = this.ma.compute(N, sourceItems, function (c) { return c.ext['tr']; }, undefined, lastComputedValue);
        computed.h = computed.c;
        computed.l = computed.c;
        //}
        return computed;
    };
    ATRIndicator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    ATRIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return ATRIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.ATRIndicator = ATRIndicator;
},{"../compute/index":40,"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],95:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../model/index");
var index_4 = require("../render/index");
var index_5 = require("../shared/index");
var MovingAverage_1 = require("./MovingAverage");
var ValueAccessor_1 = require("./ValueAccessor");
var TripleCandlestick = (function (_super) {
    __extends(TripleCandlestick, _super);
    function TripleCandlestick(date, c, o, h, l) {
        var _this = _super.call(this, date, c, o, h, l) || this;
        _this.jaw = new index_3.Candlestick(date);
        _this.teeth = new index_3.Candlestick(date);
        _this.lips = new index_3.Candlestick(date);
        return _this;
    }
    TripleCandlestick.prototype.toString = function (precision) {
        return "" + (this.jaw && this.jaw.c !== undefined ? this.jaw.c.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.teeth && this.teeth.c !== undefined ? this.teeth.c.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.lips && this.lips.c !== undefined ? this.lips.c.toFixed(precision) : 'n/a'));
    };
    return TripleCandlestick;
}(index_3.Candlestick));
exports.TripleCandlestick = TripleCandlestick;
var AlligatorIndicator = (function (_super) {
    __extends(AlligatorIndicator, _super);
    function AlligatorIndicator(source, context) {
        var _this = _super.call(this, TripleCandlestick, source, context) || this;
        _this.name = 'alligator';
        return _this;
    }
    AlligatorIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the unde (update data from current place to end)
        // Generate future time when shift indicator values
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(ValueAccessor_1.ValueAccessorType.close);
        var N = 13;
        var fsarray = new index_5.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        // Get source data without loading
        var iterator = this.source.getIterator();
        // Select last source values
        if (arg) {
            if (!iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                throw new Error('Source does not contain updated data');
            }
            var prev = index_2.IndicatorDataSource.getPreviousItems(iterator, N - 1);
            fsarray.pushRange(prev);
        }
        var prevJaw;
        var prevTeeth;
        var prevLips;
        // Get latest moving average from storage. As result will be shifted the last MA we are taking is also shifted.
        if (arg) {
            var iter = this.dataStorage.getIterator();
            if (iter.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                if (iter.moveTimes(3) === 3) {
                    prevLips = iter.current.lips.c;
                    if (iter.moveTimes(2) === 2) {
                        prevTeeth = iter.current.teeth.c;
                        if (iter.moveTimes(3) === 3) {
                            prevJaw = iter.current.jaw.c;
                        }
                    }
                }
            }
        }
        // Go to first element
        if (arg) {
            iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!iterator.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // generate jaw: array[]
        // generate teeth: array[]
        // generate lips: array[]
        // 
        var jaw = [];
        var teeth = [];
        var lips = [];
        var ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Smoothed);
        var firstUid = iterator.current.uid;
        var lastUid;
        do {
            lastUid = iterator.current.uid;
            var source = iterator.current;
            fsarray.push(source);
            var j = new index_3.Candlestick(source.date);
            j.uid.t = source.uid.t;
            j.uid.n = source.uid.n;
            var t = new index_3.Candlestick(source.date);
            t.uid.t = source.uid.t;
            t.uid.n = source.uid.n;
            var l = new index_3.Candlestick(source.date);
            l.uid.t = source.uid.t;
            l.uid.n = source.uid.n;
            if (source.c !== undefined) {
                j.c = ma.compute(13, fsarray, accessor, undefined, prevJaw);
                prevJaw = j.c;
                t.c = ma.compute(8, fsarray, accessor, undefined, prevTeeth);
                prevTeeth = t.c;
                l.c = ma.compute(5, fsarray, accessor, undefined, prevLips);
                prevLips = l.c;
                j.h = j.c;
                j.l = j.c;
                t.h = t.c;
                t.l = t.c;
                l.h = l.c;
                l.l = l.c;
            }
            jaw.push(j);
            teeth.push(t);
            lips.push(l);
        } while (iterator.moveNext());
        // Shift all / Shift UID AND TIME. Merging will be done with UID, so UID should stay on the same place.
        // ... Add X bars in the future
        // ... copy data to right
        // ... 
        // jaw shift by 8 bars  
        // teeth shift by 5 bars
        // lips shift by 3 bars
        // Make fake candles on the right side.
        var lastDate = jaw[jaw.length - 1].date;
        for (var i = 0; i < 8; i += 1) {
            lastDate = this.addInterval(lastDate, 1);
            var fake = new index_3.Candlestick(lastDate);
            //fake.uid.t = lastDate.getTime().toString();
            jaw.push(fake);
        }
        lastDate = teeth[teeth.length - 1].date;
        for (var i = 0; i < 5; i += 1) {
            lastDate = this.addInterval(lastDate, 1);
            var fake = new index_3.Candlestick(lastDate);
            //fake.uid = lastDate.getTime().toString();
            teeth.push(fake);
        }
        lastDate = lips[lips.length - 1].date;
        for (var i = 0; i < 3; i += 1) {
            lastDate = this.addInterval(lastDate, 1);
            var fake = new index_3.Candlestick(lastDate);
            //fake.uid = lastDate.getTime().toString();
            lips.push(fake);
        }
        // Shift values
        this.shift(jaw, 8);
        this.shift(teeth, 5);
        this.shift(lips, 3);
        // Remove first items as they are empty
        jaw.splice(0, 8);
        teeth.splice(0, 5);
        lips.splice(0, 3);
        // merge all 3 to one. Custom merge one by one, not all 3 together. Because of their different relative shift.
        this.mergeLine(jaw, 0);
        this.mergeLine(teeth, 1);
        this.mergeLine(lips, 2);
        // Merge new data and notify subscribers
        return new index_2.DataChangedArgument(firstUid, lastUid, jaw.length);
    };
    AlligatorIndicator.prototype.mergeLine = function (array, line) {
        // Prepare TripleCandlestick array
        var triple = [];
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var item = array_1[_i];
            var t = new TripleCandlestick(item.date);
            switch (line) {
                case 0:
                    t.jaw = item;
                    break;
                case 1:
                    t.teeth = item;
                    break;
                case 2:
                    t.lips = item;
                    break;
                default: throw new Error('unexpected type');
            }
            t.uid.t = item.uid.t;
            t.uid.n = item.uid.n;
            //t.c = item.c;
            t.h = item.h;
            t.l = item.l;
            triple.push(t);
        }
        // Merge each part separately
        this.dataStorage.merge(triple, function (target, update) {
            switch (line) {
                case 0:
                    target.jaw = update.jaw;
                    break;
                case 1:
                    target.teeth = update.teeth;
                    break;
                case 2:
                    target.lips = update.lips;
                    break;
                default: throw new Error('unexpected type');
            }
            if ((target.h !== undefined && update.h !== undefined && target.h < update.h)
                || (target.h === undefined && update.h !== undefined)) {
                target.h = update.h;
            }
            if ((target.l !== undefined && update.l !== undefined && target.l > update.l)
                || (target.l === undefined && update.l !== undefined)) {
                target.l = update.l;
            }
            return target;
        });
    };
    AlligatorIndicator.prototype.shift = function (array, n) {
        for (var i = array.length - 1; i >= n; i -= 1) {
            array[i].c = array[i - n].c;
            array[i].o = array[i - n].o;
            array[i].h = array[i - n].h;
            array[i].l = array[i - n].l;
        }
    };
    return AlligatorIndicator;
}(index_2.IndicatorDataSource));
exports.AlligatorIndicator = AlligatorIndicator;
var AlligatorIndicatorRenderer = (function () {
    //private static inst?: AlligatorIndicatorRenderer;
    function AlligatorIndicatorRenderer() {
    }
    // public static get instance(): AlligatorIndicatorRenderer {
    //     if (!this.inst) {
    //         this.inst = new AlligatorIndicatorRenderer();
    //     }
    //     return this.inst;
    // }
    AlligatorIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Render
        //
        // border lines
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // ... left
        canvas.moveTo(frame.x, frame.y);
        canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // ... bottom
        canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // ... right
        canvas.lineTo(frame.x + frame.w - 1, frame.y);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#0026FF');
        // Jaw
        index_4.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof TripleCandlestick) {
                var triple = item;
                if (triple.jaw && triple.jaw.c !== undefined) {
                    var value = triple.jaw.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#FF0800');
        // Teeth
        index_4.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof TripleCandlestick) {
                var triple = item;
                if (triple.teeth && triple.teeth.c !== undefined) {
                    var value = triple.teeth.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#399F16');
        // Lips
        index_4.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof TripleCandlestick) {
                var triple = item;
                if (triple.lips && triple.lips.c !== undefined) {
                    var value = triple.lips.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    AlligatorIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    AlligatorIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('visual');
    };
    AlligatorIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return AlligatorIndicatorRenderer;
}());
exports.AlligatorIndicatorRenderer = AlligatorIndicatorRenderer;
},{"../core/index":53,"../data/index":71,"../model/index":142,"../render/index":162,"../shared/index":166,"./MovingAverage":112,"./ValueAccessor":132}],96:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var index_3 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
var DoubleCandlestick = (function (_super) {
    __extends(DoubleCandlestick, _super);
    function DoubleCandlestick(date, c, o, h, l) {
        var _this = _super.call(this, date, c, o, h, l) || this;
        _this.up = new index_2.Candlestick(date);
        _this.down = new index_2.Candlestick(date);
        return _this;
    }
    DoubleCandlestick.prototype.toString = function (precision) {
        return "" + (this.up && this.up.c !== undefined ? this.up.c.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.down && this.down.c !== undefined ? this.down.c.toFixed(precision) : 'n/a'));
    };
    return DoubleCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DoubleCandlestick = DoubleCandlestick;
var AroonIndicator = (function (_super) {
    __extends(AroonIndicator, _super);
    function AroonIndicator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.name = 'ARO';
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    AroonIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        return computeAroon(sourceItems, this.settings.period);
    };
    AroonIndicator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    AroonIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('upperthreshold', new index_1.SettingSet({
            name: 'upperthreshold',
            value: this.settings.upperThreshold.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Upper threshold'
        }));
        group.setSetting('lowerthreshold', new index_1.SettingSet({
            name: 'lowerthreshold',
            value: this.settings.lowerThreshold.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Lower threshold'
        }));
        return group;
    };
    AroonIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var upperthreshold = value.getSetting('datasource.upperthreshold');
        this.settings.upperThreshold =
            (upperthreshold && upperthreshold.value) ? parseInt(upperthreshold.value, 10) : this.settings.upperThreshold;
        var lowerthreshold = value.getSetting('datasource.lowerthreshold');
        this.settings.lowerThreshold =
            (lowerthreshold && lowerthreshold.value) ? parseInt(lowerthreshold.value, 10) : this.settings.lowerThreshold;
        // recompute
        this.compute();
    };
    return AroonIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.AroonIndicator = AroonIndicator;
var AroonOscillator = (function (_super) {
    __extends(AroonOscillator, _super);
    function AroonOscillator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.name = 'AOS';
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    AroonOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        return computeAroon(sourceItems, this.settings.period);
    };
    AroonOscillator.prototype.getValuesRange = function (range) {
        return { start: -100, end: 100 };
    };
    AroonOscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    AroonOscillator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return AroonOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.AroonOscillator = AroonOscillator;
var AroonIndicatorRenderer = (function (_super) {
    __extends(AroonIndicatorRenderer, _super);
    function AroonIndicatorRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AroonIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        var zonevisible = this.settings.zone.visible;
        var fill = this.settings.zone.fill;
        var fillcolor = this.settings.zone.fillcolor;
        var showthreshold = this.settings.zone.showthreshold;
        var upthreshold = this.settings.zone.upthreshold;
        var lowthreshold = this.settings.zone.lowthreshold;
        var upper = yAxis.toX(upthreshold);
        var lower = yAxis.toX(lowthreshold);
        // Fill area b/w top and bottom zone lines
        if (zonevisible && fill) {
            canvas.setFillStyle(fillcolor);
            canvas.fillRect(frame.x, Math.min(upper, lower), frame.x + frame.w, Math.abs(upper - lower));
        }
        // Draw zone lines
        if (zonevisible && showthreshold) {
            canvas.beginPath();
            canvas.setStrokeStyle(this.settings.zone.tlinecolor);
            canvas.setLineDash(index_3.RenderUtils.PATTERN2SEG(this.settings.zone.tlinepattern));
            canvas.lineWidth = this.settings.zone.tlinewidth;
            canvas.moveTo(frame.x, upper);
            canvas.lineTo(frame.x + frame.w, upper);
            canvas.stroke();
            canvas.beginPath();
            canvas.setStrokeStyle(this.settings.zone.blinecolor);
            canvas.setLineDash(index_3.RenderUtils.PATTERN2SEG(this.settings.zone.blinepattern));
            canvas.lineWidth = this.settings.zone.blinewidth;
            canvas.moveTo(frame.x, lower);
            canvas.lineTo(frame.x + frame.w, lower);
            canvas.stroke();
        }
        canvas.beginPath();
        canvas.setStrokeStyle('#FF5900');
        canvas.setLineDash([]);
        canvas.lineWidth = 1;
        // Up
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var d = item;
                if (d && d.up && d.up.c !== undefined) {
                    var value = d.up.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#3D5AFF');
        // Down
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var d = item;
                if (d && d.down && d.down.c !== undefined) {
                    var value = d.down.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    AroonIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    AroonIndicatorRenderer.prototype.getSettings = function () {
        var zone = _super.prototype.getZonesSettings.call(this);
        var visual = new index_1.SettingSet('visual');
        visual.setSetting('zones', zone);
        return visual;
    };
    AroonIndicatorRenderer.prototype.setSettings = function (settings) {
        var zone = settings.getSetting('visual.zones');
        if (zone) {
            _super.prototype.setZonesSettings.call(this, zone);
        }
    };
    return AroonIndicatorRenderer;
}(index_3.ChartRenderer));
exports.AroonIndicatorRenderer = AroonIndicatorRenderer;
function computeAroon(sourceItems, period) {
    var N = period;
    var source = sourceItems.last();
    var computed = new DoubleCandlestick(source.date);
    computed.uidOrig.t = source.uid.t;
    computed.uidOrig.n = source.uid.n;
    var indexOfHighest = sourceItems.maxIndex(function (item) { return item.h; });
    var indexOfLowest = sourceItems.minIndex(function (item) { return item.l; });
    if (indexOfHighest >= 0) {
        var daySince = sourceItems.length - (indexOfHighest + 1);
        var indicator = 100 * (N - daySince) / N;
        computed.up.c = indicator;
        computed.up.h = indicator;
        computed.up.l = indicator;
    }
    if (indexOfLowest >= 0) {
        var daySince = sourceItems.length - (indexOfLowest + 1);
        var indicator = 100 * (N - daySince) / N;
        computed.down.c = indicator;
        computed.down.h = indicator;
        computed.down.l = indicator;
    }
    // Aroon oscillator = Aroon-Up - Aroon-Down
    if (computed.up.c !== undefined && computed.down.c !== undefined) {
        computed.c = computed.up.c - computed.down.c;
        computed.h = computed.c;
        computed.l = computed.c;
    }
    return computed;
}
},{"../core/index":53,"../model/index":142,"../render/index":162,"./CandlestickExt":100,"./SimpleIndicator":125}],97:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../model/index");
var index_4 = require("../render/index");
var index_5 = require("../shared/index");
var MovingAverage_1 = require("./MovingAverage");
var Utils_1 = require("./Utils");
var ValueAccessor_1 = require("./ValueAccessor");
var TripleCandlestick = (function (_super) {
    __extends(TripleCandlestick, _super);
    function TripleCandlestick(date, c, o, h, l) {
        var _this = _super.call(this, date, c, o, h, l) || this;
        _this.top = new index_3.Candlestick(date);
        _this.middle = new index_3.Candlestick(date);
        _this.bottom = new index_3.Candlestick(date);
        return _this;
    }
    TripleCandlestick.prototype.toString = function (precision) {
        return "" + (this.top && this.top.c !== undefined ? this.top.c.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.middle && this.middle.c !== undefined ? this.middle.c.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.bottom && this.bottom.c !== undefined ? this.bottom.c.toFixed(precision) : 'n/a'));
    };
    return TripleCandlestick;
}(index_3.Candlestick));
exports.TripleCandlestick = TripleCandlestick;
var BollingerIndicator = (function (_super) {
    __extends(BollingerIndicator, _super);
    function BollingerIndicator(source, context) {
        var _this = _super.call(this, TripleCandlestick, source, context) || this;
        _this.name = 'bollinger';
        return _this;
    }
    BollingerIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(ValueAccessor_1.ValueAccessorType.close);
        var N = 20;
        var K = 2;
        var fsarray = new index_5.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        // Get source data without loading
        var iterator = this.source.getIterator();
        // Select last source values
        if (arg) {
            if (!iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                throw new Error('Source does not contain updated data');
            }
            var prev = index_2.IndicatorDataSource.getPreviousItems(iterator, N - 1);
            fsarray.pushRange(prev);
        }
        // Get latest moving average from storage
        var prevMA;
        if (arg) {
            var iter = this.dataStorage.getIterator();
            if (iter.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; }) && iter.movePrev()) {
                prevMA = iter.current.middle.c;
            }
        }
        // Go to first element
        if (arg) {
            iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!iterator.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // 
        var computedArray = [];
        var ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Smoothed);
        var firstUid = iterator.current.uid;
        var lastUid;
        do {
            lastUid = iterator.current.uid;
            var source = iterator.current;
            var value = accessor(source);
            var computed = new TripleCandlestick(source.date);
            computed.uid.t = source.uid.t;
            computed.uid.n = source.uid.n;
            fsarray.push(source);
            if (value !== undefined) {
                computed.middle.c = ma.compute(N, fsarray, accessor, undefined, prevMA);
                computed.middle.h = computed.middle.c;
                computed.middle.l = computed.middle.c;
                if (computed.middle.c !== undefined) {
                    // After moving avg is computed, current value can be pushed to array, to calculate std deviation.
                    var standardDeviation = Utils_1.Utils.STDDEV(fsarray, accessor, computed.middle.c);
                    if (standardDeviation !== undefined) {
                        computed.top.c = computed.middle.c + K * standardDeviation;
                        computed.top.h = computed.top.c;
                        computed.top.l = computed.middle.c;
                        computed.bottom.c = computed.middle.c - K * standardDeviation;
                        computed.bottom.h = computed.bottom.c;
                        computed.bottom.l = computed.bottom.c;
                        computed.h = Math.max(computed.top.h, computed.bottom.h, computed.middle.h !== undefined ? computed.middle.h : Number.NEGATIVE_INFINITY);
                        computed.l = Math.min(computed.top.l, computed.bottom.l, computed.middle.l || Number.POSITIVE_INFINITY);
                        prevMA = computed.middle.c;
                    }
                }
            }
            computedArray.push(computed);
        } while (iterator.moveNext());
        // Merge
        this.dataStorage.merge(computedArray);
        // Merge new data and notify subscribers
        return new index_2.DataChangedArgument(firstUid, lastUid, computedArray.length);
    };
    return BollingerIndicator;
}(index_2.IndicatorDataSource));
exports.BollingerIndicator = BollingerIndicator;
var BollingerIndicatorRenderer = (function () {
    function BollingerIndicatorRenderer() {
    }
    BollingerIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Collect charts points
        //
        var top = [];
        top.length = timeAxis.count; // preallocate memory
        var i = 0;
        index_4.RenderUtils.iterate(timeAxis, data, function (item, x) {
            if (item instanceof TripleCandlestick) {
                var t = item;
                if (t && t.top && t.top.c !== undefined) {
                    var y = yAxis.toX(t.top.c);
                    top[i] = { x: x, y: y };
                    i += 1;
                }
            }
        });
        var bottom = [];
        bottom.length = timeAxis.count; // preallocate memory
        var j = 0;
        index_4.RenderUtils.iterate(timeAxis, data, function (item, x) {
            if (item instanceof TripleCandlestick) {
                var t = item;
                if (t && t.bottom && t.bottom.c !== undefined) {
                    var y = yAxis.toX(t.bottom.c);
                    bottom[j] = { x: x, y: y };
                    j += 1;
                }
            }
        });
        // Fill area between lines
        canvas.beginPath();
        top.forEach(function (p, index) {
            if (p) {
                (index === 0) ? canvas.moveTo(p.x, p.y) : canvas.lineTo(p.x, p.y);
            }
        });
        for (var k = bottom.length - 1; k >= 0; k -= 1) {
            var p = bottom[k];
            if (p) {
                canvas.lineTo(p.x, p.y);
            }
        }
        canvas.closePath();
        canvas.setFillStyle('rgba(0, 100, 150, 0.3)');
        canvas.fill();
        // Lines
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // Middle
        index_4.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof TripleCandlestick) {
                var triple = item;
                if (triple.middle && triple.middle.c !== undefined) {
                    var value = triple.middle.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Top
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#0400FF');
        top.forEach(function (p, index) {
            if (p) {
                (index === 0) ? canvas.moveTo(p.x, p.y) : canvas.lineTo(p.x, p.y);
            }
        });
        canvas.stroke();
        // Bottom
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#0400FF');
        bottom.forEach(function (p, index) {
            if (p) {
                (index === 0) ? canvas.moveTo(p.x, p.y) : canvas.lineTo(p.x, p.y);
            }
        });
        canvas.stroke();
    };
    BollingerIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    BollingerIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    BollingerIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return BollingerIndicatorRenderer;
}());
exports.BollingerIndicatorRenderer = BollingerIndicatorRenderer;
},{"../core/index":53,"../data/index":71,"../model/index":142,"../render/index":162,"../shared/index":166,"./MovingAverage":112,"./Utils":130,"./ValueAccessor":132}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var Utils_1 = require("./Utils");
var ValueAccessor_1 = require("./ValueAccessor");
// CCI = (1/0.015) * (Pt - SMA(Pt)) / Deviation(Pt),
//    Pt - typical price
//    Deviation - Mean absolute deviation
var CCICandlestick = (function (_super) {
    __extends(CCICandlestick, _super);
    function CCICandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CCICandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.CCICandlestick = CCICandlestick;
var CCIOscillator = (function (_super) {
    __extends(CCIOscillator, _super);
    function CCIOscillator(source, context) {
        var _this = _super.call(this, CCICandlestick, source, context) || this;
        _this.name = 'CCI';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        // Set default settings
        _this.settings.period = 20;
        _this.settings.valueType = ValueAccessor_1.ValueAccessorType.hlc3;
        return _this;
    }
    CCIOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CCICandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            // Compute SMA
            var lastComputedSMA = lastComputed !== undefined ? lastComputed.SMA : undefined;
            computed.SMA = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedSMA);
            if (computed.SMA !== undefined) {
                // Compute deviation around SMA.
                var mad = Utils_1.Utils.MAD(N, sourceItems, accessor, computed.SMA);
                if (mad !== undefined) {
                    // Compute CCI
                    computed.c = (value - computed.SMA) / (0.015 * mad);
                    computed.h = computed.c;
                    computed.l = computed.c;
                }
            }
        }
        return computed;
    };
    CCIOscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    CCIOscillator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return CCIOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.CCIOscillator = CCIOscillator;
},{"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./Utils":130,"./ValueAccessor":132}],99:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var ValueAccessor_1 = require("./ValueAccessor");
// Variance(P) = AVG(P2) - AVG(P) * AVG(P)
// Variance(S) = AVG(S2) - AVG(S) * AVG(S)
// Covariance(P,S) = AVG(P x S) - AVG(P) x AVG(S)
// Correlation(P,S) = Covariance(P,S) / SQRT(Variance(P) x Variance(S))
var CORCandlestick = (function (_super) {
    __extends(CORCandlestick, _super);
    function CORCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CORCandlestick.prototype.toString = function (precision) {
        return "" + (this.c !== undefined ? this.c.toFixed(precision) : 'n/a');
    };
    return CORCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.CORCandlestick = CORCandlestick;
var CORIndicator = (function (_super) {
    __extends(CORIndicator, _super);
    function CORIndicator(source, context) {
        var _this = _super.call(this, CORCandlestick, source, context) || this;
        _this.extsettings = new CORSettings();
        _this.name = 'COR';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        return _this;
    }
    CORIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(this.extsettings.valueType);
        var computedArray = [];
        var N = this.extsettings.period;
        var sourceItems = new index_4.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        var compareItems = new index_4.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        var computedItems = new index_4.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        // Get compare data souce
        var compareIter;
        if (this.extsettings.uid) {
            var compareDataSource = this.context.register.getItem(this.extsettings.uid);
            if (compareDataSource) {
                compareIter = compareDataSource.getIterator();
            }
        }
        // If can't get compare data source return
        if (!compareIter) {
            return;
        }
        // Get source data without loading
        var sourceIter = this.source.getIterator();
        // Select last source items and compare items
        if (arg) {
            if (!sourceIter.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                throw new Error('Source does not contain updated data');
            }
            //--------------------------------------------------
            var prev_1 = [];
            var prevCompare_1 = [];
            sourceIter.somebackward(function (item, counter) {
                if (counter > N) {
                    return false;
                }
                if (counter > 0) {
                    prev_1.push(item);
                    if (compareIter && compareIter.goTo(function (citem) { return item.uid.compare(citem.uid) === 0; })) {
                        prevCompare_1.push(compareIter.current);
                    }
                    return true;
                }
                return true; // Skip current item
            });
            prev_1.reverse();
            prevCompare_1.reverse();
            //--------------------------------------------------
            //const prev = IndicatorDataSource.getPreviousItems(sourceIter, N - 1);
            sourceItems.pushRange(prev_1);
            compareItems.pushRange(prevCompare_1);
        }
        // Get last computed items
        if (arg) {
            var iter = this.dataStorage.getIterator();
            if (iter.goTo(function (item) { return item.uidOrig.compare(arg.uidFirst) === 0; })) {
                computedArray = index_2.IndicatorDataSource.getPreviousItems(iter, N - 1);
                computedItems.pushRange(computedArray);
            }
        }
        // Go to first element
        if (arg) {
            sourceIter.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!sourceIter.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // 
        var found = false;
        var firstUid = sourceIter.current.uid;
        var lastUid;
        var _loop_1 = function () {
            var source = sourceIter.current;
            lastUid = source.uid;
            sourceItems.push(source);
            if (found) {
                found = compareIter.moveTo(function (citem) { return source.uid.compare(citem.uid) === 0; }) !== -1;
            }
            else {
                found = compareIter.goTo(function (citem) { return source.uid.compare(citem.uid) === 0; });
            }
            if (!found) {
                return "continue";
            }
            compareItems.push(found ? compareIter.current : new index_3.Candlestick(source.date));
            var computed = this_1.computeOne(sourceItems, compareItems, computedItems, accessor);
            computedArray.push(computed);
            computedItems.push(computed);
        };
        var this_1 = this;
        do {
            _loop_1();
        } while (sourceIter.moveNext());
        // Merge using origUid, not uid
        this.dataStorage.merge(computedArray);
        return new index_2.DataChangedArgument(firstUid, lastUid, computedArray.length);
    };
    CORIndicator.prototype.computeOne = function (sourceItems, compareItems, computedArray, accessor) {
        var N = this.extsettings.period;
        var source = sourceItems.last();
        var compare = compareItems.lastOrDefault();
        var lastComputed = computedArray.lastOrDefault();
        var p = accessor(source);
        var s = compare ? accessor(compare) : undefined;
        var computed = new CORCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        // Both values should present
        computed.p = (p !== undefined && s !== undefined) ? p : undefined;
        computed.s = (p !== undefined && s !== undefined) ? s : undefined;
        computed.p2 = (p !== undefined && s !== undefined) ? p * p : undefined;
        computed.s2 = (p !== undefined && s !== undefined) ? s * s : undefined;
        computed.pxs = (p !== undefined && s !== undefined) ? p * s : undefined; // P x S
        // AVG of source
        var lastAvgP = lastComputed !== undefined ? lastComputed.avgp : undefined;
        computed.avgp = this.ma.compute(N, computedArray, function (item) { return item.p; }, computed, lastAvgP);
        // AVG of compare
        var lastAvgS = lastComputed !== undefined ? lastComputed.avgs : undefined;
        computed.avgs = this.ma.compute(N, computedArray, function (item) { return item.s; }, computed, lastAvgS);
        // AVG of squared source
        var lastAvgP2 = lastComputed !== undefined ? lastComputed.avgp2 : undefined;
        computed.avgp2 = this.ma.compute(N, computedArray, function (item) { return item.p2; }, computed, lastAvgP2);
        // AVG of squared compare
        var lastAvgS2 = lastComputed !== undefined ? lastComputed.avgs2 : undefined;
        computed.avgs2 = this.ma.compute(N, computedArray, function (item) { return item.s2; }, computed, lastAvgS2);
        // Compute P x S average
        var lastAvgPxS = lastComputed !== undefined ? lastComputed.avgpxs : undefined;
        computed.avgpxs = this.ma.compute(N, computedArray, function (item) { return item.pxs; }, computed, lastAvgPxS);
        // Compute correlation
        if (computed.avgp !== undefined && computed.avgs !== undefined && computed.avgp2 !== undefined && computed.avgs2 !== undefined
            && computed.avgpxs !== undefined) {
            var varianceP = computed.avgp2 - (computed.avgp * computed.avgp);
            var varianceS = computed.avgs2 - (computed.avgs * computed.avgs);
            var covariance = computed.avgpxs - (computed.avgp * computed.avgs);
            if (varianceP !== 0 && varianceS !== 0) {
                var correlation = covariance / Math.sqrt(varianceP * varianceS);
                computed.c = isNaN(correlation) ? undefined : correlation;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    CORIndicator.prototype.getValuesRange = function (range) {
        return { start: -1, end: 1 };
    };
    CORIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.extsettings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        var sources = this.context.register.list();
        sources.push(new index_4.IdValue('', ''));
        group.setSetting('uid', new index_1.SettingSet({
            name: 'uid',
            displayName: 'Compare',
            value: this.extsettings.uid,
            settingType: index_1.SettingType.select,
            options: sources.map(function (item) { return { value: item.id, text: item.value }; })
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.extsettings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    CORIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.extsettings.period = (period && period.value) ? parseInt(period.value, 10) : this.extsettings.period;
        var uid = value.getSetting('datasource.uid');
        this.extsettings.uid = (uid && uid.value) ? uid.value : this.extsettings.uid;
        var valueType = value.getSetting('datasource.valueType');
        this.extsettings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.extsettings.valueType;
        // recompute
        this.compute();
    };
    return CORIndicator;
}(index_2.IndicatorDataSource));
exports.CORIndicator = CORIndicator;
var CORSettings = (function () {
    function CORSettings() {
        this.period = 10;
        this.valueType = ValueAccessor_1.ValueAccessorType.close;
    }
    return CORSettings;
}());
},{"../core/index":53,"../data/index":71,"../model/index":142,"../shared/index":166,"./CandlestickExt":100,"./MovingAverage":112,"./ValueAccessor":132}],100:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../model/index");
var CandlestickExt = (function (_super) {
    __extends(CandlestickExt, _super);
    function CandlestickExt() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.uidOrig = new index_1.Uid();
        _this.isFake = false;
        return _this;
    }
    return CandlestickExt;
}(index_1.Candlestick));
exports.CandlestickExt = CandlestickExt;
},{"../model/index":142}],101:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var DEMACandlestick = (function (_super) {
    __extends(DEMACandlestick, _super);
    function DEMACandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DEMACandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DEMACandlestick = DEMACandlestick;
var DEMAIndicator = (function (_super) {
    __extends(DEMAIndicator, _super);
    function DEMAIndicator(source, context) {
        var _this = _super.call(this, DEMACandlestick, source, context) || this;
        _this.name = 'DEMA';
        _this.ema = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    DEMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new DEMACandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedEMA = lastComputed !== undefined ? lastComputed.EMA : undefined;
            // 1. Compute EMA
            computed.EMA = this.ema.compute(N, sourceItems, accessor, undefined, lastComputedEMA);
            if (computed.EMA !== undefined) {
                // 2. Compute DEMA. On base of computed EMA
                var lastComputedDEMA = lastComputed !== undefined ? lastComputed.DEMA : undefined;
                // Adding last computed EMA to calculate DEMA
                computed.DEMA = this.ema.compute(N, computedArray, function (item) { return item.EMA; }, computed, lastComputedDEMA);
                if (computed.DEMA !== undefined) {
                    computed.c = 2 * computed.EMA - computed.DEMA;
                    computed.h = computed.c;
                    computed.l = computed.c;
                }
            }
        }
        return computed;
    };
    return DEMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.DEMAIndicator = DEMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],102:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// DIX = 100 * (close - MA) / MA
var DIXOscillator = (function (_super) {
    __extends(DIXOscillator, _super);
    function DIXOscillator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'DIX';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        return _this;
    }
    DIXOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
            var ma = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedValue);
            if (ma !== undefined) {
                computed.c = 100 * (value - ma) / ma;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    return DIXOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.DIXOscillator = DIXOscillator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],103:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var index_3 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var DMICandlestick = (function (_super) {
    __extends(DMICandlestick, _super);
    function DMICandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DMICandlestick.prototype.toString = function (precision) {
        return 'DX: '
            + ("" + (this.c !== undefined ? this.c.toFixed(precision) : 'n/a'))
            + ' +DI: '
            + ("" + (this.pDI !== undefined ? this.pDI.toFixed(precision) : 'n/a'))
            + ' -DI '
            + ("" + (this.mDI !== undefined ? this.mDI.toFixed(precision) : 'n/a'));
    };
    return DMICandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DMICandlestick = DMICandlestick;
var DMIIndicator = (function (_super) {
    __extends(DMIIndicator, _super);
    function DMIIndicator(source, context) {
        var _this = _super.call(this, DMICandlestick, source, context) || this;
        _this.name = 'DMI';
        _this.wma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Wilder);
        //this.adxma = MovingAverageFactory.instance.create(MovingAverageType.ADX);
        // DMI requires TR, +DM, -DM
        _this.source.addExtension(index_1.TrueRangeExtension.uname, new index_1.TrueRangeExtension());
        _this.source.addExtension(index_1.UpDirectionalMovementExtension.uname, new index_1.UpDirectionalMovementExtension());
        _this.source.addExtension(index_1.DownDirectionalMovementExtension.uname, new index_1.DownDirectionalMovementExtension());
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    DMIIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new DMICandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            // Using Wilder for smoothing +DM, -DM, TR
            //
            var lastComputedPDMA = lastComputed !== undefined ? lastComputed.ext['pdm'] : undefined;
            computed.pDMA = this.wma.compute(N, sourceItems, function (item) { return item.ext['pdm']; }, undefined, lastComputedPDMA);
            var lastComputedMDMA = lastComputed !== undefined ? lastComputed.ext['mdm'] : undefined;
            computed.mDMA = this.wma.compute(N, sourceItems, function (item) { return item.ext['mdm']; }, undefined, lastComputedMDMA);
            var lastComputedTRA = lastComputed !== undefined ? lastComputed.ext['tr'] : undefined;
            computed.TRA = this.wma.compute(N, sourceItems, function (item) { return item.ext['tr']; }, undefined, lastComputedTRA);
            if (computed.pDMA !== undefined && computed.mDMA !== undefined && computed.TRA !== undefined) {
                // Compute smoothed +DI, -DI
                var pDI = (computed.pDMA / computed.TRA) * 100;
                var mDI = (computed.mDMA / computed.TRA) * 100;
                computed.pDI = pDI;
                computed.mDI = mDI;
                // Compute DX
                computed.c = 100 * Math.abs(pDI - mDI) / (pDI + mDI);
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    DMIIndicator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    DMIIndicator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    DMIIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return DMIIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.DMIIndicator = DMIIndicator;
var DMIIndicatorRenderer = (function () {
    function DMIIndicatorRenderer() {
    }
    DMIIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#0026FF');
        // Jaw
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DMICandlestick) {
                var dmi = item;
                if (dmi && dmi.c !== undefined) {
                    var value = dmi.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#FF0800');
        // Teeth
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DMICandlestick) {
                var dmi = item;
                if (dmi && dmi.mDI !== undefined) {
                    var value = dmi.mDI;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#399F16');
        // Lips
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DMICandlestick) {
                var dmi = item;
                if (dmi && dmi.pDI !== undefined) {
                    var value = dmi.pDI;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    DMIIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    DMIIndicatorRenderer.prototype.getSettings = function () {
        return new index_2.SettingSet('visual');
    };
    DMIIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return DMIIndicatorRenderer;
}());
exports.DMIIndicatorRenderer = DMIIndicatorRenderer;
},{"../compute/index":40,"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],104:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// DSS = 100 x (EMAy(EMAx(C-L))) / EMAy(EMAx(H - L))
// DSS(slow) = EMA(DSS)
var DSSBRCandlestick = (function (_super) {
    __extends(DSSBRCandlestick, _super);
    function DSSBRCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DSSBRCandlestick.prototype.toString = function (precision) {
        return "" + (this.DSS !== undefined ? this.DSS.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.DSSslow !== undefined ? this.DSSslow.toFixed(precision) : 'n/a'));
    };
    return DSSBRCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DSSBRCandlestick = DSSBRCandlestick;
var DSSBROscillator = (function (_super) {
    __extends(DSSBROscillator, _super);
    function DSSBROscillator(source, context) {
        var _this = _super.call(this, DSSBRCandlestick, source, context) || this;
        _this.extsettings = new DSSBRSettings();
        _this.name = 'DSSBR';
        _this.ema = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    Object.defineProperty(DSSBROscillator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.periodK, this.extsettings.periodX, this.extsettings.periodZ);
        },
        enumerable: true,
        configurable: true
    });
    DSSBROscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var periodK = this.extsettings.periodK;
        var periodX = this.extsettings.periodX;
        var periodZ = this.extsettings.periodZ;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new DSSBRCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = source.c; //this.accessor(source);
        if (value !== undefined) {
            // calculating min/max with current value
            var H = sourceItems.max(function (c) { return c.h; }, periodK); // highest high for the period
            var L = sourceItems.min(function (c) { return c.l; }, periodK); // lowest low for the period
            if (H !== undefined && L !== undefined) {
                computed.CL = value - L;
                computed.HL = H - L;
                // Compute first EMAx
                var lastComputedEMA1cl = lastComputed !== undefined ? lastComputed.EMA1ofCL : undefined;
                computed.EMA1ofCL = this.ema.compute(periodX, sourceItems, function (c) { return c.CL; }, computed, lastComputedEMA1cl);
                var lastComputedEMA1hl = lastComputed !== undefined ? lastComputed.EMA1ofHL : undefined;
                computed.EMA1ofHL = this.ema.compute(periodX, sourceItems, function (c) { return c.HL; }, computed, lastComputedEMA1hl);
                // Compute second EMAy
                var lastComputedEMA2cl = lastComputed !== undefined ? lastComputed.EMA2ofCL : undefined;
                computed.EMA2ofCL = this.ema.compute(periodX, sourceItems, function (c) { return c.EMA1ofCL; }, computed, lastComputedEMA2cl);
                var lastComputedEMA2hl = lastComputed !== undefined ? lastComputed.EMA2ofHL : undefined;
                computed.EMA2ofHL = this.ema.compute(periodX, sourceItems, function (c) { return c.EMA1ofHL; }, computed, lastComputedEMA2hl);
                if (computed.EMA2ofCL !== undefined && computed.EMA2ofHL !== undefined && computed.EMA2ofHL !== 0) {
                    // Compute DSS
                    computed.DSS = 100 * computed.EMA2ofCL / computed.EMA2ofHL;
                    // Compute DSS slow
                    var lastComputedDSSslow = lastComputed !== undefined ? lastComputed.DSSslow : undefined;
                    computed.DSSslow = this.ema.compute(periodZ, sourceItems, function (c) { return c.DSS; }, computed, lastComputedDSSslow);
                }
            }
        }
        return computed;
    };
    DSSBROscillator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    DSSBROscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('periodK', new index_1.SettingSet({
            name: 'periodK',
            value: this.extsettings.periodK.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Stochastic period'
        }));
        group.setSetting('periodX', new index_1.SettingSet({
            name: 'periodX',
            value: this.extsettings.periodX.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Smoothing period'
        }));
        group.setSetting('periodZ', new index_1.SettingSet({
            name: 'periodZ',
            value: this.extsettings.periodZ.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Trigger period'
        }));
        return group;
    };
    DSSBROscillator.prototype.setSettings = function (value) {
        var periodK = value.getSetting('datasource.periodK');
        this.extsettings.periodK = (periodK && periodK.value) ? parseInt(periodK.value, 10) : this.extsettings.periodK;
        var periodX = value.getSetting('datasource.periodX');
        this.extsettings.periodX = (periodX && periodX.value) ? parseInt(periodX.value, 10) : this.extsettings.periodX;
        var periodZ = value.getSetting('datasource.periodZ');
        this.extsettings.periodZ = (periodZ && periodZ.value) ? parseInt(periodZ.value, 10) : this.extsettings.periodZ;
        // recompute
        this.compute();
    };
    return DSSBROscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.DSSBROscillator = DSSBROscillator;
var DSSBRSettings = (function () {
    function DSSBRSettings() {
        this.periodK = 14; // stochastic period
        this.periodX = 3; // smoothing periods
        //public periodY: number = 3;
        this.periodZ = 3; // Trigger period
    }
    return DSSBRSettings;
}());
var DSSBROscillatorRenderer = (function () {
    function DSSBROscillatorRenderer() {
    }
    DSSBROscillatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#00B730');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DSSBRCandlestick) {
                var double = item;
                if (double.DSS !== undefined) {
                    //const x = timeAxis.toX(index);
                    var value = double.DSS;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#B50021');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DSSBRCandlestick) {
                var double = item;
                if (double.DSSslow !== undefined) {
                    var value = double.DSSslow;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    DSSBROscillatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    DSSBROscillatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    DSSBROscillatorRenderer.prototype.setSettings = function (settings) {
    };
    return DSSBROscillatorRenderer;
}());
exports.DSSBROscillatorRenderer = DSSBROscillatorRenderer;
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],105:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var EMAIndicator = (function (_super) {
    __extends(EMAIndicator, _super);
    function EMAIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'EMA';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    EMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
            computed.c = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedValue);
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    return EMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.EMAIndicator = EMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],106:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var index_3 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
var DoubleCandlestick = (function (_super) {
    __extends(DoubleCandlestick, _super);
    function DoubleCandlestick(date, c, o, h, l) {
        var _this = _super.call(this, date, c, o, h, l) || this;
        _this.hh = new index_2.Candlestick(date);
        _this.ll = new index_2.Candlestick(date);
        return _this;
    }
    DoubleCandlestick.prototype.toString = function (precision) {
        return "" + (this.hh && this.hh.c !== undefined ? this.hh.c.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.ll && this.ll.c !== undefined ? this.ll.c.toFixed(precision) : 'n/a'));
    };
    return DoubleCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DoubleCandlestick = DoubleCandlestick;
var HHLLIndicator = (function (_super) {
    __extends(HHLLIndicator, _super);
    function HHLLIndicator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.name = 'HHLL';
        // Set default settings
        _this.settings.period = 10;
        return _this;
    }
    HHLLIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var computed = new DoubleCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var hh = sourceItems.max(function (item) { return item.h; });
        var ll = sourceItems.min(function (item) { return item.l; });
        computed.hh.c = hh;
        computed.hh.h = hh;
        computed.hh.l = hh;
        computed.ll.c = ll;
        computed.ll.h = ll;
        computed.ll.l = ll;
        return computed;
    };
    HHLLIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    HHLLIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return HHLLIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.HHLLIndicator = HHLLIndicator;
var HHLLIndicatorRenderer = (function () {
    function HHLLIndicatorRenderer() {
    }
    HHLLIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#FF5900');
        // Up
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var d = item;
                if (d && d.hh && d.hh.c !== undefined) {
                    var value = d.hh.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#3D5AFF');
        // Down
        index_3.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var d = item;
                if (d && d.ll && d.ll.c !== undefined) {
                    var value = d.ll.c;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    HHLLIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    HHLLIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('visual');
    };
    HHLLIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return HHLLIndicatorRenderer;
}());
exports.HHLLIndicatorRenderer = HHLLIndicatorRenderer;
},{"../core/index":53,"../model/index":142,"../render/index":162,"./CandlestickExt":100,"./SimpleIndicator":125}],107:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
// Tenkan-sen (Conversion Line): (9-period high + 9-period low)/2))
// Kijun-sen (Base Line): (26-period high + 26-period low)/2))
// Senkou Span A (Leading Span A): (Conversion Line + Base Line)/2))
// Senkou Span B (Leading Span B): (52-period high + 52-period low)/2))
// Chikou Span (Lagging Span)
var IKHCandlestick = (function (_super) {
    __extends(IKHCandlestick, _super);
    function IKHCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IKHCandlestick.prototype.toString = function (precision) {
        return ''
            + ("" + (this.conversion !== undefined ? this.conversion.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.base !== undefined ? this.base.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.leadingAShifted !== undefined ? this.leadingAShifted.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.leadingBShifted !== undefined ? this.leadingBShifted.toFixed(precision) : 'n/a'))
            + ' / '
            + ("" + (this.laggingShifted !== undefined ? this.laggingShifted.toFixed(precision) : 'n/a'));
    };
    return IKHCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.IKHCandlestick = IKHCandlestick;
var IKHIndicator = (function (_super) {
    __extends(IKHIndicator, _super);
    function IKHIndicator(source, context) {
        var _this = _super.call(this, IKHCandlestick, source, context) || this;
        _this.extsettings = new IKHSettings();
        _this.name = 'IKH';
        return _this;
    }
    Object.defineProperty(IKHIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.periodConversion, this.extsettings.periodBase, this.extsettings.periodSpanB);
        },
        enumerable: true,
        configurable: true
    });
    IKHIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var periodConversion = this.extsettings.periodConversion;
        var periodBase = this.extsettings.periodBase;
        var periodSpanB = this.extsettings.periodSpanB;
        var ikhDisplacement = this.extsettings.ikhDisplacement;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new IKHCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = source.c; //this.accessor(source);
        if (value !== undefined) {
            // computing Conversion Line
            var H1 = sourceItems.max(function (c) { return c.h; }, periodConversion); // highest high for the period
            var L1 = sourceItems.min(function (c) { return c.l; }, periodConversion); // lowest low for the period
            if (H1 !== undefined && L1 !== undefined) {
                computed.conversion = (H1 + L1) / 2;
            }
            // computing Base Line
            var H2 = sourceItems.max(function (c) { return c.h; }, periodBase); // highest high for the period
            var L2 = sourceItems.min(function (c) { return c.l; }, periodBase); // lowest low for the period
            if (H2 !== undefined && L2 !== undefined) {
                computed.base = (H2 + L2) / 2;
            }
            // computing Leading Span A
            if (computed.base !== undefined && computed.conversion !== undefined) {
                computed.leadingA = (computed.base + computed.conversion) / 2;
            }
            // computing Leading Span B
            var H3 = sourceItems.max(function (c) { return c.h; }, periodSpanB); // highest high for the period
            var L3 = sourceItems.min(function (c) { return c.l; }, periodSpanB); // lowest low for the period
            if (H3 !== undefined && L3 !== undefined) {
                computed.leadingB = (H3 + L3) / 2;
            }
            // computing Lagging Span
            computed.lagging = source.c;
        }
        return computed;
    };
    IKHIndicator.prototype.afterCompute = function (arg) {
        // After compute shift Lagging and Leading lines
        // Leading shifting to right
        this.shiftDataExt(this.extsettings.ikhDisplacement, function (dest, source) {
            if (dest && source) {
                dest.leadingAShifted = source.leadingA;
            }
            else if (dest) {
                dest.leadingAShifted = undefined;
            }
        });
        // Leading shifting to right
        this.shiftDataExt(this.extsettings.ikhDisplacement, function (dest, source) {
            if (dest && source) {
                dest.leadingBShifted = source.leadingB;
            }
            else if (dest) {
                dest.leadingBShifted = undefined;
            }
        });
        // Leading shifting to right
        this.shiftDataExt(-this.extsettings.ikhDisplacement, function (dest, source) {
            if (dest && source) {
                dest.laggingShifted = source.lagging;
            }
            else if (dest) {
                dest.laggingShifted = undefined;
            }
        });
    };
    IKHIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('periodConversion', new index_1.SettingSet({
            name: 'periodConversion',
            value: this.extsettings.periodConversion.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Tenkan-Sen period'
        }));
        group.setSetting('periodBase', new index_1.SettingSet({
            name: 'periodBase',
            value: this.extsettings.periodBase.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Kijun-Sen period'
        }));
        group.setSetting('periodSpanB', new index_1.SettingSet({
            name: 'periodSpanB',
            value: this.extsettings.periodSpanB.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Senkou Span B period'
        }));
        group.setSetting('ikhDisplacement', new index_1.SettingSet({
            name: 'ikhDisplacement',
            value: this.extsettings.ikhDisplacement.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Displacment'
        }));
        return group;
    };
    IKHIndicator.prototype.setSettings = function (value) {
        var periodConversion = value.getSetting('datasource.periodConversion');
        this.extsettings.periodConversion = (periodConversion && periodConversion.value) ? parseInt(periodConversion.value, 10) : this.extsettings.periodConversion;
        var periodBase = value.getSetting('datasource.periodBase');
        this.extsettings.periodBase = (periodBase && periodBase.value) ? parseInt(periodBase.value, 10) : this.extsettings.periodBase;
        var periodSpanB = value.getSetting('datasource.periodSpanB');
        this.extsettings.periodSpanB = (periodSpanB && periodSpanB.value) ? parseInt(periodSpanB.value, 10) : this.extsettings.periodSpanB;
        var ikhDisplacement = value.getSetting('datasource.ikhDisplacement');
        this.extsettings.ikhDisplacement = (ikhDisplacement && ikhDisplacement.value) ? parseInt(ikhDisplacement.value, 10) : this.extsettings.ikhDisplacement;
        // recompute
        this.compute();
    };
    return IKHIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.IKHIndicator = IKHIndicator;
var IKHSettings = (function () {
    function IKHSettings() {
        this.periodConversion = 9; // Conversion Line period
        this.periodBase = 26; // Base Line period
        this.periodSpanB = 52; // Leading Span B period
        this.ikhDisplacement = 26;
    }
    return IKHSettings;
}());
var IKHIndicatorRenderer = (function () {
    function IKHIndicatorRenderer() {
    }
    IKHIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#267F00');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof IKHCandlestick) {
                var ikh = item;
                if (ikh.conversion !== undefined) {
                    var value = ikh.conversion;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#D30000');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof IKHCandlestick) {
                var ikh = item;
                if (ikh.base !== undefined) {
                    var value = ikh.base;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#D30000');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof IKHCandlestick) {
                var ikh = item;
                if (ikh.leadingAShifted !== undefined) {
                    var value = ikh.leadingAShifted;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#D30000');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof IKHCandlestick) {
                var ikh = item;
                if (ikh.leadingBShifted !== undefined) {
                    var value = ikh.leadingBShifted;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#267F00');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof IKHCandlestick) {
                var ikh = item;
                if (ikh.laggingShifted !== undefined) {
                    var value = ikh.laggingShifted;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    IKHIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    IKHIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    IKHIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return IKHIndicatorRenderer;
}());
exports.IKHIndicatorRenderer = IKHIndicatorRenderer;
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./SimpleIndicator":125}],108:[function(require,module,exports){
/**
 * IndicatorFabric class.
 *
 * @classdesc Creates indicator instances.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function register(indicatorId, creator) {
    IndicatorFabric.instance.register(indicatorId, creator);
}
exports.register = register;
var IndicatorFabric = (function () {
    function IndicatorFabric() {
        this.ctors = {};
    }
    Object.defineProperty(IndicatorFabric, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new IndicatorFabric();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    IndicatorFabric.prototype.register = function (indicatorId, creator) {
        this.ctors[indicatorId] = creator;
    };
    IndicatorFabric.prototype.instantiate = function (indicatorId, source, context) {
        var ctor = this.ctors[indicatorId];
        if (ctor) {
            return new ctor(source, context);
        }
        else {
            throw new Error("Indicator with id=" + indicatorId + " is not registered.");
        }
    };
    return IndicatorFabric;
}());
exports.IndicatorFabric = IndicatorFabric;
},{}],109:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// MACD Line = EMA 12 - EMA 26
// Signal line = EMA(MACD)
// Historgam = MACD - Signal
var MACDCandlestick = (function (_super) {
    __extends(MACDCandlestick, _super);
    function MACDCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MACDCandlestick.prototype.toString = function (precision) {
        return 'MACD: '
            + ("" + (this.MACD !== undefined ? this.MACD.toFixed(precision) : 'n/a'))
            + ' SIG: '
            + ("" + (this.SIG !== undefined ? this.SIG.toFixed(precision) : 'n/a'))
            + ' HIS: '
            + ("" + (this.HIS !== undefined ? this.HIS.toFixed(precision) : 'n/a'));
    };
    return MACDCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.MACDCandlestick = MACDCandlestick;
var MACDIndicator = (function (_super) {
    __extends(MACDIndicator, _super);
    function MACDIndicator(source, context) {
        var _this = _super.call(this, MACDCandlestick, source, context) || this;
        _this.extsettings = new MACDSettings();
        _this.name = 'MACD';
        _this.ema = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    Object.defineProperty(MACDIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.periodFast, this.extsettings.periodSlow, this.extsettings.periodSignal);
        },
        enumerable: true,
        configurable: true
    });
    MACDIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var periodFast = this.extsettings.periodFast;
        var periodSlow = this.extsettings.periodSlow;
        var periodSig = this.extsettings.periodSignal;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new MACDCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            // Compute Slow EMA
            var lastComputedEMAslow = lastComputed !== undefined ? lastComputed.EMAslow : undefined;
            computed.EMAslow = this.ema.compute(periodSlow, sourceItems, accessor, undefined, lastComputedEMAslow);
            // Compute Fast EMA
            var lastComputedEMAfast = lastComputed !== undefined ? lastComputed.EMAfast : undefined;
            computed.EMAfast = this.ema.compute(periodFast, sourceItems, accessor, undefined, lastComputedEMAfast);
            if (computed.EMAslow !== undefined && computed.EMAfast !== undefined) {
                // Compute MACD line
                computed.MACD = computed.EMAfast - computed.EMAslow;
                // Compute Signal line
                var lastComputedSig = lastComputed !== undefined ? lastComputed.SIG : undefined;
                computed.SIG = this.ema.compute(periodSig, computedArray, function (c) { return c.MACD; }, computed, lastComputedSig);
                if (computed.SIG !== undefined) {
                    // Computed Histogram
                    computed.HIS = computed.MACD - computed.SIG;
                }
                computed.c = computed.MACD;
                computed.h = Math.max(computed.MACD, computed.SIG !== undefined ? computed.SIG : -Infinity, computed.HIS !== undefined ? computed.HIS : -Infinity);
                computed.l = Math.min(computed.MACD, computed.SIG !== undefined ? computed.SIG : -Infinity, computed.HIS !== undefined ? computed.HIS : -Infinity);
            }
        }
        return computed;
    };
    MACDIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('periodFast', new index_1.SettingSet({
            name: 'periodFast',
            value: this.extsettings.periodFast.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Fast period'
        }));
        group.setSetting('periodSlow', new index_1.SettingSet({
            name: 'periodSlow',
            value: this.extsettings.periodSlow.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Slow period'
        }));
        group.setSetting('periodSignal', new index_1.SettingSet({
            name: 'periodSignal',
            value: this.extsettings.periodSignal.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Signal period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    MACDIndicator.prototype.setSettings = function (value) {
        var periodFast = value.getSetting('datasource.periodFast');
        this.extsettings.periodFast = (periodFast && periodFast.value) ? parseInt(periodFast.value, 10) : this.extsettings.periodFast;
        var periodSlow = value.getSetting('datasource.periodSlow');
        this.extsettings.periodSlow = (periodSlow && periodSlow.value) ? parseInt(periodSlow.value, 10) : this.extsettings.periodSlow;
        var periodSignal = value.getSetting('datasource.periodSignal');
        this.extsettings.periodSignal = (periodSignal && periodSignal.value) ? parseInt(periodSignal.value, 10) : this.extsettings.periodSignal;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return MACDIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.MACDIndicator = MACDIndicator;
var MACDSettings = (function () {
    function MACDSettings() {
        this.periodFast = 12; // Fast period
        this.periodSlow = 26; // Slow period
        this.periodSignal = 9; // Signal period
    }
    return MACDSettings;
}());
var MACDIndicatorRenderer = (function () {
    function MACDIndicatorRenderer() {
    }
    MACDIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // MACD
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#0026FF');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof MACDCandlestick) {
                var c = item;
                if (c && c.MACD !== undefined) {
                    var value = c.MACD;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Signal
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#FF0800');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof MACDCandlestick) {
                var c = item;
                if (c && c.SIG !== undefined) {
                    var value = c.SIG;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
        // Histogram
        //
        canvas.beginPath();
        canvas.setStrokeStyle('#399F16');
        var y0 = yAxis.toX(0);
        var wi = frame.w / timeAxis.count;
        index_2.RenderUtils.iterate(timeAxis, data, function (item, x) {
            if (item instanceof MACDCandlestick) {
                var m = item;
                if (m && m.HIS !== undefined) {
                    var y = yAxis.toX(m.HIS);
                    if (wi >= 2) {
                        canvas.rect(x - wi / 2, Math.min(y, y0), wi, Math.abs(y - y0));
                    }
                    else {
                        canvas.moveTo(x, y0);
                        canvas.lineTo(x, y);
                    }
                }
            }
        });
        canvas.stroke();
    };
    MACDIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    MACDIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('visual');
    };
    MACDIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return MACDIndicatorRenderer;
}());
exports.MACDIndicatorRenderer = MACDIndicatorRenderer;
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./ValueAccessor":132}],110:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// MD = EMA(EMA(price - EMA(price)))
var MDCandlestick = (function (_super) {
    __extends(MDCandlestick, _super);
    function MDCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MDCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.MDCandlestick = MDCandlestick;
var MDIndicator = (function (_super) {
    __extends(MDIndicator, _super);
    function MDIndicator(source, context) {
        var _this = _super.call(this, MDCandlestick, source, context) || this;
        _this.extsettings = new MDSettings();
        _this.name = 'MD';
        _this.ema = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    Object.defineProperty(MDIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.period1, this.extsettings.period2, this.extsettings.period3);
        },
        enumerable: true,
        configurable: true
    });
    MDIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var period1 = this.extsettings.period1;
        var period2 = this.extsettings.period2;
        var period3 = this.extsettings.period3;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new MDCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedEMA1 = lastComputed !== undefined ? lastComputed.EMA1 : undefined;
            // 1. Compute EMA1
            computed.EMA1 = this.ema.compute(period1, sourceItems, accessor, undefined, lastComputedEMA1);
            if (computed.EMA1 !== undefined) {
                computed.dev = value - computed.EMA1;
                // 2. Compute EMA 2 on base of EMA1
                var lastComputedEMA2 = lastComputed !== undefined ? lastComputed.EMA2 : undefined;
                computed.EMA2 = this.ema.compute(period2, computedArray, function (item) { return item.dev; }, computed, lastComputedEMA2);
                if (computed.EMA2 !== undefined) {
                    // Compute EMA3
                    var lastComputedEMA3 = lastComputed !== undefined ? lastComputed.c : undefined;
                    computed.c = this.ema.compute(period3, computedArray, function (item) { return item.EMA2; }, computed, lastComputedEMA3);
                    computed.h = computed.c;
                    computed.l = computed.c;
                }
            }
        }
        return computed;
    };
    MDIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period1', new index_1.SettingSet({
            name: 'period1',
            value: this.extsettings.period1.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '1st smoothing period'
        }));
        group.setSetting('period2', new index_1.SettingSet({
            name: 'period2',
            value: this.extsettings.period2.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '2nd smoothing period'
        }));
        group.setSetting('period3', new index_1.SettingSet({
            name: 'period3',
            value: this.extsettings.period3.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '3d smoothing period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    MDIndicator.prototype.setSettings = function (value) {
        var period1 = value.getSetting('datasource.period1');
        this.extsettings.period1 = (period1 && period1.value) ? parseInt(period1.value, 10) : this.extsettings.period1;
        var period2 = value.getSetting('datasource.period2');
        this.extsettings.period2 = (period2 && period2.value) ? parseInt(period2.value, 10) : this.extsettings.period2;
        var period3 = value.getSetting('datasource.period3');
        this.extsettings.period3 = (period3 && period3.value) ? parseInt(period3.value, 10) : this.extsettings.period3;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return MDIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.MDIndicator = MDIndicator;
var MDSettings = (function () {
    function MDSettings() {
        this.period1 = 14; // smoothing period 1
        this.period2 = 3; // smoothing period 2
        this.period3 = 3; // smoothing period 3
    }
    return MDSettings;
}());
},{"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./ValueAccessor":132}],111:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// Momentum = Close[t] - Close[t-N]
var MOMIndicator = (function (_super) {
    __extends(MOMIndicator, _super);
    function MOMIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'MOM';
        return _this;
    }
    Object.defineProperty(MOMIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return this.settings.period + 1; // MOM requires one extra item
        },
        enumerable: true,
        configurable: true
    });
    MOMIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var L = sourceItems.length;
        var source = sourceItems.last();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var i = L - (N + 1);
        if (i >= 0 && i < sourceItems.length) {
            var prev = sourceItems.getItem(i);
            var curValue = accessor(source);
            var prevValue = accessor(prev);
            if (curValue !== undefined && prevValue !== undefined) {
                computed.c = curValue - prevValue;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    MOMIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    MOMIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return MOMIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.MOMIndicator = MOMIndicator;
},{"../core/index":53,"./CandlestickExt":100,"./SimpleIndicator":125,"./ValueAccessor":132}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MovingAverageType;
(function (MovingAverageType) {
    MovingAverageType[MovingAverageType["ADX"] = 0] = "ADX";
    MovingAverageType[MovingAverageType["DoubleExponential"] = 1] = "DoubleExponential";
    MovingAverageType[MovingAverageType["Exponential"] = 2] = "Exponential";
    MovingAverageType[MovingAverageType["Simple"] = 3] = "Simple";
    MovingAverageType[MovingAverageType["Smoothed"] = 4] = "Smoothed";
    MovingAverageType[MovingAverageType["Triangular"] = 5] = "Triangular";
    MovingAverageType[MovingAverageType["TripleExponential"] = 6] = "TripleExponential";
    MovingAverageType[MovingAverageType["Weight"] = 7] = "Weight";
    MovingAverageType[MovingAverageType["Wilder"] = 8] = "Wilder";
})(MovingAverageType = exports.MovingAverageType || (exports.MovingAverageType = {}));
var MovingAverageFactory = (function () {
    function MovingAverageFactory() {
        this.adxma = new ADXMovingAverage();
        this.ema = new ExponentialMovingAverage();
        this.sma = new SimpleMovingAverage();
        this.smma = new SmoothedMovingAverage();
        this.tma = new TriangularMovingAverage();
        this.wma = new WeightMovingAverage();
        this.wilderma = new WilderMovingAverage();
    }
    Object.defineProperty(MovingAverageFactory, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new MovingAverageFactory();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    MovingAverageFactory.prototype.create = function (maType) {
        switch (maType) {
            case MovingAverageType.ADX: return this.adxma;
            case MovingAverageType.Exponential: return this.ema;
            case MovingAverageType.Simple: return this.sma;
            case MovingAverageType.Smoothed: return this.smma;
            case MovingAverageType.Triangular: return this.tma;
            case MovingAverageType.Weight: return this.wma;
            case MovingAverageType.Wilder: return this.wilderma;
            default: throw new Error('Unexpected moving average type=' + maType);
        }
    };
    return MovingAverageFactory;
}());
exports.MovingAverageFactory = MovingAverageFactory;
var ExponentialMovingAverage = (function () {
    function ExponentialMovingAverage() {
        this.sma = new SimpleMovingAverage();
    }
    ExponentialMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        if (haveCount === 0) {
            return undefined;
        }
        // Calculate first 4 MA as Simple MA
        if (precedingMovingAverage !== undefined && haveCount > 4) {
            // St = a * Yt + (1 - a) * St-1;
            var a = 2 / (n + 1);
            var lastValue = accessor(value !== undefined ? value : precedingValues.last());
            return lastValue !== undefined
                ? a * lastValue + (1 - a) * precedingMovingAverage
                : undefined;
        }
        else {
            // If no previous MA value, calculate as simple ma;
            return this.sma.compute(n, precedingValues, accessor, value, precedingMovingAverage);
        }
    };
    return ExponentialMovingAverage;
}());
var SimpleMovingAverage = (function () {
    function SimpleMovingAverage() {
    }
    SimpleMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var takeCount = 0;
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        if (precedingValues.length === 0 && value === undefined) {
            return undefined;
        }
        else if (precedingValues.length === 1 && value === undefined) {
            // if no previous values, return the only value
            return accessor(precedingValues.last());
        }
        else if (precedingValues.length === 0 && value !== undefined) {
            // if no previous values, return the only value
            return accessor(value);
        }
        else if (n > haveCount) {
            // if not enough values to build moving average use as much as we can get
            takeCount = haveCount;
        }
        else {
            // we have enough values 
            takeCount = n;
        }
        var sum = (value !== undefined ? accessor(value) || 0 : 0);
        var counter = (value !== undefined ? 1 : 0);
        takeCount = takeCount - (value !== undefined ? 1 : 0);
        // Add last values
        for (var i = 0; i < takeCount; i += 1) {
            var v = accessor(precedingValues.getItem(precedingValues.length - (i + 1)));
            if (v !== undefined) {
                sum += v;
                counter += 1;
            }
        }
        return sum / counter;
    };
    return SimpleMovingAverage;
}());
var SmoothedMovingAverage = (function () {
    function SmoothedMovingAverage() {
        this.sma = new SimpleMovingAverage();
    }
    SmoothedMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        if (haveCount < n) {
            // use Simple Moving Average if not enough data
            return this.sma.compute(n, precedingValues, accessor, value, precedingMovingAverage);
        }
        if (precedingMovingAverage === undefined) {
            throw new Error('Previous moving average must be specified.');
        }
        var curValue = accessor(value !== undefined ? value : precedingValues.last());
        return curValue !== undefined
            ? (precedingMovingAverage * (n - 1) + curValue) / n
            : precedingMovingAverage;
    };
    return SmoothedMovingAverage;
}());
var TriangularMovingAverage = (function () {
    function TriangularMovingAverage() {
    }
    TriangularMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        // If amount of items is not enough do not make computation.
        if (n > haveCount) {
            return undefined;
        }
        var mid = Math.round(n / 2);
        var sum = (value !== undefined ? n * (accessor(value) || 0) : 0);
        var divider = 0;
        var startIndex = (value !== undefined ? 2 : 1);
        var triang;
        for (var i = startIndex; i <= n; i += 1) {
            if (i <= mid) {
                triang = i;
            }
            else {
                triang = mid - (i - mid) + ((n + 1) % 2);
            }
            var v = accessor(precedingValues.getItem(precedingValues.length - ((i - startIndex) + 1)));
            if (v !== undefined) {
                sum += triang * v;
                divider += triang;
            }
        }
        return sum / divider;
    };
    return TriangularMovingAverage;
}());
var WeightMovingAverage = (function () {
    function WeightMovingAverage() {
    }
    WeightMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        // If amount of items is not enough then calculate for decreased N value.
        if (n > haveCount) {
            n = haveCount;
        }
        var sum = (value !== undefined ? n * (accessor(value) || 0) : 0);
        var counter = (value !== undefined ? 1 : 0);
        n = n - (value !== undefined ? 1 : 0);
        for (var i = 0; i < n; i += 1) {
            var v = accessor(precedingValues.getItem(precedingValues.length - (i + 1)));
            if (v !== undefined) {
                sum += (n - counter) * v;
                counter += 1;
            }
        }
        return sum / this.divider(counter);
    };
    WeightMovingAverage.prototype.divider = function (n) {
        return n * (n + 1) / 2;
    };
    return WeightMovingAverage;
}());
var WilderMovingAverage = (function () {
    function WilderMovingAverage() {
        this.sma = new SimpleMovingAverage();
    }
    WilderMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        if (haveCount === 0) {
            return undefined;
        }
        // If there is previous MA then use it
        if (precedingMovingAverage !== undefined) {
            var curValue = accessor(value !== undefined ? value : precedingValues.last());
            return curValue !== undefined
                ? (precedingMovingAverage + (precedingMovingAverage / n) + curValue)
                : precedingMovingAverage;
        }
        if (haveCount >= n) {
            // First average calculate as simple average
            return this.sma.compute(n, precedingValues, accessor, value, precedingMovingAverage);
        }
        else {
            // If not enought data do not compute
            return undefined;
        }
    };
    return WilderMovingAverage;
}());
/**
 * First - simple average.
 * Next - (prev avg x (n - 1) + current) / n
 */
var ADXMovingAverage = (function () {
    function ADXMovingAverage() {
        this.sma = new SimpleMovingAverage();
    }
    ADXMovingAverage.prototype.compute = function (n, precedingValues, accessor, value, precedingMovingAverage) {
        var haveCount = precedingValues.length + (value !== undefined ? 1 : 0);
        if (haveCount === 0) {
            return undefined;
        }
        // If there is previous MA then use it
        if (precedingMovingAverage !== undefined) {
            var curValue = accessor(value !== undefined ? value : precedingValues.last());
            return curValue !== undefined
                ? (precedingMovingAverage * (n - 1) + curValue) / n
                : precedingMovingAverage;
        }
        if (haveCount >= n) {
            // First average calculate as simple average
            return this.sma.compute(n, precedingValues, accessor, value, precedingMovingAverage);
        }
        else {
            // If not enought data do not compute
            return undefined;
        }
    };
    return ADXMovingAverage;
}());
},{}],113:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
// Range: [-100; 0]
// %R = (Highest High - Close)/(Highest High - Lowest Low) * -100
var PCROscillator = (function (_super) {
    __extends(PCROscillator, _super);
    function PCROscillator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'PCR';
        // Set default settings
        _this.settings.period = 14;
        return _this;
    }
    PCROscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        if (source.c !== undefined) {
            var H = sourceItems.max(function (c) { return c.h; }, N); // highest high for the period
            var L = sourceItems.min(function (c) { return c.l; }, N); // lowest low for the period
            if (H !== undefined && L !== undefined) {
                computed.c = H !== L ? (-100) * (H - source.c) / (H - L) : 0;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    PCROscillator.prototype.getValuesRange = function (range) {
        return { start: -100, end: 0 };
    };
    PCROscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '%R Period'
        }));
        return group;
    };
    PCROscillator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return PCROscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.PCROscillator = PCROscillator;
},{"../core/index":53,"./CandlestickExt":100,"./SimpleIndicator":125}],114:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../model/index");
var index_4 = require("../utils/index");
var CandlestickExt_1 = require("./CandlestickExt");
var ValueAccessor_1 = require("./ValueAccessor");
// Pivot Point (P) = (High + Low + Close)/3
// Support 1 (S1) = (P x 2) - High
// Support 2 (S2) = P  -  (High  -  Low)
// Resistance 1 (R1) = (P x 2) - Low
// Resistance 2 (R2) = P + (High  -  Low)
var PPCandlestick = (function (_super) {
    __extends(PPCandlestick, _super);
    function PPCandlestick(dateStart, dateEnd) {
        var _this = _super.call(this, dateStart) || this;
        _this.dateEnd = new index_3.Uid(dateEnd);
        return _this;
    }
    PPCandlestick.prototype.toString = function (precision) {
        return 'PP: '
            + ("" + (this.p !== undefined ? this.p.toFixed(precision) : 'n/a'));
    };
    return PPCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.PPCandlestick = PPCandlestick;
var PPIndicator = (function (_super) {
    __extends(PPIndicator, _super);
    function PPIndicator(source, context) {
        var _this = _super.call(this, PPCandlestick, source, context) || this;
        _this.settings = new PPSettings();
        _this.name = 'PP';
        return _this;
    }
    PPIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        var _this = this;
        var computedArray = [];
        // Get source data without loading
        var iterator = this.source.getIterator();
        // Go to first element
        if (arg) {
            iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!iterator.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // 
        var firstUid = iterator.current.uid;
        var lastUid;
        var found;
        var storeIter = this.dataStorage.getIterator();
        var _loop_1 = function () {
            lastUid = iterator.current.uid;
            var source = iterator.current;
            // Compute base time
            // 
            var sourceInterval = this_1.context.interval();
            var extInterval = this_1.extendInterval(sourceInterval);
            // Get candle for previous period
            var computeDate = index_4.DateUtils.truncateToInterval(source.uid.t, extInterval); // Date of current computed candle
            var computeTime = computeDate.getTime();
            var baseDate = index_4.DateUtils.addInterval(computeDate, extInterval, -1); // Date for previous period
            var baseTime = baseDate.getTime();
            // Find existing item
            if (!found) {
                found = storeIter.goTo(function (item) { return item.uid.t.getTime() === computeTime; });
            }
            else {
                found = storeIter.moveTo(function (item) { return item.uid.t.getTime() === computeTime; }) !== -1;
            }
            if (found) {
                // ignore
            }
            if (!found) {
                // Create promise
                //
                var computed_1 = new PPCandlestick(computeDate, index_4.DateUtils.addInterval(computeDate, extInterval, 1));
                // Promise should be in closure
                var promise = this_1.context.getCandle(this_1.source.asset, baseDate, extInterval);
                promise.then(function (candle) {
                    if (candle && candle.h !== undefined && candle.l !== undefined && candle.c !== undefined) {
                        computed_1.p = (candle.h + candle.l + candle.c) / 3;
                        computed_1.s1 = 2 * computed_1.p - candle.h;
                        computed_1.s2 = computed_1.p - (candle.h - candle.l);
                        computed_1.r1 = 2 * computed_1.p - candle.l;
                        computed_1.r2 = computed_1.p + (candle.h - candle.l);
                    }
                    _this.context.render();
                });
                computed_1.promise = promise;
                this_1.dataStorage.merge([computed_1]);
            }
        };
        var this_1 = this;
        do {
            _loop_1();
        } while (iterator.moveNext());
        //const origArg = new DataChangedArgument(firstUid, lastUid, computedArray.length);
        return arg;
    };
    PPIndicator.prototype.getSettings = function () {
        return new index_1.SettingSet({ name: 'datasource', group: true });
    };
    PPIndicator.prototype.setSettings = function (value) {
        // recompute
        this.compute();
    };
    PPIndicator.prototype.extendInterval = function (interval) {
        switch (interval) {
            case index_1.TimeInterval.sec: return index_1.TimeInterval.day;
            case index_1.TimeInterval.min: return index_1.TimeInterval.day;
            case index_1.TimeInterval.min5: return index_1.TimeInterval.day;
            case index_1.TimeInterval.min15: return index_1.TimeInterval.day;
            case index_1.TimeInterval.min30: return index_1.TimeInterval.week;
            case index_1.TimeInterval.hour: return index_1.TimeInterval.week;
            case index_1.TimeInterval.hour4: return index_1.TimeInterval.week;
            case index_1.TimeInterval.hour6: return index_1.TimeInterval.week;
            case index_1.TimeInterval.hour12: return index_1.TimeInterval.month;
            case index_1.TimeInterval.day: return index_1.TimeInterval.month;
            case index_1.TimeInterval.day3: return index_1.TimeInterval.month;
            //case TimeInterval.day10: return TimeInterval.year;
            // case TimeInterval.week: return TimeInterval.year;
            // case TimeInterval.month: return TimeInterval.year;
            default: throw new Error("Unexpected time interval " + interval);
        }
    };
    return PPIndicator;
}(index_2.IndicatorDataSource));
exports.PPIndicator = PPIndicator;
var PPSettings = (function () {
    function PPSettings() {
        this.valueType = ValueAccessor_1.ValueAccessorType.close;
    }
    return PPSettings;
}());
exports.PPSettings = PPSettings;
var Line = (function () {
    function Line() {
    }
    return Line;
}());
var PPIndicatorRenderer = (function () {
    function PPIndicatorRenderer() {
    }
    PPIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        // Get first time and last time of visible range
        var timeRange = timeAxis.range;
        // Find candles just before the first, and just after the last time.
        var firstTime = timeRange.start.t.getTime();
        var lastTime = timeRange.end.t.getTime();
        // Go to first candles just before first visible or first
        if (!data.goWhile(function (item) { return item.uid.t.getTime() < firstTime; })) {
            if (!data.goTo(function (item) { return true; })) {
                return;
            }
        }
        // Move next while date is in visible range
        //
        do {
            // Render current candle
            var points = (data.current instanceof PPCandlestick) ? data.current : undefined;
            if (points) {
                var x1 = timeAxis.toX(points.uid);
                var x2 = timeAxis.toX(points.dateEnd);
                // If can not get x coordinates by time axis, draw line to the border
                if (x1 === undefined) {
                    if (points.uid.t.getTime() < firstTime) {
                        x1 = -1;
                    }
                    if (points.uid.t.getTime() < lastTime) {
                        x1 = frame.x + frame.w + 1;
                    }
                }
                if (x2 === undefined) {
                    if (points.dateEnd.t.getTime() < firstTime) {
                        x2 = -1;
                    }
                    if (points.dateEnd.t.getTime() < lastTime) {
                        x2 = frame.x + frame.w + 1;
                    }
                }
                var line = new Line();
                line.x1 = x1;
                line.x2 = x2;
                if (points.p !== undefined && points.r1 !== undefined && points.r2 !== undefined && points.s1 !== undefined && points.s2 !== undefined) {
                    line.y1 = yAxis.toX(points.p);
                    line.y2 = yAxis.toX(points.r1);
                    line.y3 = yAxis.toX(points.r2);
                    line.y4 = yAxis.toX(points.s1);
                    line.y5 = yAxis.toX(points.s2);
                    canvas.beginPath();
                    canvas.setStrokeStyle('#56B50E');
                    this.line(canvas, line.x1, line.y1, line.x2, line.y1);
                    this.line(canvas, line.x1, line.y2, line.x2, line.y2);
                    this.line(canvas, line.x1, line.y3, line.x2, line.y3);
                    this.line(canvas, line.x1, line.y4, line.x2, line.y4);
                    this.line(canvas, line.x1, line.y5, line.x2, line.y5);
                    canvas.stroke();
                }
            }
        } while (data.moveNext() && data.current.uid.t.getTime() <= lastTime);
    };
    PPIndicatorRenderer.prototype.line = function (canvas, x1, y1, x2, y2) {
        if (x1 !== undefined && x2 !== undefined && y1 !== undefined && y2 !== undefined) {
            canvas.moveTo(x1, y1);
            canvas.lineTo(x2, y2);
        }
    };
    PPIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    PPIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    PPIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return PPIndicatorRenderer;
}());
exports.PPIndicatorRenderer = PPIndicatorRenderer;
},{"../core/index":53,"../data/index":71,"../model/index":142,"../utils/index":175,"./CandlestickExt":100,"./ValueAccessor":132}],115:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
// SAR(n+1) = SAR(n) + A x (EP - SAR(n))
var Trend;
(function (Trend) {
    Trend[Trend["None"] = 0] = "None";
    Trend[Trend["Up"] = 1] = "Up";
    Trend[Trend["Down"] = 2] = "Down";
})(Trend = exports.Trend || (exports.Trend = {}));
var PSARCandlestick = (function (_super) {
    __extends(PSARCandlestick, _super);
    function PSARCandlestick() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.trend = Trend.None;
        return _this;
    }
    PSARCandlestick.prototype.toString = function (precision) {
        return 'SAR: '
            + ("" + (this.SAR !== undefined ? this.SAR.toFixed(precision) : 'n/a'))
            + ' / EP: '
            + ("" + (this.EP !== undefined ? this.EP.toFixed(precision) : 'n/a'));
    };
    return PSARCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.PSARCandlestick = PSARCandlestick;
var PSARIndicator = (function (_super) {
    __extends(PSARIndicator, _super);
    function PSARIndicator(source, context) {
        var _this = _super.call(this, PSARCandlestick, source, context) || this;
        _this.extsettings = new PSARSettings();
        _this.name = 'PSAR';
        return _this;
    }
    Object.defineProperty(PSARIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    PSARIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var initialFactor = this.extsettings.initialFactor;
        var increment = this.extsettings.increment;
        var maxFactor = this.extsettings.maxFactor;
        var sourceCur = sourceItems.last(); // source must contain at least one item.
        var sourcePrev = sourceItems.length > 1 ? sourceItems.getItem(sourceItems.length - 2) : undefined;
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new PSARCandlestick(sourceCur.date);
        computed.uidOrig.t = sourceCur.uid.t;
        computed.uidOrig.n = sourceCur.uid.n;
        if (sourceCur.h === undefined || sourceCur.l === undefined) {
            if (lastComputed !== undefined) {
                computed.a = lastComputed.a;
                computed.EP = lastComputed.EP;
                computed.SAR = lastComputed.SAR;
                computed.trend = lastComputed.trend;
            }
        }
        else {
            if (lastComputed !== undefined && lastComputed.SAR !== undefined) {
                // 1. Compute SAR
                //
                var SAR = void 0;
                var SARprev = lastComputed.SAR;
                var a = lastComputed.a;
                var EP = lastComputed.EP;
                var trend = lastComputed.trend;
                if (trend === Trend.Up) {
                    SAR = SARprev + a * (EP - SARprev);
                }
                else if (trend === Trend.Down) {
                    SAR = SARprev - a * (SARprev - EP);
                }
                else {
                    throw new Error('Undefined trend.');
                }
                // 2. Correct SAR. SAR can't get inside or beyound previous (2) range.
                //
                if (sourcePrev !== undefined && sourcePrev.h !== undefined && sourcePrev.l !== undefined) {
                    if (trend === Trend.Up && SAR > sourcePrev.l) {
                        // correct SAR
                        SAR = sourcePrev.l;
                    }
                    else if (trend === Trend.Down && SAR < sourcePrev.h) {
                        SAR = sourcePrev.h;
                    }
                }
                // 3. Check if trend changes or continues
                //
                if ((trend === Trend.Up && SAR > sourceCur.l)
                    || (trend === Trend.Down && SAR < sourceCur.h)) {
                    // Trend changes
                    computed.trend = trend === Trend.Up ? Trend.Down : Trend.Up;
                    computed.a = initialFactor;
                    computed.EP = trend === Trend.Up ? sourceCur.l : sourceCur.h;
                    computed.SAR = EP; // New SAR is EP from previous trend
                }
                else {
                    // Trend continues
                    computed.trend = trend;
                    computed.SAR = SAR;
                    computed.EP = trend === Trend.Up ? Math.max(EP, sourceCur.h) : Math.min(EP, sourceCur.l);
                    // Increment "a" if new highest high or lowest low. If HH / LL is not changed, do not increment "a".
                    computed.a = (computed.EP !== EP) ? Math.min(a + increment, maxFactor) : a;
                }
            }
            else {
                // Computing first SAR
                computed.trend = Trend.Up;
                computed.a = initialFactor;
                computed.EP = sourceCur.h;
                computed.SAR = sourceCur.l;
            }
        }
        return computed;
    };
    PSARIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('initialFactor', new index_1.SettingSet({
            name: 'initialFactor',
            value: this.extsettings.initialFactor.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Initial factor'
        }));
        group.setSetting('increment', new index_1.SettingSet({
            name: 'increment',
            value: this.extsettings.increment.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Increment'
        }));
        group.setSetting('maxFactor', new index_1.SettingSet({
            name: 'maxFactor',
            value: this.extsettings.maxFactor.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Maximum factor'
        }));
        return group;
    };
    PSARIndicator.prototype.setSettings = function (value) {
        var initialFactor = value.getSetting('datasource.initialFactor');
        this.extsettings.initialFactor = (initialFactor && initialFactor.value) ? parseInt(initialFactor.value, 10) : this.extsettings.initialFactor;
        var increment = value.getSetting('datasource.increment');
        this.extsettings.increment = (increment && increment.value) ? parseInt(increment.value, 10) : this.extsettings.increment;
        var maxFactor = value.getSetting('datasource.maxFactor');
        this.extsettings.maxFactor = (maxFactor && maxFactor.value) ? parseInt(maxFactor.value, 10) : this.extsettings.maxFactor;
        // recompute
        this.compute();
    };
    return PSARIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.PSARIndicator = PSARIndicator;
var PSARSettings = (function () {
    function PSARSettings() {
        this.initialFactor = 0.02;
        this.increment = 0.02;
        this.maxFactor = 0.2;
    }
    return PSARSettings;
}());
var PSARIndicatorRenderer = (function () {
    function PSARIndicatorRenderer() {
    }
    PSARIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        index_2.RenderUtils.iterate(timeAxis, data, function (item, x) {
            var curItem = (item instanceof PSARCandlestick) ? item : undefined;
            if (curItem && curItem.SAR !== undefined) {
                var y = yAxis.toX(curItem.SAR);
                canvas.beginPath();
                if (curItem.trend === Trend.Up) {
                    canvas.setStrokeStyle('#56B50E');
                    canvas.setFillStyle('#56B50E');
                }
                else {
                    canvas.setStrokeStyle('#EA0E1C');
                    canvas.setFillStyle('#EA0E1C');
                }
                canvas.arc(x, y, 2, 0, 360);
                canvas.fill();
                canvas.stroke();
            }
        });
        // timeAxis.reset();
        // while (timeAxis.moveNext()) {
        //     const curUid = timeAxis.current;
        //     const curTime = curUid.t.getTime();
        //     const curn = curUid.n;
        //     const x = timeAxis.currentX;
        //     if (!found) {
        //         found = data.goTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn);
        //     } else {
        //         found = data.moveTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn) !== -1;
        //     }
        //     if (found) {
        //         const curItem = (data.current instanceof PSARCandlestick) ? <PSARCandlestick>data.current : undefined;
        //         if (curItem && curItem.SAR !== undefined) {
        //             const y = yAxis.toX(curItem.SAR);
        //             canvas.beginPath();
        //             if (curItem.trend === Trend.Up) {
        //                 canvas.setStrokeStyle('#56B50E');
        //                 canvas.setFillStyle('#56B50E');
        //             } else {
        //                 canvas.setStrokeStyle('#EA0E1C');
        //                 canvas.setFillStyle('#EA0E1C');
        //             }
        //             canvas.arc(x, y, 2, 0, 360);
        //             canvas.fill();
        //             canvas.stroke();
        //         }
        //     }
        // }
    };
    PSARIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    PSARIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    PSARIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return PSARIndicatorRenderer;
}());
exports.PSARIndicatorRenderer = PSARIndicatorRenderer;
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./SimpleIndicator":125}],116:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../shared/index");
var index_4 = require("../utils/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var ValueAccessor_1 = require("./ValueAccessor");
// RATIOCATOR = 100 * (pa/pb) / (A1/B1)
var RATIOIndicator = (function (_super) {
    __extends(RATIOIndicator, _super);
    function RATIOIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.extsettings = new RATIOSettings();
        _this.handler = function (res) {
            var candleA = res[0], candleB = res[1];
            if (candleA !== undefined && candleB !== undefined) {
                // Compute base koefficient and recompute
                var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(_this.extsettings.valueType);
                var p = accessor(candleA);
                var s = accessor(candleB);
                if (p !== undefined && s !== undefined && s !== 0) {
                    _this.base = p / s;
                    _this.compute();
                    _this.context.render();
                }
            }
        };
        _this.name = 'RATIO';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        return _this;
    }
    RATIOIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(this.extsettings.valueType);
        // Get compare data souce
        var compareDataSource = this.extsettings.uid ? this.context.register.getItem(this.extsettings.uid) : undefined;
        if (!compareDataSource) {
            return;
        }
        var sourceIter = this.source.getIterator();
        var compareIter = compareDataSource.getIterator();
        // Get base value
        if (this.base === undefined) {
            if (this.extsettings.basedate) {
                // load candles on specified date
                var promiseA = this.context.getCandle(this.source.asset, this.extsettings.basedate, this.context.interval());
                var promiseB = this.context.getCandle(compareDataSource.asset, this.extsettings.basedate, this.context.interval());
                Promise.all([promiseA, promiseB]).then(this.handler);
            }
            return;
        }
        // Go to first element
        if (arg) {
            sourceIter.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!sourceIter.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // 
        var found = false;
        var firstUid = sourceIter.current.uid;
        var lastUid;
        var computedArray = [];
        var _loop_1 = function () {
            var source = sourceIter.current;
            lastUid = source.uid;
            if (found) {
                found = compareIter.moveTo(function (citem) { return source.uid.compare(citem.uid) === 0; }) !== -1;
            }
            else {
                found = compareIter.goTo(function (citem) { return source.uid.compare(citem.uid) === 0; });
            }
            if (found) {
                var computed = this_1.computeOne(source, compareIter.current, this_1.base, accessor);
                computedArray.push(computed);
            }
        };
        var this_1 = this;
        do {
            _loop_1();
        } while (sourceIter.moveNext());
        // Merge using origUid, not uid
        this.dataStorage.merge(computedArray);
        var origArg = new index_2.DataChangedArgument(firstUid, lastUid, computedArray.length);
        return origArg;
    };
    RATIOIndicator.prototype.computeOne = function (sourceItem, compareItem, base, accessor) {
        var p = accessor(sourceItem);
        var s = accessor(compareItem);
        var computed = new CandlestickExt_1.CandlestickExt(sourceItem.date);
        computed.uidOrig.t = sourceItem.uid.t;
        computed.uidOrig.n = sourceItem.uid.n;
        if (p !== undefined && s !== undefined && s !== 0 && base !== 0) {
            computed.c = 100 * (p / s) / base;
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    RATIOIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('basedate', new index_1.SettingSet({
            name: 'basedate',
            displayName: 'Base date',
            value: this.extsettings.basedate ? index_4.DateUtils.formatDateISO(this.extsettings.basedate) : '',
            settingType: index_1.SettingType.date
        }));
        var sources = this.context.register.list();
        sources.push(new index_3.IdValue('', ''));
        group.setSetting('uid', new index_1.SettingSet({
            name: 'uid',
            displayName: 'Compare',
            value: this.extsettings.uid,
            settingType: index_1.SettingType.select,
            options: sources.map(function (item) { return { value: item.id, text: item.value }; })
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.extsettings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    RATIOIndicator.prototype.setSettings = function (value) {
        var uid = value.getSetting('datasource.uid');
        this.extsettings.uid = (uid && uid.value) ? uid.value : this.extsettings.uid;
        var d = value.getSetting('datasource.basedate');
        this.extsettings.basedate = (d && d.value) ? index_4.DateUtils.parseISODate(d.value) : undefined;
        var valueType = value.getSetting('datasource.valueType');
        this.extsettings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.extsettings.valueType;
        // cleare stored base value
        this.base = undefined;
        // recompute
        this.compute();
    };
    return RATIOIndicator;
}(index_2.IndicatorDataSource));
exports.RATIOIndicator = RATIOIndicator;
var RATIOSettings = (function () {
    function RATIOSettings() {
        this.period = 10;
        this.valueType = ValueAccessor_1.ValueAccessorType.close;
    }
    return RATIOSettings;
}());
},{"../core/index":53,"../data/index":71,"../shared/index":166,"../utils/index":175,"./CandlestickExt":100,"./MovingAverage":112,"./ValueAccessor":132}],117:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var RainbowCandlestick = (function (_super) {
    __extends(RainbowCandlestick, _super);
    function RainbowCandlestick(date, c, o, h, l) {
        var _this = _super.call(this, date, c, o, h, l) || this;
        _this.line = [];
        return _this;
    }
    RainbowCandlestick.prototype.toString = function () {
        return '';
    };
    return RainbowCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.RainbowCandlestick = RainbowCandlestick;
var RBIndicator = (function (_super) {
    __extends(RBIndicator, _super);
    function RBIndicator(source, context) {
        var _this = _super.call(this, RainbowCandlestick, source, context) || this;
        _this.name = 'RB';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        _this.settings.period = Math.max.apply(Math, RBIndicator.periods); // Taking max item as required amount of items
        return _this;
    }
    RBIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new RainbowCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            for (var i = 0; i < RBIndicator.K; i += 1) {
                var lastComputedValue = lastComputed !== undefined ? lastComputed.line[i] : undefined;
                computed.line[i] = this.ma.compute(RBIndicator.periods[i], sourceItems, accessor, undefined, lastComputedValue);
            }
        }
        return computed;
    };
    RBIndicator.prototype.getSettings = function () {
        return new index_1.SettingSet({ name: 'datasource', group: true });
    };
    RBIndicator.prototype.setSettings = function (value) {
        // recompute
        this.compute();
    };
    return RBIndicator;
}(SimpleIndicator_1.SimpleIndicator));
RBIndicator.periods = [9, 12, 15, 18, 21, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 100];
RBIndicator.K = RBIndicator.periods.length; // Amount of periods
exports.RBIndicator = RBIndicator;
var RBIndicatorRenderer = (function () {
    function RBIndicatorRenderer() {
    }
    RBIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        var _loop_1 = function (i) {
            var color = this_1.rainbow(RBIndicator.K, i);
            canvas.beginPath();
            canvas.setStrokeStyle(color);
            // Up
            index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
                if (item instanceof RainbowCandlestick) {
                    var d = item;
                    if (d && d.line[i] !== undefined) {
                        var value = d.line[i];
                        return { uid: item.uid, v: value };
                    }
                }
            }, frame, timeAxis, yAxis);
            canvas.stroke();
        };
        var this_1 = this;
        for (var i = 0; i < RBIndicator.K; i += 1) {
            _loop_1(i);
        }
    };
    RBIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    RBIndicatorRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('visual');
    };
    RBIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    RBIndicatorRenderer.prototype.rainbow = function (numOfSteps, step) {
        var r = 0.0;
        var g = 0.0;
        var b = 0.0;
        var h = step / numOfSteps;
        var i = Math.floor(h * 6);
        var f = h * 6.0 - i;
        var q = 1 - f;
        switch (i % 6) {
            case 0:
                r = 1;
                g = f;
                b = 0;
                break;
            case 1:
                r = q;
                g = 1;
                b = 0;
                break;
            case 2:
                r = 0;
                g = 1;
                b = f;
                break;
            case 3:
                r = 0;
                g = q;
                b = 1;
                break;
            case 4:
                r = f;
                g = 0;
                b = 1;
                break;
            case 5:
                r = 1;
                g = 0;
                b = q;
                break;
            default:
                throw new Error('Invalid operation');
        }
        return '#'
            + ('00' + (parseInt((r * 255).toString(), 10)).toString(16)).slice(-2)
            + ('00' + (parseInt((g * 255).toString(), 10)).toString(16)).slice(-2)
            + ('00' + (parseInt((b * 255).toString(), 10)).toString(16)).slice(-2);
    };
    return RBIndicatorRenderer;
}());
exports.RBIndicatorRenderer = RBIndicatorRenderer;
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],118:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// Roc = 100 x ( Close[t] - Close[t-N] ) / Close[t-N] 
var ROCIndicator = (function (_super) {
    __extends(ROCIndicator, _super);
    function ROCIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'ROC';
        return _this;
    }
    Object.defineProperty(ROCIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return this.settings.period + 1; // ROC requires one extra item
        },
        enumerable: true,
        configurable: true
    });
    ROCIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var L = sourceItems.length;
        var source = sourceItems.last();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var i = L - (N + 1);
        if (i >= 0 && i < sourceItems.length) {
            var prev = sourceItems.getItem(i);
            var curValue = accessor(source);
            var prevValue = accessor(prev);
            if (curValue !== undefined && prevValue !== undefined) {
                computed.c = 100 * (curValue - prevValue) / prevValue;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    ROCIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    ROCIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return ROCIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.ROCIndicator = ROCIndicator;
},{"../core/index":53,"./CandlestickExt":100,"./SimpleIndicator":125,"./ValueAccessor":132}],119:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// RS = AVG (upward) / AVG (downward);  
// RSI = 100 - (100 / (1 + RS));
var RSICandlestick = (function (_super) {
    __extends(RSICandlestick, _super);
    function RSICandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RSICandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.RSICandlestick = RSICandlestick;
var RSIOscillator = (function (_super) {
    __extends(RSIOscillator, _super);
    function RSIOscillator(source, context) {
        var _this = _super.call(this, RSICandlestick, source, context) || this;
        _this.name = 'RSI';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.ADX);
        // RSI requires Gain/Loss
        _this.initExtension();
        // Set default settings
        _this.settings.period = 14;
        _this.settings.valueType = ValueAccessor_1.ValueAccessorType.close;
        return _this;
    }
    RSIOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var _this = this;
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new RSICandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        // Compute average gain/loss
        var lastComputedGain = lastComputed !== undefined ? lastComputed.avgGain : undefined;
        computed.avgGain = this.ma.compute(N, sourceItems, function (candle) { return _this.ext.value(candle).gain; }, undefined, lastComputedGain);
        var lastComputedLoss = lastComputed !== undefined ? lastComputed.avgLoss : undefined;
        computed.avgLoss = this.ma.compute(N, sourceItems, function (candle) { return _this.ext.value(candle).loss; }, undefined, lastComputedLoss);
        if (computed.avgGain !== undefined && computed.avgLoss !== undefined && computed.avgLoss !== 0) {
            var RS = computed.avgGain / computed.avgLoss;
            var RSI = 100 - (100 / (1 + RS));
            computed.c = RSI;
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    RSIOscillator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    RSIOscillator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_2.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_2.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    RSIOscillator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // re-init extension to new value
        this.initExtension();
        // recompute
        this.compute();
    };
    RSIOscillator.prototype.initExtension = function () {
        // remove old extension and add new one
        //
        if (this.ext) {
            this.source.removeExtension(this.ext.uname);
        }
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(this.settings.valueType);
        this.ext = new index_1.GainLossExtension(accessor);
        this.source.addExtension(this.ext.uname, this.ext);
    };
    return RSIOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.RSIOscillator = RSIOscillator;
},{"../compute/index":40,"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./ValueAccessor":132}],120:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// RSL = Close / MA
var RSLCandlestick = (function (_super) {
    __extends(RSLCandlestick, _super);
    function RSLCandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RSLCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.RSLCandlestick = RSLCandlestick;
var RSLOscillator = (function (_super) {
    __extends(RSLOscillator, _super);
    function RSLOscillator(source, context) {
        var _this = _super.call(this, RSLCandlestick, source, context) || this;
        _this.name = 'RSL';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        // Set default settings
        _this.settings.period = 27;
        return _this;
    }
    RSLOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new RSLCandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        // Compute average gain/loss
        var lastComputedMA = lastComputed !== undefined ? lastComputed.MA : undefined;
        computed.MA = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedMA);
        if (computed.MA !== undefined && value !== undefined) {
            computed.c = computed.MA !== 0 ? value / computed.MA : undefined;
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    return RSLOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.RSLOscillator = RSLOscillator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],121:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var SMAIndicator = (function (_super) {
    __extends(SMAIndicator, _super);
    function SMAIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'SMA';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        return _this;
    }
    SMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
            computed.c = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedValue);
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    return SMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.SMAIndicator = SMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],122:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var SMMAIndicator = (function (_super) {
    __extends(SMMAIndicator, _super);
    function SMMAIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'SMMA';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Smoothed);
        return _this;
    }
    SMMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
            computed.c = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedValue);
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    return SMMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.SMMAIndicator = SMMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],123:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
var STDEVIndicator = (function (_super) {
    __extends(STDEVIndicator, _super);
    function STDEVIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'STDEV';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Weight);
        _this.settings.period = 10;
        return _this;
    }
    STDEVIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var array = [];
        var sum = 0;
        for (var i = sourceItems.length - 1; i >= 0 && array.length < N; i -= 1) {
            var value = accessor(sourceItems.getItem(i));
            if (value !== undefined) {
                array.push(value);
                sum += value;
            }
        }
        if (array.length < N || array.length === 0) {
            return computed;
        }
        var avg = sum / array.length;
        var sumSqrtDev = array.reduce(function (prev, cur) { return prev + Math.pow(cur - avg, 2); }, 0);
        computed.c = Math.sqrt(sumSqrtDev / array.length);
        computed.h = computed.c;
        computed.l = computed.c;
        return computed;
    };
    STDEVIndicator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_1.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_1.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    STDEVIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // recompute
        this.compute();
    };
    return STDEVIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.STDEVIndicator = STDEVIndicator;
},{"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./ValueAccessor":132}],124:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var index_3 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// Upper = hl2 + M x ATR (if Close > ST prev on down trend)
// Lower = hl2 - M x ATR (if Close < ST prev on upper trend)
var Type;
(function (Type) {
    Type[Type["Undef"] = 0] = "Undef";
    Type[Type["Up"] = 1] = "Up";
    Type[Type["Down"] = 2] = "Down";
})(Type = exports.Type || (exports.Type = {}));
var STCandlestick = (function (_super) {
    __extends(STCandlestick, _super);
    function STCandlestick() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.trend = Type.Undef;
        return _this;
    }
    STCandlestick.prototype.toString = function (precision) {
        return "" + (this.c !== undefined ? this.c.toFixed(precision) : 'n/a');
    };
    return STCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.STCandlestick = STCandlestick;
var STIndicator = (function (_super) {
    __extends(STIndicator, _super);
    function STIndicator(source, context) {
        var _this = _super.call(this, STCandlestick, source, context) || this;
        _this.extsettings = new STSettings();
        _this.name = 'ST';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.ADX);
        // Adding TR to build ATR
        _this.source.addExtension(index_1.TrueRangeExtension.uname, new index_1.TrueRangeExtension());
        // Set default settings
        _this.settings.period = 10;
        return _this;
    }
    STIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var multiplier = this.extsettings.multiplier;
        var current = sourceItems.last();
        var prev = sourceItems.length > 1 ? sourceItems.getItem(sourceItems.length - 1) : undefined;
        var lastComputed = computedArray.lastOrDefault();
        var computed = new STCandlestick(current.date);
        computed.uidOrig.t = current.uid.t;
        computed.uidOrig.n = current.uid.n;
        // Build ATR
        var lastComputedValue = lastComputed !== undefined ? lastComputed.ATR : undefined;
        computed.ATR = this.ma.compute(N, sourceItems, function (c) { return c.ext['tr']; }, undefined, lastComputedValue);
        if (current.c !== undefined && current.h !== undefined && current.l !== undefined && computed.ATR !== undefined) {
            // Defining current trend
            //
            computed.trend = Type.Up; // default trend
            if (lastComputed !== undefined && lastComputed.c !== undefined) {
                if (lastComputed.trend === Type.Up && current.c < lastComputed.c) {
                    computed.trend = Type.Down;
                }
                else if (lastComputed.trend === Type.Down && current.c > lastComputed.c) {
                    computed.trend = Type.Up;
                }
                else if (lastComputed.trend !== Type.Undef) {
                    computed.trend = lastComputed.trend;
                }
            }
            // Computing up/down trend values
            var hl2 = (current.h + current.l) / 2;
            var up = hl2 - multiplier * computed.ATR;
            var down = hl2 + multiplier * computed.ATR;
            //computed.trendUp = ( prev.c > lastComputed.trendUp ) ? Math.max(up, lastComputed.trendUp) : up;
            computed.trendUp = up;
            //computed.trendDown = ( sourceprev.c < lastComputed.trendDown ) ? Math.min(down, lastComputed.trendDown) : down;
            computed.trendDown = down;
            if (prev !== undefined && prev.c !== undefined && lastComputed !== undefined && lastComputed.trendUp !== undefined
                && prev.c > lastComputed.trendUp) {
                computed.trendUp = Math.max(up, lastComputed.trendUp);
            }
            if (prev !== undefined && prev.c !== undefined && lastComputed !== undefined && lastComputed.trendDown !== undefined
                && prev.c < lastComputed.trendDown) {
                computed.trendDown = Math.min(down, lastComputed.trendDown);
            }
            // Computing supertrend
            //
            if (computed.trend === Type.Up) {
                computed.c = computed.trendUp;
            }
            else if (computed.trend === Type.Down) {
                computed.c = computed.trendDown;
            }
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    STIndicator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('multiplier', new index_2.SettingSet({
            name: 'multiplier',
            value: this.extsettings.multiplier.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Factor'
        }));
        return group;
    };
    STIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var multiplier = value.getSetting('datasource.multiplier');
        this.extsettings.multiplier = (multiplier && multiplier.value) ? parseFloat(multiplier.value) : this.extsettings.multiplier;
        // recompute
        this.compute();
    };
    return STIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.STIndicator = STIndicator;
var STSettings = (function () {
    function STSettings() {
        this.multiplier = 3;
    }
    return STSettings;
}());
var STIndicatorRenderer = (function () {
    function STIndicatorRenderer() {
    }
    STIndicatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        var found = false;
        var curPoint = undefined;
        var prevPoint = undefined;
        var curItem = undefined;
        var prevItem = undefined;
        index_3.RenderUtils.iterate(timeAxis, data, function (item, x) {
            curItem = (item instanceof STCandlestick) ? item : undefined;
            var cur = undefined;
            if (curItem) {
                var st = curItem;
                if (st && st.c !== undefined) {
                    cur = { uid: curItem.uid, v: st.c };
                    var y = yAxis.toX(cur.v);
                    curPoint = { x: x, y: y };
                    if (prevItem) {
                        if (curItem.trend === Type.Up && prevItem.trend === Type.Up) {
                            canvas.setStrokeStyle('#56B50E');
                        }
                        else if (curItem.trend === Type.Down && prevItem.trend === Type.Down) {
                            canvas.setStrokeStyle('#FF0000');
                        }
                        else {
                            canvas.setStrokeStyle('#606060');
                        }
                    }
                    if (prevPoint) {
                        canvas.beginPath();
                        canvas.moveTo(prevPoint.x, prevPoint.y);
                        canvas.lineTo(curPoint.x, curPoint.y);
                        canvas.stroke();
                    }
                    prevItem = curItem;
                    prevPoint = curPoint;
                }
            }
        });
    };
    STIndicatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    STIndicatorRenderer.prototype.getSettings = function () {
        return new index_2.SettingSet('visual');
    };
    STIndicatorRenderer.prototype.setSettings = function (settings) {
    };
    return STIndicatorRenderer;
}());
exports.STIndicatorRenderer = STIndicatorRenderer;
},{"../compute/index":40,"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],125:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../data/index");
var index_3 = require("../model/index");
var index_4 = require("../shared/index");
var ValueAccessor_1 = require("./ValueAccessor");
var SimpleIndicator = (function (_super) {
    __extends(SimpleIndicator, _super);
    function SimpleIndicator(dataType, source, context) {
        var _this = _super.call(this, dataType, source, context, function (lhs, rhs) { return lhs.uidOrig.compare(rhs.uidOrig); }) || this;
        _this.settings = new SimpleSettings();
        return _this;
    }
    Object.defineProperty(SimpleIndicator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return this.settings.period; // By default loading period number of items
        },
        enumerable: true,
        configurable: true
    });
    SimpleIndicator.prototype.compute = function (arg) {
        // If arg is not defined build all data
        // Compute data till the end (update data from current place to end)
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(this.settings.valueType);
        // Remove extended (fake) items
        this.dataStorage.trimRight(function (item) { return item.isFake; });
        this.dataStorage.trimLeft(function (item) { return item.isFake; });
        var computedArray = [];
        var N = this.requiredItemsOnCompute; //this.settings.period;
        var sourceItems = new index_4.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        var computedItems = new index_4.FixedSizeArray(N, function (lhs, rhs) { throw new Error('Not implemented.'); });
        // Get source data without loading
        var iterator = this.source.getIterator();
        // Select last source items
        if (arg) {
            if (!iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; })) {
                throw new Error('Source does not contain updated data');
            }
            var prev = index_2.IndicatorDataSource.getPreviousItems(iterator, N - 1);
            sourceItems.pushRange(prev);
        }
        // Get last computed items
        if (arg) {
            var iter = this.dataStorage.getIterator();
            if (iter.goTo(function (item) { return item.uidOrig.compare(arg.uidFirst) === 0; })) {
                computedArray = index_2.IndicatorDataSource.getPreviousItems(iter, N - 1);
                computedItems.pushRange(computedArray);
            }
        }
        // Go to first element
        if (arg) {
            iterator.goTo(function (item) { return item.uid.compare(arg.uidFirst) === 0; });
        }
        else {
            if (!iterator.moveNext()) {
                return;
            } // Finish if no data
        }
        // Calculations
        // 
        var firstUid = iterator.current.uid;
        var lastUid;
        do {
            lastUid = iterator.current.uid;
            sourceItems.push(iterator.current);
            var computed = this.computeOne(sourceItems, computedItems, accessor);
            computedArray.push(computed);
            computedItems.push(computed);
            //lastComputed = computed;
        } while (iterator.moveNext());
        // Merge using origUid, not uid
        this.dataStorage.merge(computedArray);
        this.afterCompute(arg);
        var origArg = new index_2.DataChangedArgument(firstUid, lastUid, computedArray.length);
        // Update shift
        var shiftedArg = this.shiftTime(origArg, this.settings.displacement);
        return shiftedArg;
    };
    SimpleIndicator.prototype.afterCompute = function (arg) { };
    SimpleIndicator.prototype.shiftTime = function (arg, shift) {
        // TODO: arg can narrow shift area
        if (shift > 0) {
            this.shiftTimeRight(shift);
        }
        else if (shift < 0) {
            this.shiftTimeLeft(shift);
        }
        else {
            this.noshift();
            return arg;
        }
        // Build new DataChangeArgument
        var shiftedFirstUid;
        var shiftedLastUid;
        var iter = this.dataStorage.getIterator();
        if (iter.goTo(function (item) { return item.uidOrig.compare(arg.uidFirst) === 0; })) {
            shiftedFirstUid = iter.current.uid;
        }
        if (iter.goTo(function (item) { return item.uidOrig.compare(arg.uidLast) === 0; })) {
            shiftedLastUid = iter.current.uid;
        }
        // TODO: Init lastUidBefore/lastUidAfter.
        return new index_2.DataChangedArgument(shiftedFirstUid || arg.uidFirst, shiftedLastUid || arg.uidLast, arg.count);
    };
    SimpleIndicator.prototype.noshift = function () {
        // Just copy uid
        var iter = this.dataStorage.getIterator();
        while (iter.moveNext()) {
            iter.current.uid = iter.current.uidOrig;
        }
    };
    // TODO: Unite with shiftRight
    SimpleIndicator.prototype.shiftTimeLeft = function (shift) {
        var isFake = false;
        var iterFirst = this.dataStorage.getIterator();
        var iterLast = this.dataStorage.getIterator();
        if (!iterFirst.goToLast() || !iterLast.goToLast()) {
            // no items to shift
            return;
        }
        // Shift first iterator to start position
        //
        var counter = 0;
        var uidFirst = iterFirst.current.uidOrig;
        while (counter < Math.abs(shift)) {
            isFake = !iterFirst.movePrev();
            if (isFake) {
                uidFirst = this.shiftUid(uidFirst, -1);
            }
            else {
                uidFirst = iterFirst.current.uidOrig;
            }
            counter += 1;
        }
        // Start copying uid loop 
        //
        do {
            // Move uid
            iterLast.current.uid = new index_3.Uid(uidFirst.t, uidFirst.n);
            // Shift one step
            isFake = !iterFirst.movePrev();
            if (isFake) {
                uidFirst = this.shiftUid(uidFirst, -1);
            }
            else {
                uidFirst = iterFirst.current.uidOrig;
            }
        } while (iterLast.movePrev());
    };
    SimpleIndicator.prototype.shiftTimeRight = function (shift) {
        var isFake = false;
        var iterFirst = this.dataStorage.getIterator();
        var iterLast = this.dataStorage.getIterator();
        if (!iterFirst.moveNext() || !iterLast.moveNext()) {
            // no items to shift
            return;
        }
        // Shift first iterator to start position
        //
        var counter = 0;
        var uidFirst = iterFirst.current.uidOrig;
        while (counter < Math.abs(shift)) {
            isFake = !iterFirst.moveNext();
            if (isFake) {
                uidFirst = this.shiftUid(uidFirst, 1);
            }
            else {
                uidFirst = iterFirst.current.uidOrig;
            }
            counter += 1;
        }
        // Start copying uid loop 
        //
        do {
            // Move uid
            iterLast.current.uid = new index_3.Uid(uidFirst.t, uidFirst.n);
            // Shift one step
            isFake = !iterFirst.moveNext();
            if (isFake) {
                uidFirst = this.shiftUid(uidFirst, 1);
            }
            else {
                uidFirst = iterFirst.current.uidOrig;
            }
        } while (iterLast.moveNext());
    };
    SimpleIndicator.prototype.shiftUid = function (uid, shift) {
        return new index_3.Uid(this.addInterval(uid.t, shift));
    };
    SimpleIndicator.prototype.shiftDataExt = function (shift, replace) {
        var iter = this.dataStorage.getIterator();
        this.extend(shift, iter);
        var iterLead = this.dataStorage.getIterator();
        var iterFollow = this.dataStorage.getIterator();
        if (shift > 0) {
            var lead = false;
            var follow = false;
            // Move lead iterator to the last not fake item
            lead = iterLead.goToLast();
            var counter_1 = 0;
            iterLead.somebackward(function (item) {
                counter_1 += 1;
                return item.isFake;
            });
            // Follow iterator should be "shift" items back from lead
            follow = iterFollow.goToLast();
            counter_1 = counter_1 - (shift + 1);
            while (counter_1 > 0) {
                follow = iterFollow.movePrev();
                counter_1 -= 1;
            }
            while (follow) {
                var source = lead ? iterLead.current : undefined;
                var dest = iterFollow.current;
                replace(dest, source); // source can be undefined
                // Move both iterators left
                lead = iterLead.movePrev();
                follow = iterFollow.movePrev();
            }
        }
        else if (shift < 0) {
            var lead = false;
            var follow = false;
            // Move lead iterator to the first not fake item
            var moves = iterLead.moveNext() ? iterLead.moveTo(function (item) { return !item.isFake; }) : -1; // Before moveTo, moveNext should be called
            lead = moves > 0;
            // Follow iterator should be "shift" items back from lead
            moves = moves - Math.abs(shift);
            while (moves > 0) {
                follow = iterFollow.moveNext();
                moves -= 1;
            }
            while (follow) {
                var source = lead ? iterLead.current : undefined;
                var dest = iterFollow.current;
                replace(dest, source); // source can be undefined
                // Move both iterators left
                lead = iterLead.moveNext();
                follow = iterFollow.moveNext();
            }
        }
        else {
            // Source and dest is the same element
            while (iterLead.moveNext()) {
                replace(iterLead.current, iterLead.current);
            }
        }
    };
    SimpleIndicator.prototype.extend = function (shift, iter) {
        if (shift === 0) {
            return;
        }
        // Add fake items. Working with uid_orig
        // If there are already fake items, they should not be removed.
        var extended = [];
        if (shift < 0) {
            // Get count of fake items
            var moved = iter.moveNext() ? iter.moveTo(function (item) { return !item.isFake; }) : -1; // Before moveTo, moveNext should be called
            var fakeItems = (moved !== -1) ? moved - 1 : 0;
            // Add fake items
            var add = Math.abs(shift) - fakeItems;
            // Get first element
            if (iter.goTo(function (item) { return true; })) {
                var uid = iter.current.uid;
                for (var i = 0; i < add; i += 1) {
                    uid = this.shiftUid(uid, shift < 0 ? -1 : 1);
                    var ext = new this.dataType(uid.t);
                    ext.isFake = true;
                    ext.uidOrig = new index_3.Uid(uid.t);
                    extended.push(ext);
                }
            }
        }
        else if (shift > 0) {
            if (iter.goToLast()) {
                var moved_1 = 0;
                iter.somebackward(function (item, counter) {
                    moved_1 = counter;
                    return item.isFake;
                });
                var fakeItems = moved_1;
                var add = Math.abs(shift) - fakeItems;
                iter.goToLast();
                var uid = iter.current.uid;
                for (var i = 0; i < add; i += 1) {
                    uid = this.shiftUid(uid, shift < 0 ? -1 : 1);
                    var ext = new this.dataType(uid.t);
                    ext.isFake = true;
                    ext.uidOrig = new index_3.Uid(uid.t);
                    extended.push(ext);
                }
            }
        }
        this.dataStorage.merge(extended);
    };
    SimpleIndicator.prototype.getSettings = function () {
        return new index_1.SettingSet({
            name: 'datasource',
            group: true,
            settings: [
                {
                    name: 'period',
                    value: this.settings.period.toString(),
                    settingType: index_1.SettingType.numeric,
                    displayName: 'Period'
                }, {
                    name: 'displacement',
                    value: this.settings.displacement.toString(),
                    settingType: index_1.SettingType.numeric,
                    displayName: 'Displacement'
                }, {
                    name: 'valueType',
                    value: this.settings.valueType.toString(),
                    settingType: index_1.SettingType.select,
                    displayName: 'Calculate using',
                    options: [
                        { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                        { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                        { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                        { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                        { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                        { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                        { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                        { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
                    ]
                }
            ]
        });
    };
    SimpleIndicator.prototype.setSettings = function (value) {
        this.settings.period = value.getValueOrDefault('datasource.period', this.settings.period);
        this.settings.displacement = value.getValueOrDefault('datasource.displacement', this.settings.displacement);
        this.settings.valueType = value.getValueOrDefault('datasource.valueType', this.settings.valueType);
        // recompute
        this.compute();
    };
    return SimpleIndicator;
}(index_2.IndicatorDataSource));
exports.SimpleIndicator = SimpleIndicator;
var SimpleSettings = (function () {
    function SimpleSettings() {
        this.period = 20;
        this.displacement = 0;
        this.upperThreshold = 0;
        this.lowerThreshold = 0;
        this.valueType = ValueAccessor_1.ValueAccessorType.close;
    }
    return SimpleSettings;
}());
exports.SimpleSettings = SimpleSettings;
},{"../core/index":53,"../data/index":71,"../model/index":142,"../shared/index":166,"./ValueAccessor":132}],126:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var index_2 = require("../render/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
// Fast %K = 100 x (C-L) / (H-L) // highest high, lowest low
// Fast %D = SMA (Fast %K, 3)
//
// Slow %K = SMA (Fast %K, 3)
// Slow %D = SMA (Slow %K, 3)
var DoubleCandlestick = (function (_super) {
    __extends(DoubleCandlestick, _super);
    function DoubleCandlestick(date, c, o, h, l) {
        return _super.call(this, date, c, o, h, l) || this;
    }
    DoubleCandlestick.prototype.toString = function (precision) {
        return "" + (this.K !== undefined ? this.K.toFixed(precision) : 'n/a')
            + ' / '
            + ("" + (this.D !== undefined ? this.D.toFixed(precision) : 'n/a'));
    };
    return DoubleCandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.DoubleCandlestick = DoubleCandlestick;
var FastStochasticOscillator = (function (_super) {
    __extends(FastStochasticOscillator, _super);
    function FastStochasticOscillator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.extsettings = new FastStochasticSettings();
        _this.name = 'FSTOC';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        // Default settings
        _this.extsettings.periodK = 14;
        _this.extsettings.periodD = 3;
        return _this;
    }
    Object.defineProperty(FastStochasticOscillator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.periodK, this.extsettings.periodD);
        },
        enumerable: true,
        configurable: true
    });
    FastStochasticOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var periodK = this.extsettings.periodK;
        var periodD = this.extsettings.periodD;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = computeFastK(sourceItems, periodK);
        var value = source.c; // this.accessor(source);
        if (value !== undefined) {
            // TODO: Slow %K should start computing only when there is enough values. Not from the start
            var lastComputedFastK = lastComputed !== undefined ? lastComputed.K : undefined;
            computed.fastD = this.ma.compute(periodD, computedArray, function (c) { return c.fastK; }, computed, lastComputedFastK);
            computed.K = computed.fastK;
            computed.D = computed.fastD;
            // computed.c = undefined;
            // computed.h = computed.c;
            // computed.l = computed.c;
        }
        return computed;
    };
    FastStochasticOscillator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    FastStochasticOscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('periodK', new index_1.SettingSet({
            name: 'periodK',
            value: this.extsettings.periodK.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '%K period'
        }));
        group.setSetting('periodD', new index_1.SettingSet({
            name: 'periodD',
            value: this.extsettings.periodD.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '%D period'
        }));
        return group;
    };
    FastStochasticOscillator.prototype.setSettings = function (value) {
        var periodK = value.getSetting('datasource.periodK');
        this.extsettings.periodK = (periodK && periodK.value) ? parseInt(periodK.value, 10) : this.extsettings.periodK;
        var periodD = value.getSetting('datasource.period');
        this.extsettings.periodD = (periodD && periodD.value) ? parseInt(periodD.value, 10) : this.extsettings.periodD;
        // recompute
        this.compute();
    };
    return FastStochasticOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.FastStochasticOscillator = FastStochasticOscillator;
var SlowStochasticOscillator = (function (_super) {
    __extends(SlowStochasticOscillator, _super);
    function SlowStochasticOscillator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.extsettings = new SlowStochasticSettings();
        _this.name = 'SSTOC';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        // Default settings
        _this.extsettings.periodK = 14;
        _this.extsettings.periodD = 3;
        _this.extsettings.period2D = 3;
        return _this;
    }
    Object.defineProperty(SlowStochasticOscillator.prototype, "requiredItemsOnCompute", {
        get: function () {
            return Math.max(this.extsettings.periodK, this.extsettings.periodD, this.extsettings.period2D);
        },
        enumerable: true,
        configurable: true
    });
    SlowStochasticOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var periodK = this.extsettings.periodK;
        var periodD = this.extsettings.periodD;
        var period2D = this.extsettings.period2D;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = computeFastK(sourceItems, periodK);
        var value = source.c; // this.accessor(source);
        if (value !== undefined) {
            // TODO: Slow %K should start computing only when there is enough values. Not from the start
            var lastComputedSlowK = lastComputed !== undefined ? lastComputed.K : undefined;
            computed.K = this.ma.compute(periodD, computedArray, function (c) { return c.fastK; }, computed, lastComputedSlowK);
            var lastComputedSlowD = lastComputed !== undefined ? lastComputed.D : undefined;
            computed.D = this.ma.compute(period2D, computedArray, function (c) { return c.K; }, computed, lastComputedSlowD);
            // computed.c = undefined;
            // computed.h = computed.c;
            // computed.l = computed.c;
        }
        return computed;
    };
    SlowStochasticOscillator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    SlowStochasticOscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('periodK', new index_1.SettingSet({
            name: 'periodK',
            value: this.extsettings.periodK.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '%K period'
        }));
        group.setSetting('periodD', new index_1.SettingSet({
            name: 'periodD',
            value: this.extsettings.periodD.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '%D period'
        }));
        group.setSetting('period2D', new index_1.SettingSet({
            name: 'period2D',
            value: this.extsettings.period2D.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: '2nd %D period'
        }));
        return group;
    };
    SlowStochasticOscillator.prototype.setSettings = function (value) {
        var periodK = value.getSetting('datasource.periodK');
        this.extsettings.periodK = (periodK && periodK.value) ? parseInt(periodK.value, 10) : this.extsettings.periodK;
        var periodD = value.getSetting('datasource.period');
        this.extsettings.periodD = (periodD && periodD.value) ? parseInt(periodD.value, 10) : this.extsettings.periodD;
        var period2D = value.getSetting('datasource.period');
        this.extsettings.period2D = (period2D && period2D.value) ? parseInt(period2D.value, 10) : this.extsettings.period2D;
        // recompute
        this.compute();
    };
    return SlowStochasticOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.SlowStochasticOscillator = SlowStochasticOscillator;
var OBOSOscillator = (function (_super) {
    __extends(OBOSOscillator, _super);
    function OBOSOscillator(source, context) {
        var _this = _super.call(this, DoubleCandlestick, source, context) || this;
        _this.name = 'OBOS';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        // Default settings
        _this.settings.period = 14;
        return _this;
    }
    OBOSOscillator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var periodK = this.settings.period;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = computeFastK(sourceItems, periodK);
        if (computed.fastK !== undefined) {
            computed.c = computed.fastK;
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    OBOSOscillator.prototype.getValuesRange = function (range) {
        return { start: 0, end: 100 };
    };
    OBOSOscillator.prototype.getSettings = function () {
        var group = new index_1.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_1.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_1.SettingType.numeric,
            displayName: 'Period'
        }));
        return group;
    };
    OBOSOscillator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        // recompute
        this.compute();
    };
    return OBOSOscillator;
}(SimpleIndicator_1.SimpleIndicator));
exports.OBOSOscillator = OBOSOscillator;
var FastStochasticSettings = (function () {
    function FastStochasticSettings() {
        this.periodK = 14;
        this.periodD = 3;
    }
    return FastStochasticSettings;
}());
var SlowStochasticSettings = (function () {
    function SlowStochasticSettings() {
        this.periodK = 14;
        this.periodD = 3;
        this.period2D = 3;
    }
    return SlowStochasticSettings;
}());
var StochasticOscillatorRenderer = (function (_super) {
    __extends(StochasticOscillatorRenderer, _super);
    function StochasticOscillatorRenderer() {
        return _super.call(this) || this;
    }
    StochasticOscillatorRenderer.prototype.render = function (canvas, data, frame, timeAxis, yAxis) {
        var overlapfill = this.settings.zone.overlapfill;
        var upthreshold = this.settings.zone.upthreshold;
        var lowthreshold = this.settings.zone.lowthreshold;
        var upper = yAxis.toX(upthreshold);
        var lower = yAxis.toX(lowthreshold);
        // Collect charts points
        //
        var K = [];
        K.length = timeAxis.count; // preallocate memory
        var i = 0;
        index_2.RenderUtils.iterate(timeAxis, data, function (item, x) {
            if (item instanceof DoubleCandlestick) {
                var d = item;
                if (d && d.K !== undefined) {
                    var y = yAxis.toX(d.K);
                    K[i] = { x: x, y: y };
                    i += 1;
                }
            }
        });
        K.length = i;
        if (overlapfill && K.length > 1) {
            index_2.RenderUtils.fillOverlap(canvas, K, upper, true, 'green');
            index_2.RenderUtils.fillOverlap(canvas, K, lower, false, 'red');
        }
        canvas.beginPath();
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var double = item;
                if (double.K !== undefined) {
                    return { uid: item.uid, v: double.K };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.setStrokeStyle('#00B730');
        canvas.stroke();
        canvas.beginPath();
        canvas.setStrokeStyle('#B50021');
        index_2.RenderUtils.renderLineChart(canvas, data, function (item) {
            if (item instanceof DoubleCandlestick) {
                var double = item;
                if (double.D !== undefined) {
                    var value = double.D;
                    return { uid: item.uid, v: value };
                }
            }
        }, frame, timeAxis, yAxis);
        canvas.stroke();
    };
    StochasticOscillatorRenderer.prototype.testHitArea = function (hitPoint, data, frame, timeAxis, yAxis) {
        return undefined;
    };
    StochasticOscillatorRenderer.prototype.getSettings = function () {
        var zone = _super.prototype.getZonesSettings.call(this);
        var visual = new index_1.SettingSet('visual');
        visual.setSetting('zones', zone);
        return visual;
    };
    StochasticOscillatorRenderer.prototype.setSettings = function (settings) {
        var zone = settings.getSetting('visual.zones');
        if (zone) {
            _super.prototype.setZonesSettings.call(this, zone);
        }
    };
    return StochasticOscillatorRenderer;
}(index_2.ChartRenderer));
exports.StochasticOscillatorRenderer = StochasticOscillatorRenderer;
function computeFastK(sourceItems, periodK) {
    var source = sourceItems.last(); // source must contain at least one item.
    var computed = new DoubleCandlestick(source.date);
    computed.uidOrig.t = source.uid.t;
    computed.uidOrig.n = source.uid.n;
    var value = source.c; // accessor(source)
    if (value !== undefined) {
        // calculating min/max with current value
        var H = sourceItems.max(function (c) { return c.h; }, periodK); // highest high for the period
        var L = sourceItems.min(function (c) { return c.l; }, periodK); // lowest low for the period
        if (H !== undefined && L !== undefined) {
            computed.fastK = (L !== H) ? 100 * (value - L) / (H - L) : 100; // fast %K
        }
    }
    return computed;
}
},{"../core/index":53,"../render/index":162,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],127:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var TEMACandlestick = (function (_super) {
    __extends(TEMACandlestick, _super);
    function TEMACandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TEMACandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.TEMACandlestick = TEMACandlestick;
var TEMAIndicator = (function (_super) {
    __extends(TEMAIndicator, _super);
    function TEMAIndicator(source, context) {
        var _this = _super.call(this, TEMACandlestick, source, context) || this;
        _this.name = 'TEMA';
        _this.ema = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Exponential);
        return _this;
    }
    TEMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new TEMACandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedEMA = lastComputed !== undefined ? lastComputed.EMA : undefined;
            // 1. Compute EMA
            computed.EMA = this.ema.compute(N, sourceItems, accessor, undefined, lastComputedEMA);
            if (computed.EMA !== undefined) {
                // 2. Compute DEMA. On base of computed EMA
                var lastComputedDEMA = lastComputed !== undefined ? lastComputed.DEMA : undefined;
                // Adding last computed EMA to calculate DEMA
                computed.DEMA = this.ema.compute(N, computedArray, function (item) { return item.EMA; }, computed, lastComputedDEMA);
                if (computed.DEMA !== undefined) {
                    // 3. Compute TEMA. On base of computed DEMA
                    var lastComputedTEMA = lastComputed !== undefined ? lastComputed.TEMA : undefined;
                    computed.TEMA = this.ema.compute(N, computedArray, function (item) { return item.DEMA; }, computed, lastComputedTEMA);
                    if (computed.TEMA !== undefined) {
                        computed.c = 3 * computed.EMA - 3 * computed.DEMA + computed.TEMA;
                        computed.h = computed.c;
                        computed.l = computed.c;
                    }
                }
            }
        }
        return computed;
    };
    return TEMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.TEMAIndicator = TEMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],128:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var TMACandlestick = (function (_super) {
    __extends(TMACandlestick, _super);
    function TMACandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TMACandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.TMACandlestick = TMACandlestick;
var TMAIndicator = (function (_super) {
    __extends(TMAIndicator, _super);
    function TMAIndicator(source, context) {
        var _this = _super.call(this, TMACandlestick, source, context) || this;
        _this.name = 'TMA';
        _this.sma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        _this.tma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Triangular);
        return _this;
    }
    TMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new TMACandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedSMA = lastComputed !== undefined ? lastComputed.SMA : undefined;
            // 1. Compute SMA
            computed.SMA = this.sma.compute(N, sourceItems, accessor, undefined, lastComputedSMA);
            if (computed.SMA !== undefined) {
                // 2. Compute TMA. On base of computed TMA
                var lastComputedTMA = lastComputed !== undefined ? lastComputed.c : undefined;
                // Adding last computed EMA to calculate DEMA
                var TMA = this.tma.compute(N, computedArray, function (item) { return item.SMA; }, computed, lastComputedTMA);
                if (TMA !== undefined) {
                    computed.c = TMA;
                    computed.h = computed.c;
                    computed.l = computed.c;
                }
            }
        }
        return computed;
    };
    return TMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.TMAIndicator = TMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],129:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var SimpleIndicator_1 = require("./SimpleIndicator");
var TPIndicator = (function (_super) {
    __extends(TPIndicator, _super);
    function TPIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'TP';
        return _this;
    }
    TPIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var source = sourceItems.last();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        if (source.h !== undefined && source.l !== undefined && source.c !== undefined) {
            computed.c = (source.h + source.l + source.c) / 3;
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    TPIndicator.prototype.getSettings = function () {
        return new index_1.SettingSet({ name: 'datasource', group: true });
    };
    TPIndicator.prototype.setSettings = function (value) {
        // recompute
        this.compute();
    };
    return TPIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.TPIndicator = TPIndicator;
},{"../core/index":53,"./CandlestickExt":100,"./SimpleIndicator":125}],130:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = (function () {
    function Utils() {
    }
    /**
     * Standard deviation
     * @param array
     * @param average
     */
    Utils.STDDEV = function (array, accessor, average) {
        var sum = 0;
        for (var i = 0; i < array.length; i += 1) {
            var value = accessor(array.getItem(i));
            if (value !== undefined) {
                sum += Math.pow(value - average, 2);
            }
        }
        return array.length > 0 ? Math.sqrt(sum / array.length) : undefined;
    };
    // MAD = SUM(|Pi - m|) / N
    /**
     * Mean absolute deviation
     * @param N Number of items to take
     * @param array Source items
     * @param accessor Accessor for a item's value
     * @param mean Mean value
     */
    Utils.MAD = function (N, array, accessor, mean) {
        var sum = 0;
        var counter = 0;
        // Taking N items from end
        for (var i = array.length - 1; i >= 0 && counter < N; i -= 1) {
            var value = accessor(array.getItem(i));
            if (value !== undefined) {
                sum += Math.abs(value - mean);
            }
            counter += 1;
        }
        return counter > 0 ? sum / counter : undefined;
    };
    return Utils;
}());
exports.Utils = Utils;
},{}],131:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../compute/index");
var index_2 = require("../core/index");
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var ValueAccessor_1 = require("./ValueAccessor");
// Ri = Log (Pi / P(i-1))
// Avg = SUM(Ri) / n     or moving average
// SSD = SUM (Ri - Avg)
// HV = SQRT(SSD / (n - 1)) * SQRT(TP)
// 
// TP is
// Monthly - 12
// Weekly -  52
// Daily - 252
// Intraday - 252 * bars per day
var RSICandlestick = (function (_super) {
    __extends(RSICandlestick, _super);
    function RSICandlestick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RSICandlestick;
}(CandlestickExt_1.CandlestickExt));
exports.RSICandlestick = RSICandlestick;
var VOLAIndicator = (function (_super) {
    __extends(VOLAIndicator, _super);
    function VOLAIndicator(source, context) {
        var _this = _super.call(this, RSICandlestick, source, context) || this;
        _this.name = 'VOLA';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Simple);
        // VOLA requires "Return"
        _this.initExtension();
        return _this;
    }
    VOLAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last(); // source must contain at least one item.
        var lastComputed = computedArray.lastOrDefault(); // computed can contain no items.
        var computed = new RSICandlestick(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var ext = this.ext;
        // Compute moving average
        var lastComputedMA = lastComputed !== undefined ? lastComputed.MA : undefined;
        computed.MA = this.ma.compute(N, sourceItems, function (candle) { return ext.value(candle); }, undefined, lastComputedMA);
        // Compute diverse
        if (computed.MA !== undefined) {
            var avg_1 = computed.MA;
            var SSD = sourceItems.sum(function (item) {
                var ret = ext.value(item);
                return (ret !== undefined) ? Math.abs(ret - avg_1) : 0;
            }, N);
            var interval = this.getTPByInterval(this.context.interval());
            if (SSD !== undefined && N > 1) {
                // Compute HV
                computed.c = SSD !== 0 ? Math.sqrt(SSD / (N - 1)) * Math.sqrt(interval) : 0;
                computed.h = computed.c;
                computed.l = computed.c;
            }
        }
        return computed;
    };
    /**
     * Returns Trading Period
     * @param interval
     */
    VOLAIndicator.prototype.getTPByInterval = function (interval) {
        switch (interval) {
            case index_2.TimeInterval.month: return 12;
            case index_2.TimeInterval.week: return 52;
            case index_2.TimeInterval.day10: return 25;
            case index_2.TimeInterval.day: return 252;
            case index_2.TimeInterval.hour12: return 252 * 2;
            case index_2.TimeInterval.hour6: return 252 * 4;
            case index_2.TimeInterval.hour4: return 252 * 6;
            case index_2.TimeInterval.hour: return 252 * 24;
            case index_2.TimeInterval.min30: return 252 * 24 * 2;
            case index_2.TimeInterval.min15: return 252 * 24 * 4;
            case index_2.TimeInterval.min5: return 252 * 24 * 12;
            case index_2.TimeInterval.min: return 252 * 24 * 60;
            case index_2.TimeInterval.sec: return 252 * 24 * 60 * 60;
            default:
                throw new Error("Unexpected time interval " + interval);
        }
    };
    VOLAIndicator.prototype.getSettings = function () {
        var group = new index_2.SettingSet({ name: 'datasource', group: true });
        group.setSetting('period', new index_2.SettingSet({
            name: 'period',
            value: this.settings.period.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Period'
        }));
        group.setSetting('valueType', new index_2.SettingSet({
            name: 'valueType',
            displayName: 'Calculate using',
            value: this.settings.valueType.toString(),
            settingType: index_2.SettingType.select,
            options: [
                { value: ValueAccessor_1.ValueAccessorType.close.toString(), text: 'close' },
                { value: ValueAccessor_1.ValueAccessorType.open.toString(), text: 'open' },
                { value: ValueAccessor_1.ValueAccessorType.high.toString(), text: 'high' },
                { value: ValueAccessor_1.ValueAccessorType.low.toString(), text: 'low' },
                { value: ValueAccessor_1.ValueAccessorType.hl2.toString(), text: 'hl2' },
                { value: ValueAccessor_1.ValueAccessorType.hlc3.toString(), text: 'hlc3' },
                { value: ValueAccessor_1.ValueAccessorType.ohlc4.toString(), text: 'ohlc4' },
                { value: ValueAccessor_1.ValueAccessorType.hlcc4.toString(), text: 'hlcc4' }
            ]
        }));
        return group;
    };
    VOLAIndicator.prototype.setSettings = function (value) {
        var period = value.getSetting('datasource.period');
        this.settings.period = (period && period.value) ? parseInt(period.value, 10) : this.settings.period;
        var valueType = value.getSetting('datasource.valueType');
        this.settings.valueType = (valueType && valueType.value) ? parseInt(valueType.value, 10) : this.settings.valueType;
        // re-init extension with new value type
        this.initExtension();
        // recompute
        this.compute();
    };
    VOLAIndicator.prototype.initExtension = function () {
        // remove old extension and add new one
        //
        if (this.ext) {
            this.source.removeExtension(this.ext.uname);
        }
        var accessor = ValueAccessor_1.ValueAccessorFactory.instance.create(this.settings.valueType);
        this.ext = new index_1.LogReturnExtension(accessor);
        this.source.addExtension(this.ext.uname, this.ext);
    };
    return VOLAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.VOLAIndicator = VOLAIndicator;
},{"../compute/index":40,"../core/index":53,"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125,"./ValueAccessor":132}],132:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ValueAccessorType;
(function (ValueAccessorType) {
    ValueAccessorType[ValueAccessorType["open"] = 0] = "open";
    ValueAccessorType[ValueAccessorType["high"] = 1] = "high";
    ValueAccessorType[ValueAccessorType["low"] = 2] = "low";
    ValueAccessorType[ValueAccessorType["close"] = 3] = "close";
    ValueAccessorType[ValueAccessorType["hl2"] = 4] = "hl2";
    ValueAccessorType[ValueAccessorType["hlc3"] = 5] = "hlc3";
    ValueAccessorType[ValueAccessorType["ohlc4"] = 6] = "ohlc4";
    ValueAccessorType[ValueAccessorType["hlcc4"] = 7] = "hlcc4";
})(ValueAccessorType = exports.ValueAccessorType || (exports.ValueAccessorType = {}));
var ValueAccessorFactory = (function () {
    function ValueAccessorFactory() {
        this.open = function (c) { return c.o; };
        this.high = function (c) { return c.h; };
        this.low = function (c) { return c.l; };
        this.close = function (c) { return c.c; };
        this.hl2 = function (c) {
            return (c.h !== undefined && c.l !== undefined) ? (c.h + c.l) / 2 : undefined;
        };
        this.hlc3 = function (c) {
            return (c.h !== undefined && c.l !== undefined && c.c !== undefined) ? (c.h + c.l + c.c) / 3 : undefined;
        };
        this.ohlc4 = function (c) {
            return (c.o !== undefined && c.h !== undefined && c.l !== undefined && c.c !== undefined) ? (c.o + c.h + c.l + c.c) / 4 : undefined;
        };
        this.hlcc4 = function (c) {
            return (c.h !== undefined && c.l !== undefined && c.c !== undefined) ? (c.h + c.l + c.c + c.c) / 4 : undefined;
        };
    }
    Object.defineProperty(ValueAccessorFactory, "instance", {
        get: function () {
            if (!this.inst) {
                this.inst = new ValueAccessorFactory();
            }
            return this.inst;
        },
        enumerable: true,
        configurable: true
    });
    ValueAccessorFactory.prototype.create = function (vaType) {
        switch (vaType) {
            case ValueAccessorType.open: return this.open;
            case ValueAccessorType.high: return this.high;
            case ValueAccessorType.low: return this.low;
            case ValueAccessorType.close: return this.close;
            case ValueAccessorType.hl2: return this.hl2;
            case ValueAccessorType.hlc3: return this.hlc3;
            case ValueAccessorType.ohlc4: return this.ohlc4;
            case ValueAccessorType.hlcc4: return this.hlcc4;
            default: throw new Error('Unexpected value accessor type=' + vaType);
        }
    };
    return ValueAccessorFactory;
}());
exports.ValueAccessorFactory = ValueAccessorFactory;
},{}],133:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CandlestickExt_1 = require("./CandlestickExt");
var MovingAverage_1 = require("./MovingAverage");
var SimpleIndicator_1 = require("./SimpleIndicator");
var WMAIndicator = (function (_super) {
    __extends(WMAIndicator, _super);
    function WMAIndicator(source, context) {
        var _this = _super.call(this, CandlestickExt_1.CandlestickExt, source, context) || this;
        _this.name = 'WMA';
        _this.ma = MovingAverage_1.MovingAverageFactory.instance.create(MovingAverage_1.MovingAverageType.Weight);
        return _this;
    }
    WMAIndicator.prototype.computeOne = function (sourceItems, computedArray, accessor) {
        var N = this.settings.period;
        var source = sourceItems.last();
        var lastComputed = computedArray.lastOrDefault();
        var computed = new CandlestickExt_1.CandlestickExt(source.date);
        computed.uidOrig.t = source.uid.t;
        computed.uidOrig.n = source.uid.n;
        var value = accessor(source);
        if (value !== undefined) {
            var lastComputedValue = lastComputed !== undefined ? lastComputed.c : undefined;
            computed.c = this.ma.compute(N, sourceItems, accessor, undefined, lastComputedValue);
            computed.h = computed.c;
            computed.l = computed.c;
        }
        return computed;
    };
    return WMAIndicator;
}(SimpleIndicator_1.SimpleIndicator));
exports.WMAIndicator = WMAIndicator;
},{"./CandlestickExt":100,"./MovingAverage":112,"./SimpleIndicator":125}],134:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var ADXIndicator_1 = require("./ADXIndicator");
exports.ADXIndicator = ADXIndicator_1.ADXIndicator;
var AlligatorIndicator_1 = require("./AlligatorIndicator");
exports.AlligatorIndicator = AlligatorIndicator_1.AlligatorIndicator;
exports.AlligatorIndicatorRenderer = AlligatorIndicator_1.AlligatorIndicatorRenderer;
var AroonIndicator_1 = require("./AroonIndicator");
exports.AroonIndicator = AroonIndicator_1.AroonIndicator;
exports.AroonIndicatorRenderer = AroonIndicator_1.AroonIndicatorRenderer;
exports.AroonOscillator = AroonIndicator_1.AroonOscillator;
var ATRIndicator_1 = require("./ATRIndicator");
exports.ATRIndicator = ATRIndicator_1.ATRIndicator;
var BollingerIndicator_1 = require("./BollingerIndicator");
exports.BollingerIndicator = BollingerIndicator_1.BollingerIndicator;
exports.BollingerIndicatorRenderer = BollingerIndicator_1.BollingerIndicatorRenderer;
var CCIOscillator_1 = require("./CCIOscillator");
exports.CCIOscillator = CCIOscillator_1.CCIOscillator;
var CORIndicator_1 = require("./CORIndicator");
exports.CORIndicator = CORIndicator_1.CORIndicator;
var DEMAIndicator_1 = require("./DEMAIndicator");
exports.DEMAIndicator = DEMAIndicator_1.DEMAIndicator;
var DIXOscillator_1 = require("./DIXOscillator");
exports.DIXOscillator = DIXOscillator_1.DIXOscillator;
var DMIIndicator_1 = require("./DMIIndicator");
exports.DMIIndicator = DMIIndicator_1.DMIIndicator;
exports.DMIIndicatorRenderer = DMIIndicator_1.DMIIndicatorRenderer;
var DSSBROscillator_1 = require("./DSSBROscillator");
exports.DSSBROscillator = DSSBROscillator_1.DSSBROscillator;
exports.DSSBROscillatorRenderer = DSSBROscillator_1.DSSBROscillatorRenderer;
var EMAIndicator_1 = require("./EMAIndicator");
exports.EMAIndicator = EMAIndicator_1.EMAIndicator;
var HHLLIndicator_1 = require("./HHLLIndicator");
exports.HHLLIndicator = HHLLIndicator_1.HHLLIndicator;
exports.HHLLIndicatorRenderer = HHLLIndicator_1.HHLLIndicatorRenderer;
var IKHIndicator_1 = require("./IKHIndicator");
exports.IKHIndicator = IKHIndicator_1.IKHIndicator;
exports.IKHIndicatorRenderer = IKHIndicator_1.IKHIndicatorRenderer;
var IndicatorFabric_1 = require("./IndicatorFabric");
exports.IndicatorFabric = IndicatorFabric_1.IndicatorFabric;
exports.register = IndicatorFabric_1.register;
var MACDIndicator_1 = require("./MACDIndicator");
exports.MACDIndicator = MACDIndicator_1.MACDIndicator;
exports.MACDIndicatorRenderer = MACDIndicator_1.MACDIndicatorRenderer;
var MDIndicator_1 = require("./MDIndicator");
exports.MDIndicator = MDIndicator_1.MDIndicator;
var MOMIndicator_1 = require("./MOMIndicator");
exports.MOMIndicator = MOMIndicator_1.MOMIndicator;
var PCROscillator_1 = require("./PCROscillator");
exports.PCROscillator = PCROscillator_1.PCROscillator;
var PPIndicator_1 = require("./PPIndicator");
exports.PPIndicator = PPIndicator_1.PPIndicator;
exports.PPIndicatorRenderer = PPIndicator_1.PPIndicatorRenderer;
var PSARIndicator_1 = require("./PSARIndicator");
exports.PSARIndicator = PSARIndicator_1.PSARIndicator;
exports.PSARIndicatorRenderer = PSARIndicator_1.PSARIndicatorRenderer;
var RATIOIndicator_1 = require("./RATIOIndicator");
exports.RATIOIndicator = RATIOIndicator_1.RATIOIndicator;
var RBIndicator_1 = require("./RBIndicator");
exports.RBIndicator = RBIndicator_1.RBIndicator;
exports.RBIndicatorRenderer = RBIndicator_1.RBIndicatorRenderer;
var ROCIndicator_1 = require("./ROCIndicator");
exports.ROCIndicator = ROCIndicator_1.ROCIndicator;
var RSIOscillator_1 = require("./RSIOscillator");
exports.RSIOscillator = RSIOscillator_1.RSIOscillator;
var RSLOscillator_1 = require("./RSLOscillator");
exports.RSLOscillator = RSLOscillator_1.RSLOscillator;
var SMAIndicator_1 = require("./SMAIndicator");
exports.SMAIndicator = SMAIndicator_1.SMAIndicator;
var SMMAIndicator_1 = require("./SMMAIndicator");
exports.SMMAIndicator = SMMAIndicator_1.SMMAIndicator;
var STDEVIndicator_1 = require("./STDEVIndicator");
exports.STDEVIndicator = STDEVIndicator_1.STDEVIndicator;
var STIndicator_1 = require("./STIndicator");
exports.STIndicator = STIndicator_1.STIndicator;
exports.STIndicatorRenderer = STIndicator_1.STIndicatorRenderer;
var StochasticOscillator_1 = require("./StochasticOscillator");
exports.FastStochasticOscillator = StochasticOscillator_1.FastStochasticOscillator;
exports.OBOSOscillator = StochasticOscillator_1.OBOSOscillator;
exports.SlowStochasticOscillator = StochasticOscillator_1.SlowStochasticOscillator;
exports.StochasticOscillatorRenderer = StochasticOscillator_1.StochasticOscillatorRenderer;
var TEMAIndicator_1 = require("./TEMAIndicator");
exports.TEMAIndicator = TEMAIndicator_1.TEMAIndicator;
var TMAIndicator_1 = require("./TMAIndicator");
exports.TMAIndicator = TMAIndicator_1.TMAIndicator;
var TPIndicator_1 = require("./TPIndicator");
exports.TPIndicator = TPIndicator_1.TPIndicator;
var VOLAIndicator_1 = require("./VOLAIndicator");
exports.VOLAIndicator = VOLAIndicator_1.VOLAIndicator;
var WMAIndicator_1 = require("./WMAIndicator");
exports.WMAIndicator = WMAIndicator_1.WMAIndicator;
},{"./ADXIndicator":93,"./ATRIndicator":94,"./AlligatorIndicator":95,"./AroonIndicator":96,"./BollingerIndicator":97,"./CCIOscillator":98,"./CORIndicator":99,"./DEMAIndicator":101,"./DIXOscillator":102,"./DMIIndicator":103,"./DSSBROscillator":104,"./EMAIndicator":105,"./HHLLIndicator":106,"./IKHIndicator":107,"./IndicatorFabric":108,"./MACDIndicator":109,"./MDIndicator":110,"./MOMIndicator":111,"./PCROscillator":113,"./PPIndicator":114,"./PSARIndicator":115,"./RATIOIndicator":116,"./RBIndicator":117,"./ROCIndicator":118,"./RSIOscillator":119,"./RSLOscillator":120,"./SMAIndicator":121,"./SMMAIndicator":122,"./STDEVIndicator":123,"./STIndicator":124,"./StochasticOscillator":126,"./TEMAIndicator":127,"./TMAIndicator":128,"./TPIndicator":129,"./VOLAIndicator":131,"./WMAIndicator":133}],135:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Area class
 */
var index_1 = require("../canvas/index");
var SizeChangedEvent_1 = require("./SizeChangedEvent");
var Area = (function () {
    function Area(offset, size) {
        this.sizeChangedEvent = new SizeChangedEvent_1.SizeChangedEvent();
        this.shadow = false;
        this._offset = offset;
        this._size = size;
    }
    Object.defineProperty(Area.prototype, "sizeChanged", {
        get: function () {
            return this.sizeChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Area.prototype, "baseCanvas", {
        get: function () {
            return this.shadow ? this._baseCanvasShadow : this._baseCanvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Area.prototype, "frontCanvas", {
        get: function () {
            return this.shadow ? this._frontCanvasShadow : this._frontCanvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Area.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        set: function (value) {
            this._offset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Area.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Area.prototype.clearBase = function () {
        this.baseCanvas.clear();
    };
    Area.prototype.clearFront = function () {
        this.frontCanvas.clear();
    };
    Area.prototype.render = function () {
        if (this.shadow) {
            this._baseCanvas.clear();
            this._frontCanvas.clear();
            this._baseCanvas.drawImage(this._baseCanvasElShadow, 0, 0, this._size.width, this._size.height);
            this._frontCanvas.drawImage(this._frontCanvasElShadow, 0, 0, this._size.width, this._size.height);
        }
    };
    Area.prototype.resize = function (w, h) {
        var dpr = window.devicePixelRatio || 1;
        this._baseCanvasEl.width = w * dpr;
        this._baseCanvasEl.height = h * dpr;
        this._baseCanvasEl.style.setProperty('width', w + 'px');
        this._baseCanvasEl.style.setProperty('height', h + 'px');
        this._frontCanvasEl.width = w * dpr;
        this._frontCanvasEl.height = h * dpr;
        this._frontCanvasEl.style.setProperty('width', w + 'px');
        this._frontCanvasEl.style.setProperty('height', h + 'px');
        this._baseCanvas.resize(w, h);
        this._frontCanvas.resize(w, h);
        if (this.shadow) {
            this._baseCanvasElShadow.width = w * dpr;
            this._baseCanvasElShadow.height = h * dpr;
            this._baseCanvasElShadow.style.setProperty('width', w + 'px');
            this._baseCanvasElShadow.style.setProperty('height', h + 'px');
            this._frontCanvasElShadow.width = w * dpr;
            this._frontCanvasElShadow.height = h * dpr;
            this._frontCanvasElShadow.style.setProperty('width', w + 'px');
            this._frontCanvasElShadow.style.setProperty('height', h + 'px');
            this._baseCanvasShadow.resize(w, h);
            this._frontCanvasShadow.resize(w, h);
        }
        this._size = { width: w, height: h };
        this.sizeChangedEvent.trigger(new SizeChangedEvent_1.SizeChangedArgument(this._size));
    };
    Area.prototype.appendCanvases = function (div, w, h) {
        this._div = div;
        var dpr = window.devicePixelRatio || 1;
        var baseCanvas = document.createElement('canvas');
        baseCanvas.width = w * dpr;
        baseCanvas.height = h * dpr;
        baseCanvas.style.setProperty('width', w + 'px');
        baseCanvas.style.setProperty('height', h + 'px');
        baseCanvas.style.setProperty('left', '0');
        baseCanvas.style.setProperty('top', '0');
        baseCanvas.style.setProperty('z-index', '0');
        baseCanvas.style.setProperty('position', 'absolute');
        var frontCanvas = document.createElement('canvas');
        frontCanvas.width = w * dpr;
        frontCanvas.height = h * dpr;
        frontCanvas.style.setProperty('width', w + 'px');
        frontCanvas.style.setProperty('height', h + 'px');
        frontCanvas.style.setProperty('left', '0');
        frontCanvas.style.setProperty('top', '0');
        frontCanvas.style.setProperty('z-index', '1');
        frontCanvas.style.setProperty('position', 'absolute');
        this._baseCanvasEl = baseCanvas;
        this._frontCanvasEl = frontCanvas;
        this._baseCanvas = this.getContext(baseCanvas, w, h);
        this._frontCanvas = this.getContext(frontCanvas, w, h);
        if (this.shadow) {
            var baseCanvasShadow = document.createElement('canvas');
            baseCanvasShadow.width = w * dpr;
            baseCanvasShadow.height = h * dpr;
            var frontCanvasShadow = document.createElement('canvas');
            frontCanvasShadow.width = w * dpr;
            frontCanvasShadow.height = h * dpr;
            this._baseCanvasElShadow = baseCanvasShadow;
            this._frontCanvasElShadow = frontCanvasShadow;
            this._baseCanvasShadow = this.getContext(baseCanvasShadow, w, h);
            this._frontCanvasShadow = this.getContext(frontCanvasShadow, w, h);
        }
        div.appendChild(baseCanvas);
        div.appendChild(frontCanvas);
    };
    Area.prototype.getContext = function (el, w, h) {
        var ctx = el.getContext('2d');
        if (ctx == null) {
            throw new Error('Context is null');
        }
        return new index_1.CanvasWrapper(ctx, w, h);
    };
    return Area;
}());
exports.Area = Area;
},{"../canvas/index":17,"./SizeChangedEvent":138}],136:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ChartArea_1 = require("./ChartArea");
var BoardArea = (function () {
    function BoardArea(container, size) {
        this.container = container;
        this.size = size;
        this.yAxisWidth = 90;
        this.xAxisHeight = 25;
        this.chartAreas = [];
        this.table = document.createElement('table');
        this.table.style.setProperty('position', 'relative');
        this.table.style.setProperty('border-spacing', '0');
        this.table.style.setProperty('border-collapse', 'collapse');
        this.container.appendChild(this.table);
        this.chartWidth = this.size.width - this.yAxisWidth;
        this.chartHeight = this.size.height - this.xAxisHeight;
        // create x axis area
        var xrow = this.table.insertRow(-1); // to end
        this.timeArea = new ChartArea_1.XArea(xrow, { x: 0, y: this.chartHeight }, { width: this.chartWidth, height: this.xAxisHeight }, this.xAxisHeight);
    }
    BoardArea.prototype.addChart = function () {
        var index = this.chartAreas.length;
        var row = this.table.insertRow(index);
        var area = new ChartArea_1.ChartArea(row, { x: 0, y: 0 }, { width: this.chartWidth, height: this.chartHeight }, this.yAxisWidth, this.timeArea);
        this.chartAreas.push(area);
        return area;
    };
    BoardArea.prototype.render = function () {
        for (var _i = 0, _a = this.chartAreas; _i < _a.length; _i++) {
            var area = _a[_i];
            area.render();
        }
        this.timeArea.render();
    };
    BoardArea.prototype.remove = function (area) {
        var index = this.chartAreas.indexOf(area);
        if (index !== -1) {
            this.chartAreas.splice(index, 1);
            this.table.deleteRow(index);
        }
    };
    BoardArea.prototype.getXArea = function () {
        return this.timeArea;
    };
    BoardArea.prototype.clearBase = function () {
        for (var _i = 0, _a = this.chartAreas; _i < _a.length; _i++) {
            var area = _a[_i];
            area.clearBase();
        }
        this.timeArea.clearBase();
    };
    BoardArea.prototype.clearFront = function () {
        for (var _i = 0, _a = this.chartAreas; _i < _a.length; _i++) {
            var area = _a[_i];
            area.clearFront();
        }
        this.timeArea.clearFront();
    };
    Object.defineProperty(BoardArea.prototype, "chartLength", {
        get: function () {
            return this.chartWidth;
        },
        enumerable: true,
        configurable: true
    });
    BoardArea.prototype.resize = function (w, h) {
        // resize inner components
        var dh = Math.floor((h - this.xAxisHeight) / (this.chartAreas.length + 1));
        this.chartWidth = w - this.yAxisWidth;
        //this.chartHeight = this.size.height - this.xAxisHeight;
        var yOffset = 0;
        var i = 0;
        for (; i < this.chartAreas.length; i += 1) {
            // resize charts
            // update vertical and horizontal offset
            this.chartAreas[i].offset = { x: this.chartAreas[i].offset.x, y: yOffset };
            this.chartAreas[i].resize(this.chartWidth, i === 0 ? dh * 2 : dh);
            yOffset += (i === 0 ? dh * 2 : dh);
        }
        // resize time axis
        this.timeArea.offset = { x: this.timeArea.offset.x, y: yOffset };
        this.timeArea.resize(this.chartWidth, this.xAxisHeight);
    };
    BoardArea.prototype.setCursor = function (style) {
        this.table.setAttribute('cursor', style);
    };
    return BoardArea;
}());
exports.BoardArea = BoardArea;
},{"./ChartArea":137}],137:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Area_1 = require("./Area");
var YArea = (function (_super) {
    __extends(YArea, _super);
    function YArea(cell, offset, size) {
        var _this = _super.call(this, offset, size) || this;
        _this.cell = cell;
        cell.style.setProperty('padding', '0');
        var div = document.createElement('div');
        cell.appendChild(div);
        div.style.setProperty('position', 'relative');
        div.style.setProperty('width', _this.size.width + 'px');
        div.style.setProperty('height', _this._size.height + 'px');
        _this.appendCanvases(div, _this._size.width, _this._size.height);
        return _this;
    }
    YArea.prototype.resize = function (w, h) {
        var div = this.cell.getElementsByTagName('div')[0];
        div.style.setProperty('width', w + 'px');
        div.style.setProperty('height', h + 'px');
        _super.prototype.resize.call(this, w, h);
    };
    return YArea;
}(Area_1.Area));
exports.YArea = YArea;
var XArea = (function (_super) {
    __extends(XArea, _super);
    function XArea(row, offset, size, xAxisHeight) {
        var _this = _super.call(this, offset, size) || this;
        _this.row = row;
        _this.xAxisHeight = xAxisHeight;
        var cell = row.insertCell(0);
        cell.style.setProperty('padding', '0');
        var div = document.createElement('div');
        cell.appendChild(div);
        div.style.setProperty('position', 'relative');
        div.style.setProperty('width', _this._size.width + 'px');
        div.style.setProperty('height', _this._size.height + 'px');
        _this.appendCanvases(div, _this._size.width, _this._size.height);
        return _this;
    }
    XArea.prototype.resize = function (w, h) {
        // resize HTML element
        var cellsCount = this.row.cells.length;
        var div = this.row.cells[cellsCount - 1].getElementsByTagName('div')[0];
        div.style.setProperty('width', w + 'px');
        div.style.setProperty('height', h + 'px');
        _super.prototype.resize.call(this, w, h);
    };
    return XArea;
}(Area_1.Area));
exports.XArea = XArea;
var ChartArea = (function (_super) {
    __extends(ChartArea, _super);
    function ChartArea(row, offset, size, yAxisWidth, xArea) {
        var _this = _super.call(this, offset, size) || this;
        _this.row = row;
        _this.yAxisWidth = yAxisWidth;
        _this.xArea = xArea;
        var cell = row.insertCell(0);
        cell.style.setProperty('padding', '0');
        cell.style.setProperty('position', 'relative');
        var div = document.createElement('div');
        cell.appendChild(div);
        div.style.setProperty('position', 'relative');
        div.style.setProperty('height', _this._size.height + 'px');
        div.style.setProperty('width', _this._size.width + 'px');
        _this.appendCanvases(div, _this._size.width, _this._size.height);
        // Create container for quicktips
        _this.qtContater = document.createElement('div');
        _this.qtContater.style.setProperty('position', 'absolute');
        _this.qtContater.style.setProperty('top', '5px');
        _this.qtContater.style.setProperty('left', '5px');
        cell.appendChild(_this.qtContater);
        // create y axis area
        var ycell = _this.row.insertCell(-1);
        _this.yArea = new YArea(ycell, { x: 0, y: 0 }, { width: _this.yAxisWidth, height: _this.size.height });
        return _this;
    }
    Object.defineProperty(ChartArea.prototype, "qtipContainer", {
        get: function () {
            return this.qtContater;
        },
        enumerable: true,
        configurable: true
    });
    ChartArea.prototype.getXArea = function () {
        return this.xArea;
    };
    ChartArea.prototype.getYArea = function () {
        return this.yArea;
    };
    ChartArea.prototype.clearBase = function () {
        if (this.yArea) {
            this.yArea.clearBase();
        }
        _super.prototype.clearBase.call(this);
    };
    ChartArea.prototype.clearFront = function () {
        if (this.yArea) {
            this.yArea.clearFront();
        }
        _super.prototype.clearFront.call(this);
    };
    ChartArea.prototype.render = function () {
        _super.prototype.render.call(this);
        this.yArea.render();
    };
    ChartArea.prototype.resize = function (w, h) {
        // resize HTML elements
        // for (let j = 0; j < 3; j += 1) {
        //     const div = this.table.rows.item(i).cells[j].getElementsByTagName('div')[0];
        //     div.style.setProperty('height', (i === 0 ? dh * 2 : dh) + 'px');
        //     if (j === 1) { div.style.setProperty('width', dw + 'px'); }
        // }
        var div = this.row.cells[0].getElementsByTagName('div')[0];
        div.style.setProperty('width', w + 'px');
        div.style.setProperty('height', h + 'px');
        if (this.yArea) {
            this.yArea.resize(this.yAxisWidth, h);
        }
        _super.prototype.resize.call(this, w, h);
    };
    return ChartArea;
}(Area_1.Area));
exports.ChartArea = ChartArea;
},{"./Area":135}],138:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * SizeChangedEvent class
 */
var index_1 = require("../shared/index");
var SizeChangedEvent = (function (_super) {
    __extends(SizeChangedEvent, _super);
    function SizeChangedEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SizeChangedEvent;
}(index_1.Event));
exports.SizeChangedEvent = SizeChangedEvent;
var SizeChangedArgument = (function () {
    function SizeChangedArgument(size) {
        this.s = size;
    }
    Object.defineProperty(SizeChangedArgument.prototype, "size", {
        get: function () {
            return this.s;
        },
        enumerable: true,
        configurable: true
    });
    return SizeChangedArgument;
}());
exports.SizeChangedArgument = SizeChangedArgument;
},{"../shared/index":166}],139:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Exports of Layout module.
 */
var Area_1 = require("./Area");
exports.Area = Area_1.Area;
var BoardArea_1 = require("./BoardArea");
exports.BoardArea = BoardArea_1.BoardArea;
var ChartArea_1 = require("./ChartArea");
exports.ChartArea = ChartArea_1.ChartArea;
exports.XArea = ChartArea_1.XArea;
exports.YArea = ChartArea_1.YArea;
var SizeChangedEvent_1 = require("./SizeChangedEvent");
exports.SizeChangedArgument = SizeChangedEvent_1.SizeChangedArgument;
exports.SizeChangedEvent = SizeChangedEvent_1.SizeChangedEvent;
},{"./Area":135,"./BoardArea":136,"./ChartArea":137,"./SizeChangedEvent":138}],140:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Uid = (function () {
    function Uid(t, n) {
        /**
         * Provides uniqueness when t date is repeated.
         */
        this.n = 0;
        this.t = t || new Date();
        this.n = n || 0;
    }
    /**
     * Compares two Uids.
     * Returns -1 if this object is less, 0 - if equal, 1 - if greater than other.
     * @param other Uid to compare with.
     */
    Uid.prototype.compare = function (other) {
        if (other) {
            var thisTime = this.t.getTime();
            var otherTime = other.t.getTime();
            if (thisTime > otherTime || (thisTime === otherTime && this.n > other.n)) {
                return 1;
            }
            else if (thisTime === otherTime && this.n === other.n) {
                return 0;
            }
            else {
                return -1;
            }
        }
        else {
            throw new Error('Argument is not defined');
        }
    };
    Uid.prototype.equals = function (other) {
        if (other) {
            if (other === this) {
                return true;
            }
            if (other.t.getTime() === this.t.getTime() && other.n === this.n) {
                return true;
            }
        }
        return false;
    };
    Uid.min = function () {
        var uids = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uids[_i] = arguments[_i];
        }
        if (uids.length < 1) {
            throw new Error('Argument is not specified');
        }
        var min = uids[0];
        uids.forEach(function (value) {
            min = min ? (min.compare(value) <= 0 ? min : value) : value;
        });
        return min;
    };
    Uid.max = function () {
        var uids = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uids[_i] = arguments[_i];
        }
        if (uids.length < 1) {
            throw new Error('Argument is not specified');
        }
        var max = uids[0];
        uids.forEach(function (value) {
            max = max ? (max.compare(value) >= 0 ? max : value) : value;
        });
        return max;
    };
    return Uid;
}());
exports.Uid = Uid;
var Candlestick = (function () {
    function Candlestick(date, c, o, h, l) {
        this.uid = new Uid();
        this.ext = {};
        this.uid.t = date;
        this.c = c;
        this.o = o;
        this.h = h;
        this.l = l;
    }
    Object.defineProperty(Candlestick.prototype, "date", {
        get: function () {
            return this.uid.t;
        },
        set: function (d) {
            this.uid.t = d;
        },
        enumerable: true,
        configurable: true
    });
    Candlestick.prototype.getValues = function () {
        var ar = [];
        if (this.c !== undefined) {
            ar.push(this.c);
        }
        if (this.o !== undefined) {
            ar.push(this.o);
        }
        if (this.h !== undefined) {
            ar.push(this.h);
        }
        if (this.l !== undefined) {
            ar.push(this.l);
        }
        return ar;
    };
    Candlestick.prototype.deserialize = function (data) {
        if (data) {
            if (data.c !== undefined) {
                this.c = data.c;
            }
            if (data.o !== undefined) {
                this.o = data.o;
            }
            if (data.h !== undefined) {
                this.h = data.h;
            }
            if (data.l !== undefined) {
                this.l = data.l;
            }
        }
    };
    Candlestick.prototype.toString = function (precision) {
        return " O:" + (this.o !== undefined ? this.o.toFixed(precision) : 'n/a')
            + (" H:" + (this.h !== undefined ? this.h.toFixed(precision) : 'n/a'))
            + (" L:" + (this.l !== undefined ? this.l.toFixed(precision) : 'n/a'))
            + (" C:" + (this.c !== undefined ? this.c.toFixed(precision) : 'n/a'));
    };
    return Candlestick;
}());
exports.Candlestick = Candlestick;
},{}],141:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point = (function () {
    function Point(d, v) {
        this.uid = '0';
        this.date = d;
        this.value = v;
    }
    Point.prototype.getValues = function () {
        if (this.value) {
            return [this.value];
        }
        else {
            return [];
        }
    };
    Point.prototype.deserialize = function (data) {
        if (data && data.value) {
            this.value = data.value;
        }
    };
    return Point;
}());
exports.Point = Point;
},{}],142:[function(require,module,exports){
/**
 *
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Candlestick_1 = require("./Candlestick");
exports.Candlestick = Candlestick_1.Candlestick;
exports.Uid = Candlestick_1.Uid;
var Point_1 = require("./Point");
exports.Point = Point_1.Point;
},{"./Candlestick":140,"./Point":141}],143:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var CandlestickChartRenderer = (function () {
    function CandlestickChartRenderer() {
        this.settings = new CandleRenderSettings();
        this.minCandleWidth = 1;
        this.maxCandleWidth = 21;
    }
    CandlestickChartRenderer.prototype.render = function (canvas, dataIterator, frame, timeAxis, yAxis) {
        // Render
        //
        var _this = this;
        // border lines
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // ... left
        canvas.moveTo(frame.x, frame.y);
        canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // ... bottom
        canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // ... right
        canvas.lineTo(frame.x + frame.w - 1, frame.y);
        canvas.stroke();
        var colorDown = this.settings.colorDown;
        var colorUp = this.settings.colorUp;
        var colorBorder = this.settings.colorBorder;
        var candleW = this.calculateBodyWidth(timeAxis, frame.w);
        canvas.lineWidth = 1;
        // Separate rendering of lines with different colors
        // to minimize state changes.
        //
        if (candleW > 2) {
            canvas.beginPath();
            canvas.setStrokeStyle(colorBorder);
            RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
                _this.renderShadows(canvas, timeAxis, yAxis, candle, frame, candleW, x);
            });
            canvas.stroke();
            // up bodies
            canvas.setFillStyle(colorUp);
            RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
                _this.renderBody(canvas, timeAxis, yAxis, candle, frame, candleW, x, true);
            });
            // down bodies
            canvas.setFillStyle(colorDown);
            RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
                _this.renderBody(canvas, timeAxis, yAxis, candle, frame, candleW, x, false);
            });
        }
        else {
            // render down lines
            canvas.beginPath();
            canvas.setStrokeStyle(colorDown);
            RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
                _this.renderLine(canvas, timeAxis, yAxis, candle, frame, candleW, x, colorDown, false);
            });
            canvas.stroke();
            // render up lines
            canvas.beginPath();
            canvas.setStrokeStyle(colorUp);
            RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
                _this.renderLine(canvas, timeAxis, yAxis, candle, frame, candleW, x, colorUp, true);
            });
            canvas.stroke();
        }
    };
    CandlestickChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        var candleHit = undefined;
        var candleW = this.calculateBodyWidth(timeAxis, frame.w);
        // while (dataIterator.moveNext()) {
        //     if (this.testHitAreaCandle(hitPoint, timeAxis, yAxis, dataIterator.current, candleW)) {
        //         candleHit = dataIterator.current;
        //         break;
        //     }
        // }
        return candleHit;
    };
    CandlestickChartRenderer.prototype.testHitAreaCandle = function (hitPoint, timeAxis, yAxis, candle, candleW) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return false;
        }
        var x = timeAxis.toX(candle.uid);
        if (x !== undefined) {
            x = Math.round(x);
            var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
            return (hitPoint.x >= body.x && hitPoint.x <= (body.x + body.w)
                && hitPoint.y >= body.y && hitPoint.y <= (body.y + body.h));
        }
        return false;
    };
    CandlestickChartRenderer.prototype.renderShadows = function (canvas, timeAxis, yAxis, candle, frame, candleW, x) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        x = Math.round(x);
        var h = yAxis.toX(candle.h);
        var l = yAxis.toX(candle.l);
        this.line(canvas, x, l, x, h);
    };
    CandlestickChartRenderer.prototype.renderBody = function (canvas, timeAxis, yAxis, candle, frame, candleW, x, up) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        x = Math.round(x);
        var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
        if ((up && candle.c > candle.o) || (!up && candle.c <= candle.o)) {
            canvas.fillRect(body.x, body.y, body.w, body.h);
        }
    };
    CandlestickChartRenderer.prototype.renderLine = function (canvas, timeAxis, yAxis, candle, frame, candleW, x, color, up) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        x = Math.round(x);
        var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
        if ((up && candle.c > candle.o) || (!up && candle.c <= candle.o)) {
            this.line(canvas, x, body.y, x, body.y + body.h);
        }
    };
    CandlestickChartRenderer.prototype.calculateBody = function (x, yAxis, o, c, candleW) {
        var ocMin = yAxis.toX(Math.max(o, c)); // Inverted Y
        var ocMax = yAxis.toX(Math.min(o, c));
        return { x: x - Math.floor(candleW / 2), y: ocMin, w: candleW, h: ocMax - ocMin };
    };
    CandlestickChartRenderer.prototype.calculateBodyWidth = function (timeAxis, frameWidth) {
        var candlesCount = timeAxis.count; //  range / timeAxis.interval;
        var w = frameWidth / (3 * candlesCount);
        if (w < 1.3) {
            return 1;
        }
        else {
            w = Math.ceil(w);
            w = w + ((w + 1) % 2);
            return Math.min(this.maxCandleWidth, w);
        }
    };
    CandlestickChartRenderer.prototype.line = function (canvas, x1, y1, x2, y2) {
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
    };
    CandlestickChartRenderer.prototype.getSettings = function () {
        var settings = new index_1.SettingSet({ name: 'visual', group: true, displayName: 'visual' });
        settings.setSetting('colorUp', new index_1.SettingSet({
            name: 'colorUp',
            displayName: 'Rising color',
            settingType: index_1.SettingType.color,
            value: this.settings.colorUp.toString()
        }));
        settings.setSetting('colorDown', new index_1.SettingSet({
            name: 'colorDown',
            displayName: 'Falling color',
            settingType: index_1.SettingType.color,
            value: this.settings.colorDown.toString()
        }));
        settings.setSetting('colorBorder', new index_1.SettingSet({
            name: 'colorBorder',
            displayName: 'Border color',
            settingType: index_1.SettingType.color,
            value: this.settings.colorBorder.toString()
        }));
        return settings;
    };
    CandlestickChartRenderer.prototype.setSettings = function (value) {
        var colorUp = value.getSetting('visual.colorUp');
        this.settings.colorUp = (colorUp && colorUp.value) ? colorUp.value : this.settings.colorUp;
        var colorDown = value.getSetting('visual.colorDown');
        this.settings.colorDown = (colorDown && colorDown.value) ? colorDown.value : this.settings.colorDown;
        var colorBorder = value.getSetting('visual.colorBorder');
        this.settings.colorBorder = (colorBorder && colorBorder.value) ? colorBorder.value : this.settings.colorBorder;
    };
    return CandlestickChartRenderer;
}());
exports.CandlestickChartRenderer = CandlestickChartRenderer;
var CandleRenderSettings = (function () {
    function CandleRenderSettings() {
        this.colorUp = '#59E459';
        this.colorDown = '#F03A3D';
        this.colorBorder = '#333333';
    }
    return CandleRenderSettings;
}());
},{"../core/index":53,"./RenderUtils":158}],144:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * CandlestickPopupRenderer class.
 */
var index_1 = require("../canvas/index");
var CandlestickPopupRenderer = (function () {
    function CandlestickPopupRenderer() {
        this.paddingLeft = 5;
        this.paddingTop = 5;
    }
    CandlestickPopupRenderer.prototype.render = function (canvas, model, point, frameSize, precision) {
        var lineHeight = 20;
        var w = 90;
        var h = lineHeight * 4 + this.paddingTop * 2;
        var x = Math.max(0, Math.min(point.x, frameSize.width - w));
        var y = Math.max(0, Math.min(point.y, frameSize.height - h));
        var alpha = canvas.globalAlpha;
        canvas.globalAlpha = 0.8;
        // border
        canvas.setStrokeStyle('#C0C0C0');
        canvas.strokeRect(x, y, w, h);
        // fill
        canvas.setFillStyle('#F2F2F2');
        canvas.fillRect(x, y, w, h);
        // text
        canvas.font = '10px Arial';
        canvas.fillStyle = 'black';
        canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Top);
        canvas.fillText("O: " + this.formatValue(model.o, precision), x + this.paddingLeft, y + this.paddingTop);
        canvas.fillText("C: " + this.formatValue(model.c, precision), x + this.paddingLeft, y + this.paddingTop + lineHeight);
        canvas.fillText("H: " + this.formatValue(model.h, precision), x + this.paddingLeft, y + this.paddingTop + 2 * lineHeight);
        canvas.fillText("L: " + this.formatValue(model.l, precision), x + this.paddingLeft, y + this.paddingTop + 3 * lineHeight);
        // restore global value
        canvas.globalAlpha = alpha;
    };
    CandlestickPopupRenderer.prototype.formatValue = function (n, precision) {
        return (n !== undefined) ? n.toFixed(precision) : '';
    };
    return CandlestickPopupRenderer;
}());
exports.CandlestickPopupRenderer = CandlestickPopupRenderer;
},{"../canvas/index":17}],145:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../canvas/index");
var index_2 = require("../core/index");
var ChartRenderer = (function () {
    function ChartRenderer() {
        this.settings = new RenderSettings();
    }
    ChartRenderer.prototype.getZonesSettings = function () {
        var toplineGroup = new index_2.SettingSet({ name: 'topline', group: true, displayName: 'Top line' });
        toplineGroup.setSetting('color', new index_2.SettingSet({
            name: 'color',
            value: this.settings.zone.tlinecolor.toString(),
            settingType: index_2.SettingType.color,
            displayName: ''
        }));
        toplineGroup.setSetting('pattern', new index_2.SettingSet({
            name: 'pattern',
            value: this.settings.zone.tlinepattern.toString(),
            displayName: '',
            settingType: index_2.SettingType.select,
            options: [
                { value: index_1.LinePattern.Solid.toString(), text: 'solid' },
                { value: index_1.LinePattern.Dashed.toString(), text: 'dashed' },
                { value: index_1.LinePattern.Pointed.toString(), text: 'pointed' }
            ]
        }));
        toplineGroup.setSetting('width', new index_2.SettingSet({
            name: 'width',
            value: this.settings.zone.tlinewidth.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: ''
        }));
        var bottomGroup = new index_2.SettingSet({ name: 'bottomline', group: true, displayName: 'Bottom line' });
        bottomGroup.setSetting('color', new index_2.SettingSet({
            name: 'color',
            value: this.settings.zone.blinecolor.toString(),
            settingType: index_2.SettingType.color,
            displayName: ''
        }));
        bottomGroup.setSetting('pattern', new index_2.SettingSet({
            name: 'pattern',
            value: this.settings.zone.blinepattern.toString(),
            displayName: '',
            settingType: index_2.SettingType.select,
            options: [
                { value: index_1.LinePattern.Solid.toString(), text: 'solid' },
                { value: index_1.LinePattern.Dashed.toString(), text: 'dashed' },
                { value: index_1.LinePattern.Pointed.toString(), text: 'pointed' }
            ]
        }));
        bottomGroup.setSetting('width', new index_2.SettingSet({
            name: 'width',
            value: this.settings.zone.blinewidth.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: ''
        }));
        var fillGroup = new index_2.SettingSet({ name: 'fill', group: true, displayName: 'Fill color' });
        fillGroup.setSetting('filled', new index_2.SettingSet({
            name: 'filled',
            value: this.settings.zone.fill.toString(),
            settingType: index_2.SettingType.check,
            displayName: ''
        }));
        fillGroup.setSetting('color', new index_2.SettingSet({
            name: 'color',
            value: this.settings.zone.fillcolor.toString(),
            settingType: index_2.SettingType.color,
            displayName: ''
        }));
        var fillOverlapGroup = new index_2.SettingSet({ name: 'filloverlap', group: true, displayName: 'Fill colors' });
        fillOverlapGroup.setSetting('fill', new index_2.SettingSet({
            name: 'fill',
            value: this.settings.zone.overlapfill.toString(),
            settingType: index_2.SettingType.check,
            displayName: ''
        }));
        fillOverlapGroup.setSetting('colorup', new index_2.SettingSet({
            name: 'colorup',
            value: this.settings.zone.overlapcolorUp.toString(),
            settingType: index_2.SettingType.color,
            displayName: ''
        }));
        fillOverlapGroup.setSetting('colordown', new index_2.SettingSet({
            name: 'colordown',
            value: this.settings.zone.overlapcolorDown.toString(),
            settingType: index_2.SettingType.color,
            displayName: ''
        }));
        var group = new index_2.SettingSet({ name: 'zones', group: true, displayName: 'Zones' });
        group.setSetting('visible', new index_2.SettingSet({
            name: 'visible',
            value: this.settings.zone.visible.toString(),
            settingType: index_2.SettingType.check,
            displayName: 'Visible'
        }));
        group.setSetting('upthreshold', new index_2.SettingSet({
            name: 'upthreshold',
            value: this.settings.zone.upthreshold.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Upper threshold'
        }));
        group.setSetting('lowthreshold', new index_2.SettingSet({
            name: 'lowthreshold',
            value: this.settings.zone.lowthreshold.toString(),
            settingType: index_2.SettingType.numeric,
            displayName: 'Lower threshold'
        }));
        group.setSetting('pricevalues', new index_2.SettingSet({
            name: 'pricevalues',
            value: this.settings.zone.pricevalues.toString(),
            settingType: index_2.SettingType.check,
            displayName: 'Values on price scale'
        }));
        group.setSetting('showthreshold', new index_2.SettingSet({
            name: 'showthreshold',
            value: this.settings.zone.showthreshold.toString(),
            settingType: index_2.SettingType.check,
            displayName: 'Show threshold lines'
        }));
        group.setSetting('topline', toplineGroup);
        group.setSetting('bottomline', bottomGroup);
        group.setSetting('fill', fillGroup);
        group.setSetting('filloverlap', fillOverlapGroup);
        return group;
    };
    ChartRenderer.prototype.setZonesSettings = function (value) {
        var st;
        st = value.getSetting('zones.visible');
        this.settings.zone.visible = (st && st.value) ? st.value === 'true' : this.settings.zone.visible;
        // showthreshold
        st = value.getSetting('zones.showthreshold');
        this.settings.zone.showthreshold = (st && st.value) ? st.value === 'true' : this.settings.zone.showthreshold;
        // upthreshold
        st = value.getSetting('zones.upthreshold');
        this.settings.zone.upthreshold = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.upthreshold;
        // lowthreshold
        st = value.getSetting('zones.lowthreshold');
        this.settings.zone.lowthreshold = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.lowthreshold;
        // pricevalues
        st = value.getSetting('zones.pricevalues');
        this.settings.zone.pricevalues = (st && st.value) ? st.value === 'true' : this.settings.zone.pricevalues;
        // topline (color, pattern, width)
        var topline = value.getSetting('zones.topline');
        if (topline) {
            st = topline.getSetting('topline.color');
            this.settings.zone.tlinecolor = (st && st.value) ? st.value : this.settings.zone.tlinecolor;
            st = topline.getSetting('topline.pattern');
            this.settings.zone.tlinepattern = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.tlinepattern;
            st = topline.getSetting('topline.width');
            this.settings.zone.tlinewidth = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.tlinewidth;
        }
        // bottomline (color, pattern, width)
        var bottomline = value.getSetting('zones.bottomline');
        if (bottomline) {
            st = bottomline.getSetting('bottomline.color');
            this.settings.zone.blinecolor = (st && st.value) ? st.value : this.settings.zone.blinecolor;
            st = bottomline.getSetting('bottomline.pattern');
            this.settings.zone.blinepattern = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.blinepattern;
            st = bottomline.getSetting('bottomline.width');
            this.settings.zone.blinewidth = (st && st.value) ? parseInt(st.value, 10) : this.settings.zone.blinewidth;
        }
        // fill (fill, color)
        var fill = value.getSetting('zones.fill');
        if (fill) {
            st = fill.getSetting('fill.color');
            this.settings.zone.fillcolor = (st && st.value) ? st.value : this.settings.zone.fillcolor;
            st = fill.getSetting('fill.filled');
            this.settings.zone.fill = (st && st.value) ? st.value === 'true' : this.settings.zone.fill;
        }
        // filloverlap (fill, colorup, colordown)
        var ovrlap = value.getSetting('zones.filloverlap');
        if (ovrlap) {
            st = ovrlap.getSetting('filloverlap.fill');
            this.settings.zone.overlapfill = (st && st.value) ? st.value === 'true' : this.settings.zone.overlapfill;
            st = ovrlap.getSetting('filloverlap.colorup');
            this.settings.zone.overlapcolorUp = (st && st.value) ? st.value : this.settings.zone.overlapcolorUp;
            st = ovrlap.getSetting('filloverlap.colordown');
            this.settings.zone.overlapcolorDown = (st && st.value) ? st.value : this.settings.zone.overlapcolorDown;
        }
    };
    return ChartRenderer;
}());
exports.ChartRenderer = ChartRenderer;
var RenderSettings = (function () {
    function RenderSettings() {
        this.zone = new ZoneSettings();
    }
    return RenderSettings;
}());
exports.RenderSettings = RenderSettings;
var ZoneSettings = (function () {
    function ZoneSettings() {
        this.visible = true;
        this.showthreshold = true;
        this.upthreshold = 80;
        this.lowthreshold = 20;
        this.pricevalues = false;
        // Top line
        this.tlinecolor = '#555555';
        this.tlinepattern = index_1.LinePattern.Solid;
        this.tlinewidth = 1;
        // Bottom line
        this.blinecolor = '#555555';
        this.blinepattern = index_1.LinePattern.Solid;
        this.blinewidth = 1;
        // Fill
        this.fill = false;
        this.fillcolor = '#777777';
        // Overlap
        this.overlapfill = false;
        this.overlapcolorUp = '#3AA000';
        this.overlapcolorDown = '#CE0000';
    }
    return ZoneSettings;
}());
exports.ZoneSettings = ZoneSettings;
},{"../canvas/index":17,"../core/index":53}],146:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CrosshairRenderer = (function () {
    function CrosshairRenderer() {
    }
    CrosshairRenderer.prototype.render = function (canvas, point, frameSize) {
        // Draw crosshair
        //
        canvas.setStrokeStyle('black');
        var curDash = canvas.getLineDash();
        canvas.setLineDash([5, 5]);
        canvas.lineWidth = 1;
        canvas.beginPath();
        if (point.x > 0 && point.x < frameSize.width) {
            // draw vertical line
            canvas.moveTo(point.x, 0);
            canvas.lineTo(point.x, frameSize.height);
        }
        if (point.y > 0 && point.y < frameSize.height) {
            // draw horizontal line
            canvas.moveTo(0, point.y);
            canvas.lineTo(frameSize.width, point.y);
        }
        canvas.stroke();
        canvas.closePath();
        canvas.setLineDash(curDash);
    };
    return CrosshairRenderer;
}());
exports.CrosshairRenderer = CrosshairRenderer;
},{}],147:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GridRenderer = (function () {
    function GridRenderer() {
    }
    GridRenderer.prototype.render = function (canvas, frame, xAxis, yAxis) {
        canvas.beginPath();
        canvas.setStrokeStyle('#EAEAEA');
        canvas.lineWidth = 1;
        // Vertical lines
        var gridX = xAxis.getGrid();
        gridX.reset();
        while (gridX.moveNext()) {
            var x = gridX.current.x;
            canvas.moveTo(x, frame.y);
            canvas.lineTo(x, frame.y + frame.h);
        }
        // Horizontal lines
        var gridY = yAxis.getGrid();
        for (var _i = 0, _a = gridY.bars; _i < _a.length; _i++) {
            var bar = _a[_i];
            if (bar !== undefined) {
                var y = yAxis.toX(bar);
                canvas.moveTo(frame.x, y);
                canvas.lineTo(frame.x + frame.w, y);
            }
        }
        canvas.stroke();
        canvas.closePath();
    };
    return GridRenderer;
}());
exports.GridRenderer = GridRenderer;
},{}],148:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var HollowstickChartRenderer = (function () {
    function HollowstickChartRenderer() {
        this.minCandleWidth = 1;
        this.maxCandleWidth = 21;
    }
    HollowstickChartRenderer.prototype.render = function (canvas, dataIterator, frame, timeAxis, yAxis) {
        var _this = this;
        var candleW = this.calculateBodyWidth(timeAxis, frame.w);
        RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
            _this.renderCandle(canvas, timeAxis, yAxis, candle, frame, candleW, x, dataIterator.previous);
        });
        // let found = false;
        // timeAxis.reset();
        // while (timeAxis.moveNext()) {
        //     const curUid = timeAxis.current;
        //     const curTime = curUid.t.getTime();
        //     const curn = curUid.n;
        //     const x = timeAxis.currentX;
        //     if (!found) {
        //         found = dataIterator.goTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn);
        //     } else {
        //         found = dataIterator.moveTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn) !== -1;
        //     }
        //     if (found) {
        //         const candle = dataIterator.current;
        //         this.renderCandle(canvas, timeAxis, yAxis, candle, frame, candleW, x, dataIterator.previous);
        //     }
        // }
    };
    HollowstickChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        var candleHit = undefined;
        var candleW = this.calculateBodyWidth(timeAxis, frame.w);
        // while (dataIterator.moveNext()) {
        //     if (this.testHitAreaCandle(hitPoint, timeAxis, yAxis, dataIterator.current, candleW)) {
        //         candleHit = dataIterator.current;
        //         break;
        //     }
        // }
        return candleHit;
    };
    HollowstickChartRenderer.prototype.testHitAreaCandle = function (hitPoint, timeAxis, yAxis, candle, candleW) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return false;
        }
        var x = timeAxis.toX(candle.uid);
        if (x !== undefined) {
            x = Math.round(x);
            var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
            return (hitPoint.x >= body.x && hitPoint.x <= (body.x + body.w)
                && hitPoint.y >= body.y && hitPoint.y <= (body.y + body.h));
        }
        return false;
    };
    HollowstickChartRenderer.prototype.renderCandle = function (canvas, timeAxis, yAxis, candle, frame, candleW, x, prevCandle) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        var colorUp = '#00B712'; // black
        var colorDown = '#EA0000'; // red
        var white = '#FFFFFF';
        var color = colorDown; // default color
        if (prevCandle && prevCandle.c) {
            color = (candle.c > prevCandle.c) ? colorUp : colorDown;
        }
        var isHollow = candle.c > candle.o;
        x = Math.round(x);
        var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
        var h = yAxis.toX(candle.h);
        var l = yAxis.toX(candle.l);
        // Startin drawing
        canvas.beginPath();
        canvas.lineWidth = 1;
        canvas.setStrokeStyle(color);
        if (body.w > 2) {
            // Drawing upper shadow
            this.line(canvas, x, body.y, x, h);
            // Drawing lower shadow
            this.line(canvas, x, l, x, body.y + body.h - 1);
            canvas.stroke();
        }
        // Drawing body
        if (body.w > 2) {
            if (isHollow) {
                canvas.setFillStyle(white);
            }
            else {
                canvas.setFillStyle(color);
            }
            canvas.fillRect(body.x, body.y, body.w, body.h);
            canvas.strokeRect(body.x, body.y, body.w, body.h);
        }
        else {
            canvas.beginPath();
            canvas.setStrokeStyle(color);
            this.line(canvas, x, body.y, x, body.y + body.h);
            canvas.stroke();
        }
    };
    HollowstickChartRenderer.prototype.calculateBody = function (x, yAxis, o, c, candleW) {
        var ocMin = yAxis.toX(Math.max(o, c)); // Inverted Y
        var ocMax = yAxis.toX(Math.min(o, c));
        return { x: x - Math.floor(candleW / 2), y: ocMin, w: candleW, h: ocMax - ocMin };
    };
    HollowstickChartRenderer.prototype.calculateBodyWidth = function (timeAxis, frameWidth) {
        var candlesCount = timeAxis.count;
        var w = frameWidth / (3 * candlesCount);
        if (w < 1.3) {
            return 1;
        }
        else {
            w = Math.ceil(w);
            w = w + ((w + 1) % 2);
            return Math.min(this.maxCandleWidth, w);
        }
    };
    HollowstickChartRenderer.prototype.line = function (canvas, x1, y1, x2, y2) {
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
    };
    HollowstickChartRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    HollowstickChartRenderer.prototype.setSettings = function (settings) {
    };
    return HollowstickChartRenderer;
}());
exports.HollowstickChartRenderer = HollowstickChartRenderer;
},{"../core/index":53,"./RenderUtils":158}],149:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SettingSet_1 = require("../core/SettingSet");
var LineChartRenderer = (function () {
    function LineChartRenderer() {
    }
    LineChartRenderer.prototype.render = function (canvas, dataIterator, 
        //data: Point[],
        frame, timeAxis, yAxis) {
        // // Render
        // //
        // // border lines
        // canvas.beginPath();
        // canvas.setStrokeStyle('#333333');
        // // ... left
        // canvas.moveTo(frame.x, frame.y);
        // canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // // ... bottom
        // canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // // ... right
        // canvas.lineTo(frame.x + frame.w - 1, frame.y);
        // canvas.stroke();
        // // Start drawing
        // canvas.beginPath();
        // canvas.setStrokeStyle('#555555');
        // if (dataIterator.moveNext()) {
        //     let x = timeAxis.toX(dataIterator.current.date);
        //     let y = yAxis.toX(<number>dataIterator.current.value);
        //     canvas.moveTo(x, y);
        //     while (dataIterator.moveNext()) {
        //         if (dataIterator.current.value) {
        //             x = timeAxis.toX(dataIterator.current.date);
        //             y = yAxis.toX(<number>dataIterator.current.value);
        //             canvas.lineTo(x, y);
        //         }
        //     }
        // }
        // canvas.stroke();
    };
    LineChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Point[],
        frame, timeAxis, yAxis) {
        // while (dataIterator.moveNext()) {
        //     if (dataIterator.current.value) {
        //         const x = timeAxis.toX(dataIterator.current.date);
        //         const y = yAxis.toX(dataIterator.current.value);
        //         const R = Math.sqrt(Math.pow(Math.abs(x - hitPoint.x), 2) + Math.pow(Math.abs(y - hitPoint.y), 2));
        //         if (R < 2) {
        //             return dataIterator.current;
        //         }
        //     }
        // }
        return undefined;
    };
    LineChartRenderer.prototype.getSettings = function () {
        return new SettingSet_1.SettingSet('renderer');
    };
    LineChartRenderer.prototype.setSettings = function (settings) {
    };
    return LineChartRenderer;
}());
exports.LineChartRenderer = LineChartRenderer;
},{"../core/SettingSet":49}],150:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * LinePopupRenderer class.
 */
var index_1 = require("../canvas/index");
var LinePopupRenderer = (function () {
    function LinePopupRenderer() {
        this.paddingLeft = 5;
        this.paddingTop = 5;
    }
    LinePopupRenderer.prototype.render = function (canvas, model, point, frameSize, precision) {
        var lineHeight = 20;
        var w = 90;
        var h = lineHeight + this.paddingTop * 2;
        var x = Math.max(0, Math.min(point.x, frameSize.width - w));
        var y = Math.max(0, Math.min(point.y, frameSize.height - h));
        var alpha = canvas.globalAlpha;
        canvas.globalAlpha = 0.8;
        // border
        canvas.setStrokeStyle('#C0C0C0');
        canvas.strokeRect(x, y, w, h);
        // fill
        canvas.setFillStyle('#F2F2F2');
        canvas.fillRect(x, y, w, h);
        // text
        canvas.font = '10px Arial';
        canvas.fillStyle = 'black';
        canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Top);
        canvas.fillText("" + (model.value !== undefined ? model.value.toFixed(precision) : ''), x + this.paddingLeft, y + this.paddingTop);
        // restore global value
        canvas.globalAlpha = alpha;
    };
    return LinePopupRenderer;
}());
exports.LinePopupRenderer = LinePopupRenderer;
},{"../canvas/index":17}],151:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var LinestickChartRenderer = (function () {
    function LinestickChartRenderer() {
        this.settings = new RenderSettings();
    }
    LinestickChartRenderer.prototype.render = function (canvas, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        // Render
        //
        // border lines
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // ... left
        canvas.moveTo(frame.x, frame.y);
        canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // ... bottom
        canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // ... right
        canvas.lineTo(frame.x + frame.w - 1, frame.y);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle(this.settings.color);
        canvas.lineWidth = this.settings.width;
        RenderUtils_1.RenderUtils.renderLineChart(canvas, dataIterator, function (item) {
            if (item.c !== undefined) {
                return { uid: item.uid, v: item.c };
            }
        }, frame, timeAxis, yAxis, false);
        canvas.stroke();
    };
    LinestickChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        // while (dataIterator.moveNext()) {
        //     if (dataIterator.current.c !== undefined) {
        //         const x = timeAxis.toX(dataIterator.current.date);
        //         const y = yAxis.toX(dataIterator.current.c);
        //         const R = Math.sqrt(Math.pow(Math.abs(x - hitPoint.x), 2) + Math.pow(Math.abs(y - hitPoint.y), 2));
        //         if (R < 2) {
        //             return dataIterator.current;
        //         }
        //     }
        // }
        return undefined;
    };
    LinestickChartRenderer.prototype.getSettings = function () {
        var settings = new index_1.SettingSet({ name: 'visual', group: true, displayName: 'visual' });
        settings.setSetting('color', new index_1.SettingSet({
            name: 'color',
            displayName: 'Color',
            settingType: index_1.SettingType.color,
            value: this.settings.color.toString()
        }));
        settings.setSetting('width', new index_1.SettingSet({
            name: 'width',
            displayName: 'Line width',
            settingType: index_1.SettingType.numeric,
            value: this.settings.width.toString()
        }));
        return settings;
    };
    LinestickChartRenderer.prototype.setSettings = function (value) {
        var colorUp = value.getSetting('visual.color');
        this.settings.color = (colorUp && colorUp.value) ? colorUp.value : this.settings.color;
        var width = value.getSetting('visual.width');
        this.settings.width = (width && width.value) ? parseInt(width.value, 10) : this.settings.width;
    };
    return LinestickChartRenderer;
}());
exports.LinestickChartRenderer = LinestickChartRenderer;
var RenderSettings = (function () {
    function RenderSettings() {
        this.color = '#555555';
        this.width = 1;
    }
    return RenderSettings;
}());
},{"../core/index":53,"./RenderUtils":158}],152:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var MountainChartRenderer = (function () {
    function MountainChartRenderer() {
    }
    MountainChartRenderer.prototype.render = function (canvas, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        // Render
        //
        // border lines
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // ... left
        canvas.moveTo(frame.x, frame.y);
        canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // ... bottom
        canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // ... right
        canvas.lineTo(frame.x + frame.w - 1, frame.y);
        canvas.stroke();
        // Start drawing
        canvas.beginPath();
        canvas.setStrokeStyle('#555555');
        RenderUtils_1.RenderUtils.renderLineChart(canvas, dataIterator, function (item) {
            if (item.c !== undefined) {
                return { uid: item.uid, v: item.c };
            }
        }, frame, timeAxis, yAxis, true);
        canvas.closePath();
        canvas.stroke();
        canvas.fillStyle = '#CCEAF0';
        canvas.fill();
    };
    MountainChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        // while (dataIterator.moveNext()) {
        //     if (dataIterator.current.c !== undefined) {
        //         const x = timeAxis.toX(dataIterator.current.date);
        //         const y = yAxis.toX(dataIterator.current.c);
        //         const R = Math.sqrt(Math.pow(Math.abs(x - hitPoint.x), 2) + Math.pow(Math.abs(y - hitPoint.y), 2));
        //         if (R < 2) {
        //             return dataIterator.current;
        //         }
        //     }
        // }
        return undefined;
    };
    MountainChartRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    MountainChartRenderer.prototype.setSettings = function (settings) {
    };
    return MountainChartRenderer;
}());
exports.MountainChartRenderer = MountainChartRenderer;
},{"../core/index":53,"./RenderUtils":158}],153:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NumberAxisRenderer
 *
 * @classdesc Contains methods for rendering axes.
 */
var index_1 = require("../canvas/index");
var NumberAxisRenderer = (function () {
    function NumberAxisRenderer() {
    }
    NumberAxisRenderer.prototype.render = function (canvas, axis, frame) {
        var grid = axis.getGrid();
        canvas.font = '11px Arial';
        canvas.fillStyle = '#000000';
        canvas.setStrokeStyle('black');
        canvas.beginPath();
        for (var _i = 0, _a = grid.bars; _i < _a.length; _i++) {
            var bar = _a[_i];
            if (bar !== undefined) {
                var y = axis.toX(bar);
                if (y !== undefined) {
                    this.drawBar(canvas, bar, y, grid.precision);
                }
            }
        }
        canvas.stroke();
        canvas.closePath();
    };
    NumberAxisRenderer.prototype.drawBar = function (canvas, value, y, precision) {
        canvas.moveTo(0, y);
        canvas.lineTo(3, y);
        // draw time mark
        var markText = value.toFixed(precision);
        canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Middle);
        canvas.fillText(markText, 4, y);
    };
    return NumberAxisRenderer;
}());
exports.NumberAxisRenderer = NumberAxisRenderer;
},{"../canvas/index":17}],154:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NumberMarkRenderer class.
 */
var index_1 = require("../canvas/index");
var NumberMarkRenderer = (function () {
    function NumberMarkRenderer() {
        this.paddingLeft = 4;
    }
    NumberMarkRenderer.prototype.render = function (canvas, value, point, frameSize, precision) {
        var text = value.toFixed(precision).toString();
        var textWidth = canvas.measureText(text).width;
        canvas.fillStyle = '#3F3F3F';
        canvas.fillRect(point.x, point.y - 8, textWidth + this.paddingLeft * 2, 16);
        canvas.font = '11px Arial';
        canvas.fillStyle = '#EAEAEA';
        canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Middle);
        canvas.fillText(text, point.x + this.paddingLeft, point.y);
    };
    return NumberMarkRenderer;
}());
exports.NumberMarkRenderer = NumberMarkRenderer;
},{"../canvas/index":17}],155:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var OhlcChartRenderer = (function () {
    function OhlcChartRenderer() {
        this.minCandleWidth = 1;
        this.maxCandleWidth = 3;
    }
    OhlcChartRenderer.prototype.render = function (canvas, dataIterator, frame, timeAxis, yAxis) {
        var _this = this;
        var lineW = this.calculateLineWidth(timeAxis, frame.w);
        RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
            _this.renderCandle(canvas, timeAxis, yAxis, candle, frame, lineW, x, dataIterator.previous);
        });
        // let found = false;
        // timeAxis.reset();
        // while (timeAxis.moveNext()) {
        //     const curUid = timeAxis.current;
        //     const curTime = curUid.t.getTime();
        //     const curn = curUid.n;
        //     const x = timeAxis.currentX;
        //     if (!found) {
        //         found = dataIterator.goTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn);
        //     } else {
        //         found = dataIterator.moveTo(item => item.uid.t.getTime() === curTime && item.uid.n === curn) !== -1;
        //     }
        //     if (found) {
        //         const candle = dataIterator.current;
        //         this.renderCandle(canvas, timeAxis, yAxis, candle, frame, lineW, x, dataIterator.previous);
        //     }
        // }
    };
    OhlcChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        var candleHit = undefined;
        var candleW = this.calculateLineWidth(timeAxis, frame.w);
        // while (dataIterator.moveNext()) {
        //     if (this.testHitAreaCandle(hitPoint, timeAxis, yAxis, dataIterator.current, candleW)) {
        //         candleHit = dataIterator.current;
        //         break;
        //     }
        // }
        return candleHit;
    };
    OhlcChartRenderer.prototype.testHitAreaCandle = function (hitPoint, timeAxis, yAxis, candle, candleW) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return false;
        }
        // let x = timeAxis.toX(candle.uid);
        // if (x !== undefined) {
        //     x = Math.round(x);
        //     const body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
        //     return (hitPoint.x >= body.x && hitPoint.x <= (body.x + body.w)
        //             && hitPoint.y >= body.y && hitPoint.y <= (body.y + body.h));
        // }
        return false;
    };
    OhlcChartRenderer.prototype.renderCandle = function (canvas, timeAxis, yAxis, candle, frame, lineW, x, prevCandle) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        var colorUp = '#00B712';
        var colorDown = '#EA0000';
        var color;
        if (prevCandle && prevCandle.c) {
            color = (candle.c > prevCandle.c) ? colorUp : colorDown;
        }
        else {
            color = (candle.c > candle.o) ? colorUp : colorDown;
        }
        x = Math.round(x);
        var h = yAxis.toX(candle.h);
        var l = yAxis.toX(candle.l);
        var o = yAxis.toX(candle.o);
        var c = yAxis.toX(candle.c);
        var w = lineW + 3;
        // Startin drawing
        canvas.beginPath();
        canvas.lineWidth = lineW;
        canvas.setStrokeStyle(color);
        this.line(canvas, x, h, x, l);
        this.line(canvas, x - w, o, x, o); // open side
        this.line(canvas, x, c, x + w, c); // close side
        canvas.stroke();
    };
    OhlcChartRenderer.prototype.calculateLineWidth = function (timeAxis, frameWidth) {
        var candlesCount = timeAxis.count;
        var w = frameWidth / (3 * candlesCount);
        if (w < 6) {
            return 1;
        }
        else {
            w = Math.ceil(w);
            w = w + ((w + 1) % 2);
            return Math.min(this.maxCandleWidth, w);
        }
    };
    OhlcChartRenderer.prototype.line = function (canvas, x1, y1, x2, y2) {
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
    };
    OhlcChartRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    OhlcChartRenderer.prototype.setSettings = function (settings) {
    };
    return OhlcChartRenderer;
}());
exports.OhlcChartRenderer = OhlcChartRenderer;
},{"../core/index":53,"./RenderUtils":158}],156:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * AxisRenderer
 *
 * @classdesc Contains methods for rendering axes.
 */
var index_1 = require("../canvas/index");
var PriceAxisRenderer = (function () {
    function PriceAxisRenderer() {
    }
    PriceAxisRenderer.prototype.render = function (canvas, axis, frame) {
        var grid = axis.getGrid();
        canvas.font = '11px Arial';
        canvas.fillStyle = '#000000';
        canvas.setStrokeStyle('black');
        canvas.beginPath();
        for (var _i = 0, _a = grid.bars; _i < _a.length; _i++) {
            var bar = _a[_i];
            if (bar !== undefined) {
                var y = axis.toX(bar);
                if (y !== undefined) {
                    this.drawBar(canvas, bar, y, grid.precision);
                }
            }
        }
        canvas.stroke();
        canvas.closePath();
    };
    PriceAxisRenderer.prototype.drawBar = function (canvas, value, y, precision) {
        canvas.moveTo(0, y);
        canvas.lineTo(3, y);
        // draw time mark
        var markText = value.toFixed(precision);
        canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Middle);
        canvas.fillText(markText, 4, y);
    };
    return PriceAxisRenderer;
}());
exports.PriceAxisRenderer = PriceAxisRenderer;
},{"../canvas/index":17}],157:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * RenderLocator singleton.
 */
var index_1 = require("../core/index");
var index_2 = require("../model/index");
var CandlestickChartRenderer_1 = require("./CandlestickChartRenderer");
var CandlestickPopupRenderer_1 = require("./CandlestickPopupRenderer");
var CrosshairRenderer_1 = require("./CrosshairRenderer");
var GridRenderer_1 = require("./GridRenderer");
var HollowstickChartRenderer_1 = require("./HollowstickChartRenderer");
var LineChartRenderer_1 = require("./LineChartRenderer");
var LinePopupRenderer_1 = require("./LinePopupRenderer");
var LinestickChartRenderer_1 = require("./LinestickChartRenderer");
var MountainChartRenderer_1 = require("./MountainChartRenderer");
var NumberAxisRenderer_1 = require("./NumberAxisRenderer");
var NumberMarkRenderer_1 = require("./NumberMarkRenderer");
var OhlcChartRenderer_1 = require("./OhlcChartRenderer");
var PriceAxisRenderer_1 = require("./PriceAxisRenderer");
var RenkoChartRenderer_1 = require("./RenkoChartRenderer");
var TimeAxisRenderer_1 = require("./TimeAxisRenderer");
var TimeMarkRenderer_1 = require("./TimeMarkRenderer");
var RenderLocator = (function () {
    function RenderLocator() {
        this.lineChartRender = new LineChartRenderer_1.LineChartRenderer();
        this.timeAxisRender = new TimeAxisRenderer_1.TimeAxisRenderer();
        this.priceAxisRender = new PriceAxisRenderer_1.PriceAxisRenderer();
        this.numberAxisRender = new NumberAxisRenderer_1.NumberAxisRenderer();
        this.candlePopupRenderer = new CandlestickPopupRenderer_1.CandlestickPopupRenderer();
        this.linePopupRenderer = new LinePopupRenderer_1.LinePopupRenderer();
        this.timeMarkRender = new TimeMarkRenderer_1.TimeMarkRenderer();
        this.numberMarkRender = new NumberMarkRenderer_1.NumberMarkRenderer();
        this.crosshairRenderer = new CrosshairRenderer_1.CrosshairRenderer();
        this.gridRenderer = new GridRenderer_1.GridRenderer();
        this.renders = {};
        this.builtinRenders = {};
        this.builtinRenders[index_1.ChartType.candle] = CandlestickChartRenderer_1.CandlestickChartRenderer;
        this.builtinRenders[index_1.ChartType.heikinashi] = CandlestickChartRenderer_1.CandlestickChartRenderer;
        this.builtinRenders[index_1.ChartType.hollow] = HollowstickChartRenderer_1.HollowstickChartRenderer;
        this.builtinRenders[index_1.ChartType.line] = LinestickChartRenderer_1.LinestickChartRenderer;
        this.builtinRenders[index_1.ChartType.mountain] = MountainChartRenderer_1.MountainChartRenderer;
        this.builtinRenders[index_1.ChartType.ohlc] = OhlcChartRenderer_1.OhlcChartRenderer;
        this.builtinRenders[index_1.ChartType.rangebar] = OhlcChartRenderer_1.OhlcChartRenderer;
        this.builtinRenders[index_1.ChartType.renko] = RenkoChartRenderer_1.RenkoChartRenderer;
        this.builtinRenders[index_1.ChartType.linebreak] = RenkoChartRenderer_1.RenkoChartRenderer;
    }
    Object.defineProperty(RenderLocator, "Instance", {
        get: function () {
            return this.instance || (this.instance = new this());
        },
        enumerable: true,
        configurable: true
    });
    RenderLocator.prototype.register = function (chartType, render) {
        this.renders[chartType] = render;
    };
    RenderLocator.prototype.getChartRender = function (dataType, chartType) {
        // First check registered renders
        var render = this.renders[chartType];
        if (render) {
            return new render();
        }
        var obj = new dataType(new Date());
        if (obj instanceof index_2.Point) {
            if (chartType === index_1.ChartType.line) {
                return this.lineChartRender;
            }
        }
        else if (obj instanceof index_2.Candlestick) {
            var renderer = this.builtinRenders[chartType];
            if (renderer) {
                return new renderer();
            }
        }
        else {
            throw new Error('Unexpected data type: ' + dataType);
        }
        throw new Error('Unexpected chart type ' + chartType);
    };
    RenderLocator.prototype.getAxesRender = function (uid) {
        switch (uid) {
            case 'date': return this.timeAxisRender;
            case 'number': return this.numberAxisRender;
            case 'price': return this.priceAxisRender;
            default:
                throw new Error('Unexpected axes render uid: ' + uid);
        }
    };
    RenderLocator.prototype.getPopupRender = function (dataType) {
        var obj = new dataType(new Date());
        if (obj instanceof index_2.Point) {
            return this.linePopupRenderer;
        }
        else if (obj instanceof index_2.Candlestick) {
            return this.candlePopupRenderer;
        }
        else {
            throw new Error('Unexpected data type: ' + dataType);
        }
    };
    RenderLocator.prototype.getMarkRender = function (uid) {
        switch (uid) {
            case 'date': return this.timeMarkRender;
            case 'number': return this.numberMarkRender;
            default:
                throw new Error('Unexpected axes render uid: ' + uid);
        }
    };
    RenderLocator.prototype.getCrosshairRender = function () {
        return this.crosshairRenderer;
    };
    RenderLocator.prototype.getGridRender = function () {
        return this.gridRenderer;
    };
    return RenderLocator;
}());
exports.RenderLocator = RenderLocator;
},{"../core/index":53,"../model/index":142,"./CandlestickChartRenderer":143,"./CandlestickPopupRenderer":144,"./CrosshairRenderer":146,"./GridRenderer":147,"./HollowstickChartRenderer":148,"./LineChartRenderer":149,"./LinePopupRenderer":150,"./LinestickChartRenderer":151,"./MountainChartRenderer":152,"./NumberAxisRenderer":153,"./NumberMarkRenderer":154,"./OhlcChartRenderer":155,"./PriceAxisRenderer":156,"./RenkoChartRenderer":159,"./TimeAxisRenderer":160,"./TimeMarkRenderer":161}],158:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var index_1 = require("../canvas/index");
var RenderUtils = (function () {
    function RenderUtils() {
    }
    RenderUtils.renderLineChart = function (canvas, dataIterator, getPoint, frame, timeAxis, yAxis, closePath) {
        var isFirstPoint = true;
        var firstPoint;
        var lastPoint;
        RenderUtils.iterate(timeAxis, dataIterator, function (data, x) {
            var point = getPoint(data);
            if (point !== undefined && point.uid !== undefined && point.v !== undefined) {
                var y = yAxis.toX(point.v);
                if (isFirstPoint) {
                    canvas.moveTo(x, y);
                    firstPoint = { x: x, y: y };
                    isFirstPoint = false;
                }
                else {
                    canvas.lineTo(x, y);
                    lastPoint = { x: x, y: y };
                }
            }
        });
        if (closePath && firstPoint && lastPoint) {
            canvas.lineTo(lastPoint.x, frame.h - 1);
            canvas.lineTo(firstPoint.x, frame.h - 1);
            canvas.lineTo(firstPoint.x, firstPoint.y);
        }
    };
    RenderUtils.iterate = function (timeaxis, iter, action) {
        if (!iter.goTo(function (item) { return true; })) {
            // end rendering
            return;
        }
        var found = false;
        timeaxis.reset();
        while (timeaxis.moveNext()) {
            var timeUid = timeaxis.current.uid;
            var x = timeaxis.current.x;
            do {
                var data = iter.current;
                if (data.uid.compare(timeUid) === 0) {
                    found = true;
                    break;
                }
                else if (data.uid.compare(timeUid) > 0) {
                    found = false;
                    break;
                }
                if (!iter.moveNext()) {
                    // end rendering
                    return;
                }
            } while (true);
            if (found) {
                action(iter.current, x);
            }
        }
    };
    /**
     * Fills overlap of the line over specified level.
     * @param canvas
     * @param points Points of line
     * @param level Y coordinate to calculate overlapping
     * @param up If true - overlapping from up, false - from bottom.
     * @param fillStyle
     */
    RenderUtils.fillOverlap = function (canvas, points, level, up, fillStyle) {
        if (points.length > 1) {
            var first = points[0];
            var last = points[points.length - 1];
            canvas.beginPath();
            points.forEach(function (p, index) {
                if (p) {
                    (index === 0) ? canvas.moveTo(p.x, p.y) : canvas.lineTo(p.x, p.y);
                }
            });
            canvas.lineTo(last.x, up ? canvas.h : 0);
            canvas.lineTo(first.x, up ? canvas.h : 0);
            canvas.closePath();
            canvas.save();
            canvas.clip();
            canvas.setFillStyle(fillStyle);
            canvas.fillRect(0, up ? 0 : level, canvas.w, up ? level : (canvas.h - level));
            canvas.restore();
        }
    };
    RenderUtils.PATTERN2SEG = function (pattern) {
        switch (pattern) {
            case index_1.LinePattern.Solid: return [];
            case index_1.LinePattern.Dashed: return [5, 10];
            case index_1.LinePattern.Pointed: return [2, 8];
            default: throw new Error("Unexpected line pattern: " + pattern);
        }
    };
    return RenderUtils;
}());
exports.RenderUtils = RenderUtils;
},{"../canvas/index":17}],159:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../core/index");
var RenderUtils_1 = require("./RenderUtils");
var RenkoChartRenderer = (function () {
    function RenkoChartRenderer() {
        this.minCandleWidth = 3;
        this.maxCandleWidth = 21;
    }
    RenkoChartRenderer.prototype.render = function (canvas, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        // Render
        //
        var _this = this;
        // border lines
        canvas.beginPath();
        canvas.setStrokeStyle('#333333');
        // ... left
        canvas.moveTo(frame.x, frame.y);
        canvas.lineTo(frame.x, frame.y + frame.h - 1);
        // ... bottom
        canvas.lineTo(frame.x + frame.w - 1, frame.y + frame.h - 1);
        // ... right
        canvas.lineTo(frame.x + frame.w - 1, frame.y);
        canvas.stroke();
        var candleW = this.calculateBodyWidth(timeAxis, frame.w);
        RenderUtils_1.RenderUtils.iterate(timeAxis, dataIterator, function (candle, x) {
            _this.renderCandle(canvas, timeAxis, yAxis, candle, frame, candleW, x);
        });
    };
    RenkoChartRenderer.prototype.testHitArea = function (hitPoint, dataIterator, 
        //data: Candlestick[],
        frame, timeAxis, yAxis) {
        var candleHit = undefined;
        // const candleW = this.calculateBodyWidth(timeAxis, frame.w);
        // // while (dataIterator.moveNext()) {
        // //     if (this.testHitAreaCandle(hitPoint, timeAxis, yAxis, dataIterator.current, candleW)) {
        // //         candleHit = dataIterator.current;
        // //         break;
        // //     }
        // // }
        // data.forEach((value: Candlestick, index: number) => {
        //     if (this.testHitAreaCandle(hitPoint, timeAxis, yAxis, value, index, candleW)) {
        //         return value;
        //     }
        // });
        return candleHit;
    };
    RenkoChartRenderer.prototype.testHitAreaCandle = function (hitPoint, timeAxis, yAxis, candle, candleW) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return false;
        }
        // TODO: Use prepaired X
        var x = timeAxis.toX(candle.uid);
        // let x = timeAxis.toX(index);
        if (x !== undefined) {
            x = Math.round(x);
            var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
            return (hitPoint.x >= body.x && hitPoint.x <= (body.x + body.w)
                && hitPoint.y >= body.y && hitPoint.y <= (body.y + body.h));
        }
        return false;
    };
    // private renderCandle(
    //     canvas: ICanvas, timeAxis: ITimeAxis, yAxis: IAxis<number>, candle: Candlestick, frame: IRect, candleW: number): void {
    //     if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
    //         return;
    //     }
    //     // // Startin drawing
    //     // canvas.beginPath();
    //     // canvas.lineWidth = 1;
    //     // canvas.setStrokeStyle('#333333');
    //     // //let x = timeAxis.toX(candle.date);
    //     // let x = timeAxis.toX(index);
    //     // x = Math.round(x);
    //     // const body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
    //     // const h = yAxis.toX(candle.h);
    //     // const l = yAxis.toX(candle.l);
    //     // canvas.stroke();
    //     // // Drawing body
    //     // if (candle.c > candle.o) {
    //     //     canvas.setFillStyle('#ffffff');
    //     // } else {
    //     //     canvas.setFillStyle('#000000');
    //     // }
    //     // canvas.fillRect(body.x, body.y, body.w, body.h);
    //     // canvas.strokeRect(body.x, body.y, body.w, body.h);
    // }
    RenkoChartRenderer.prototype.renderCandle = function (canvas, timeAxis, yAxis, candle, frame, candleW, x) {
        if (candle.c === undefined || candle.o === undefined || candle.h === undefined || candle.l === undefined) {
            return;
        }
        // Startin drawing
        canvas.beginPath();
        canvas.lineWidth = 1;
        canvas.setStrokeStyle('#191919');
        // We are not calculating x, as currentX is faster
        // let x = timeAxis.toX(candle.uid);
        // if (x === undefined) {
        //     return;
        // }
        x = Math.round(x);
        var body = this.calculateBody(x, yAxis, candle.o, candle.c, candleW);
        var h = yAxis.toX(candle.h);
        var l = yAxis.toX(candle.l);
        // Drawing upper shadow
        this.line(canvas, x, body.y, x, h);
        // Drawing lower shadow
        this.line(canvas, x, l, x, body.y + body.h);
        canvas.stroke();
        // Drawing body
        if (candle.c > candle.o) {
            canvas.setFillStyle('#F7F7F7'); //#008910');
        }
        else {
            canvas.setFillStyle('#191919'); //#D80300');
        }
        canvas.fillRect(body.x, body.y, body.w, body.h);
        canvas.strokeRect(body.x, body.y, body.w, body.h);
        // // Draw uid
        // canvas.setFillStyle('#111111');
        // const markText = candle.uid;
        // const w = canvas.measureText(markText).width;
        // canvas.setTextBaseLine(CanvasTextBaseLine.Top);
        // canvas.fillText(markText, x - w / 2, body.y);
        // canvas.fillText(markText, x - w / 2, body.y + body.h);
    };
    RenkoChartRenderer.prototype.calculateBody = function (x, yAxis, o, c, candleW) {
        var ocMin = yAxis.toX(Math.max(o, c)); // Inverted Y
        var ocMax = yAxis.toX(Math.min(o, c));
        return { x: x - Math.floor(candleW / 2), y: ocMin, w: candleW, h: ocMax - ocMin };
    };
    RenkoChartRenderer.prototype.calculateBodyWidth = function (timeAxis, frameWidth) {
        return (timeAxis.count > 0) ? frameWidth / timeAxis.count : 0;
        // // const range = timeAxis.range.end.getTime() - timeAxis.range.start.getTime();
        // // if (range === 0 || timeAxis.interval === 0) {
        // //     return this.minCandleWidth;
        // // }
        // // const candlesCount = range / timeAxis.interval;
        // const candlesCount = timeAxis.count; //  range / timeAxis.interval;
        // let w = Math.floor(frameWidth / candlesCount);
        // // make width odd (1, 3, 5, ...)
        // w = w - ((w + 1) % 2);
        // // between minCandleWidth and maxCandleWidth
        // return Math.min(this.maxCandleWidth, Math.max(this.minCandleWidth, w));
    };
    RenkoChartRenderer.prototype.line = function (canvas, x1, y1, x2, y2) {
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
    };
    RenkoChartRenderer.prototype.getSettings = function () {
        return new index_1.SettingSet('renderer');
    };
    RenkoChartRenderer.prototype.setSettings = function (settings) {
    };
    return RenkoChartRenderer;
}());
exports.RenkoChartRenderer = RenkoChartRenderer;
},{"../core/index":53,"./RenderUtils":158}],160:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * AxisRenderer
 *
 * @classdesc Contains methods for rendering axes.
 */
var index_1 = require("../axes/index");
var index_2 = require("../canvas/index");
var TimeAxisRenderer = (function () {
    function TimeAxisRenderer() {
        this.monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    }
    TimeAxisRenderer.prototype.render = function (canvas, axis, frame) {
        var grid = axis.getGrid();
        var range = axis.range;
        var scale = index_1.TimeAutoGrid.selectScale(frame.w, axis.interval, range);
        canvas.font = '11px Arial';
        canvas.fillStyle = '#000000';
        canvas.setStrokeStyle('black');
        canvas.setTextBaseLine(index_2.CanvasTextBaseLine.Top);
        canvas.beginPath();
        grid.reset();
        while (grid.moveNext()) {
            this.drawBar(canvas, grid.current.uid.t, grid.current.x);
        }
        canvas.stroke();
        canvas.closePath();
    };
    TimeAxisRenderer.prototype.drawBar = function (canvas, date, x) {
        canvas.moveTo(x, 0);
        canvas.lineTo(x, 3);
        // draw time mark
        var markText = this.formatDate(date);
        var w = canvas.measureText(markText).width;
        canvas.fillText(markText, x - w / 2, 5);
    };
    TimeAxisRenderer.prototype.formatDate = function (date) {
        // If hours are not 0 or minutes are not 0 then render hh:mm
        // else if 1 Jan then render Year
        // else if 1 day then render Month
        // else render day
        if (date.getUTCHours() !== 0 || date.getUTCMinutes() !== 0) {
            var hh = date.getUTCHours();
            var mm = date.getUTCMinutes();
            return ('0' + hh.toFixed(0)).slice(-2) + ':' + ('0' + mm.toFixed(0)).slice(-2);
        }
        else if (date.getUTCDate() === 1 && date.getUTCMonth() === 0) {
            return "" + date.getUTCFullYear();
        }
        else if (date.getUTCDate() === 1) {
            return "" + this.monthNames[date.getUTCMonth()];
        }
        else {
            return "" + date.getUTCDate();
        }
    };
    return TimeAxisRenderer;
}());
exports.TimeAxisRenderer = TimeAxisRenderer;
},{"../axes/index":14,"../canvas/index":17}],161:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TimeMarkRenderer class.
 */
var index_1 = require("../canvas/index");
var TimeMarkRenderer = (function () {
    function TimeMarkRenderer() {
        this.paddingLeft = 3;
        this.paddingTop = 5;
    }
    TimeMarkRenderer.prototype.render = function (canvas, data, point, frameSize) {
        if (data && data instanceof Date) {
            var hh = data.getUTCHours();
            var mm = data.getUTCMinutes();
            var hhmm = ('0' + hh.toFixed(0)).slice(-2) + ':' + ('0' + mm.toFixed(0)).slice(-2);
            var text = data.getUTCFullYear() + "-" + (data.getUTCMonth() + 1) + "-" + data.getUTCDate() + " " + hhmm;
            var textWidth = canvas.measureText(text).width;
            canvas.fillStyle = '#3F3F3F';
            canvas.fillRect(point.x - textWidth / 2 - this.paddingLeft, point.y, textWidth + this.paddingLeft * 2, 18);
            canvas.font = '11px Arial';
            canvas.fillStyle = '#EAEAEA';
            canvas.setTextBaseLine(index_1.CanvasTextBaseLine.Top);
            canvas.fillText(text, point.x - textWidth / 2, point.y + this.paddingTop);
        }
    };
    return TimeMarkRenderer;
}());
exports.TimeMarkRenderer = TimeMarkRenderer;
},{"../canvas/index":17}],162:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var CandlestickChartRenderer_1 = require("./CandlestickChartRenderer");
exports.CandlestickChartRenderer = CandlestickChartRenderer_1.CandlestickChartRenderer;
var ChartRenderer_1 = require("./ChartRenderer");
exports.ChartRenderer = ChartRenderer_1.ChartRenderer;
var LineChartRenderer_1 = require("./LineChartRenderer");
exports.LineChartRenderer = LineChartRenderer_1.LineChartRenderer;
var LinestickChartRenderer_1 = require("./LinestickChartRenderer");
exports.LinestickChartRenderer = LinestickChartRenderer_1.LinestickChartRenderer;
var PriceAxisRenderer_1 = require("./PriceAxisRenderer");
exports.PriceAxisRenderer = PriceAxisRenderer_1.PriceAxisRenderer;
var RenderLocator_1 = require("./RenderLocator");
exports.RenderLocator = RenderLocator_1.RenderLocator;
var RenderUtils_1 = require("./RenderUtils");
exports.RenderUtils = RenderUtils_1.RenderUtils;
var TimeAxisRenderer_1 = require("./TimeAxisRenderer");
exports.TimeAxisRenderer = TimeAxisRenderer_1.TimeAxisRenderer;
},{"./CandlestickChartRenderer":143,"./ChartRenderer":145,"./LineChartRenderer":149,"./LinestickChartRenderer":151,"./PriceAxisRenderer":156,"./RenderLocator":157,"./RenderUtils":158,"./TimeAxisRenderer":160}],163:[function(require,module,exports){
/**
 * Typed events for TypeScript.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Event = (function () {
    function Event() {
        this.handlers = [];
    }
    Event.prototype.on = function (handler) {
        this.handlers.push(handler);
    };
    Event.prototype.off = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
    };
    Event.prototype.trigger = function (data) {
        this.handlers
            .slice(0)
            .forEach(function (h) { return h(data); });
    };
    return Event;
}());
exports.Event = Event;
/**
 * Throttles event.
 * @param callback Event handler
 * @param limit Limit in milliseconds
 */
function throttle(callback, limit) {
    var wait = false;
    return function (e) {
        if (!wait) {
            callback(e);
            wait = true;
            setTimeout(function () { wait = false; }, limit);
        }
    };
}
exports.throttle = throttle;
},{}],164:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * FixedSizeArray class.
 */
var FixedSizeArray = (function () {
    /**
     * Creates instance of array
     * @param size Maximum amount of elements.
     */
    function FixedSizeArray(size, comparer) {
        this._length = 0;
        this.container = [];
        this.size = size;
        this.comparer = comparer;
    }
    Object.defineProperty(FixedSizeArray.prototype, "length", {
        /**
         * Current amount of items in the array.
         */
        get: function () {
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Indexer
     */
    FixedSizeArray.prototype.getItem = function (index) {
        if (index < 0 || index >= this._length) {
            throw new Error("Index is out of range. index=" + index + ", length=" + this._length);
        }
        return this.container[index];
    };
    FixedSizeArray.prototype.last = function () {
        if (this._length > 0) {
            return this.container[this._length - 1];
        }
        else {
            throw new Error('Array is empty.');
        }
    };
    FixedSizeArray.prototype.lastOrDefault = function () {
        if (this._length > 0) {
            return this.container[this._length - 1];
        }
        else {
            return undefined;
        }
    };
    /**
     * Appends specified element to the end of array.
     * If amount of elements exceeds allowed amount, first element is removed.
     */
    FixedSizeArray.prototype.push = function (element) {
        if (this._length < this.size) {
            this.container[this._length] = element;
            this._length += 1;
        }
        else {
            // shift left
            for (var i = 1; i < this._length; i += 1) {
                this.container[i - 1] = this.container[i];
            }
            this.container[this._length - 1] = element;
        }
    };
    FixedSizeArray.prototype.pushRange = function (elements) {
        var _this = this;
        if (!elements) {
            throw new Error('Argument is null');
        }
        elements.forEach(function (element) {
            _this.push(element);
        });
    };
    /**
     * Determines maximum value.
     * @param accessor
     * @param take If specified, checks only last @take elements
     */
    FixedSizeArray.prototype.max = function (accessor, take) {
        var max = undefined;
        var L = this.container.length;
        this.container.forEach(function (el, index) {
            if (take !== undefined && index < (L - take)) {
                return; // ignore element if take is specified and it is out of range
            }
            var value = accessor(el);
            if (value !== undefined) {
                max = Math.max(value, max !== undefined ? max : Number.NEGATIVE_INFINITY);
            }
        });
        return max;
    };
    /**
     * Determines minimum value.
     * @param accessor
     * @param take If specified, checks only last @take elements
     */
    FixedSizeArray.prototype.min = function (accessor, take) {
        var min = undefined;
        var L = this.container.length;
        this.container.forEach(function (el, index) {
            if (take !== undefined && index < (L - take)) {
                return; // ignore element if take is specified and it is out of range
            }
            var value = accessor(el);
            if (value !== undefined) {
                min = Math.min(value, min !== undefined ? min : Number.POSITIVE_INFINITY);
            }
        });
        return min;
    };
    /**
     * Returns index of max element or -1
     * @param accessor
     */
    FixedSizeArray.prototype.maxIndex = function (accessor) {
        var max = undefined;
        var maxIndex = -1;
        this.container.forEach(function (el, index) {
            var value = accessor(el);
            if (value !== undefined && (max === undefined || (max !== undefined && value > max))) {
                max = value;
                maxIndex = index;
            }
        });
        return maxIndex;
    };
    /**
     * Returns index of min element or -1
     * @param accessor
     */
    FixedSizeArray.prototype.minIndex = function (accessor) {
        var min = undefined;
        var minIndex = -1;
        this.container.forEach(function (el, index) {
            var value = accessor(el);
            if (value !== undefined && (min === undefined || (min !== undefined && value < min))) {
                min = value;
                minIndex = index;
            }
        });
        return minIndex;
    };
    /**
     * Calculates sum of items
     * @param accessor
     * @param take If specified, checks only last @take elements
     */
    FixedSizeArray.prototype.sum = function (accessor, take) {
        var sum = 0;
        var L = this.container.length;
        this.container.forEach(function (el, index) {
            if (take !== undefined && index < (L - take)) {
                return; // ignore element if take is specified and it is out of range
            }
            var value = accessor(el);
            if (value !== undefined) {
                sum += value;
            }
        });
        return sum;
    };
    return FixedSizeArray;
}());
exports.FixedSizeArray = FixedSizeArray;
},{}],165:[function(require,module,exports){
/**
* Commonly used interfaces, that can be used in other projects.
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point = (function () {
    function Point(x, y) {
        this.x = x ? x : 0;
        this.y = y ? y : 0;
    }
    /**
     * Returns new point which is a sum of this and other point. Original point is not changed.
     * @param p
     */
    Point.prototype.add = function (p) {
        return new Point(this.x + p.x, this.y + p.y);
    };
    /**
     * Returns new point which is difference b/w this and other point. Original point is not changed.
     * @param p
     */
    Point.prototype.sub = function (p) {
        return new Point(this.x - p.x, this.y - p.y);
    };
    return Point;
}());
exports.Point = Point;
var PartialPoint = (function () {
    function PartialPoint() {
    }
    return PartialPoint;
}());
exports.PartialPoint = PartialPoint;
var Size = (function () {
    function Size(w, h) {
        this.width = 0;
        this.height = 0;
        this.width = w ? w : 0;
        this.height = h ? h : 0;
    }
    return Size;
}());
exports.Size = Size;
var IdValue = (function () {
    function IdValue(id, value) {
        this.id = id;
        this.value = value;
    }
    return IdValue;
}());
exports.IdValue = IdValue;
},{}],166:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var Event_1 = require("./Event");
exports.Event = Event_1.Event;
exports.throttle = Event_1.throttle;
var FixedSizeArray_1 = require("./FixedSizeArray");
exports.FixedSizeArray = FixedSizeArray_1.FixedSizeArray;
var Interfaces_1 = require("./Interfaces");
exports.IdValue = Interfaces_1.IdValue;
exports.PartialPoint = Interfaces_1.PartialPoint;
exports.Point = Interfaces_1.Point;
exports.Size = Interfaces_1.Size;
},{"./Event":163,"./FixedSizeArray":164,"./Interfaces":165}],167:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utility methods for working with arrays.
 */
var ArrayUtils = (function () {
    function ArrayUtils() {
    }
    /**
     * Merges update array into target array using specified compararer.
     * Equal elements from update override elements from target.
     * Method expects target and update arrays to be in sorted order.
     *
     * @returns New array containing elements from target and update arrays.
     */
    ArrayUtils.merge = function (target, update, comparer, updateFunction) {
        var merged = new Array(target.length + update.length); // preallocate memory
        var ia = 0;
        var ib = 0;
        var actualSize = 0;
        while (ia < target.length || ib < update.length) {
            if (ia < target.length && ib < update.length) {
                // compare dates
                if (comparer(target[ia], update[ib]) < 0) {
                    merged[actualSize] = target[ia];
                    ia += 1;
                }
                else if (comparer(target[ia], update[ib]) > 0) {
                    merged[actualSize] = update[ib];
                    ib += 1;
                }
                else {
                    // Take newest value
                    if (updateFunction) {
                        merged[actualSize] = updateFunction(target[ia], update[ib]);
                    }
                    else {
                        merged[actualSize] = update[ib];
                    }
                    ia += 1;
                    ib += 1;
                }
            }
            else if (ia < target.length) {
                // only A left
                merged[actualSize] = target[ia];
                ia += 1;
            }
            else if (ib < update.length) {
                // only B left
                merged[actualSize] = update[ib];
                ib += 1;
            }
            actualSize += 1;
        }
        merged.length = actualSize;
        return merged;
    };
    return ArrayUtils;
}());
exports.ArrayUtils = ArrayUtils;
},{}],168:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utility operations for dates.
 */
var index_1 = require("../core/index");
var TimeSpan_1 = require("./TimeSpan");
var DateUtils = (function () {
    function DateUtils() {
    }
    DateUtils.utcNow = function () {
        return new Date();
    };
    DateUtils.getUtcDate = function (year, month, day, hour, minute, second, ms) {
        return new Date(Date.UTC(year, month, day || 1, hour || 0, minute || 0, second || 0, ms || 0));
    };
    DateUtils.format14 = function (date) {
        return ('00000000000000' + date.getTime()).slice(-14);
    };
    DateUtils.formatDateISO = function (date) {
        var year = date.getUTCFullYear();
        var month = ('00' + (date.getUTCMonth() + 1)).slice(-2);
        var day = ('00' + date.getUTCDate()).slice(-2);
        return year + "-" + month + "-" + day;
    };
    DateUtils.parseISODate = function (text) {
        if (text) {
            return new Date(text);
        }
        else {
            throw new Error('Argument "text" is undefined');
        }
    };
    /**
     * Returns count of intervals b/w two dates. Both dates should be UTC.
     * @param date1
     * @param date2
     * @param interval
     */
    DateUtils.diffIntervals = function (date1, date2, interval) {
        var diff = Math.abs(date1.getTime() - date2.getTime());
        switch (interval) {
            case index_1.TimeInterval.sec: return Math.floor(diff / 1000);
            case index_1.TimeInterval.min: return Math.floor(diff / (1000 * 60));
            case index_1.TimeInterval.min5: return Math.floor(diff / (1000 * 60 * 5));
            case index_1.TimeInterval.min15: return Math.floor(diff / (1000 * 60 * 15));
            case index_1.TimeInterval.min30: return Math.floor(diff / (1000 * 60 * 30));
            case index_1.TimeInterval.hour: return Math.floor(diff / (1000 * 60 * 60));
            case index_1.TimeInterval.hour4: return Math.floor(diff / (1000 * 60 * 60 * 4));
            case index_1.TimeInterval.hour6: return Math.floor(diff / (1000 * 60 * 60 * 6));
            case index_1.TimeInterval.hour12: return Math.floor(diff / (1000 * 60 * 60 * 12));
            case index_1.TimeInterval.day: return Math.floor(diff / (1000 * 60 * 60 * 24));
            case index_1.TimeInterval.day3: return Math.floor(diff / (1000 * 60 * 60 * 24 * 3));
            case index_1.TimeInterval.week: return Math.floor(diff / (1000 * 60 * 60 * 24 * 7));
            case index_1.TimeInterval.day10: return Math.floor(diff / (1000 * 60 * 60 * 24 * 10));
            case index_1.TimeInterval.month:
                var dateMin = date1 < date2 ? date1 : date2;
                var dateMax = date1 < date2 ? date2 : date1;
                var months = dateMax.getMonth() - dateMin.getMonth()
                    + (12 * (dateMax.getFullYear() - dateMin.getFullYear()));
                // Check that adding diff will not exceed greater date
                var computed = DateUtils.addInterval(dateMin, interval, months);
                return (computed <= dateMax) ? months : Math.max(months - 1, 0);
            default:
                throw new Error("Unexpected interval " + interval);
        }
    };
    DateUtils.addInterval = function (date, interval, times) {
        if (times === void 0) { times = 1; }
        var newDate = new Date(date.getTime());
        switch (interval) {
            // TODO: vanilla JS can incorrectly handle "set*" functions. Check with "daylight saving time".
            case index_1.TimeInterval.sec:
                newDate.setSeconds(date.getSeconds() + times * 1);
                break;
            case index_1.TimeInterval.min:
                newDate.setMinutes(date.getMinutes() + times * 1);
                break;
            case index_1.TimeInterval.min5:
                newDate.setMinutes(date.getMinutes() + times * 5);
                break;
            case index_1.TimeInterval.min15:
                newDate.setMinutes(date.getMinutes() + times * 15);
                break;
            case index_1.TimeInterval.min30:
                newDate.setMinutes(date.getMinutes() + times * 30);
                break;
            case index_1.TimeInterval.hour:
                newDate.setHours(date.getHours() + times * 1);
                break;
            case index_1.TimeInterval.hour4:
                newDate.setHours(date.getHours() + times * 4);
                break;
            case index_1.TimeInterval.hour6:
                newDate.setHours(date.getHours() + times * 6);
                break;
            case index_1.TimeInterval.hour12:
                newDate.setHours(date.getHours() + times * 12);
                break;
            case index_1.TimeInterval.day:
                newDate.setDate(date.getDate() + times * 1);
                break;
            case index_1.TimeInterval.day3:
                newDate.setDate(date.getDate() + times * 3);
                break;
            case index_1.TimeInterval.week:
                newDate.setDate(date.getDate() + times * 7);
                break;
            case index_1.TimeInterval.day10:
                newDate.setDate(date.getDate() + times * 10);
                break;
            case index_1.TimeInterval.month:
                newDate.setMonth(date.getMonth() + times * 1);
                break;
            default:
                throw new Error("Unexpected interval " + interval);
        }
        return newDate;
    };
    DateUtils.substractInterval = function (date, interval) {
        var newDate = new Date(date.getTime());
        switch (interval) {
            // TODO: vanilla JS can incorrectly handle "set*" functions. Check with "daylight saving time".
            case index_1.TimeInterval.sec:
                newDate.setSeconds(date.getSeconds() - 1);
                break;
            case index_1.TimeInterval.min:
                newDate.setMinutes(date.getMinutes() - 1);
                break;
            case index_1.TimeInterval.min5:
                newDate.setMinutes(date.getMinutes() - 5);
                break;
            case index_1.TimeInterval.min15:
                newDate.setMinutes(date.getMinutes() - 15);
                break;
            case index_1.TimeInterval.min30:
                newDate.setMinutes(date.getMinutes() - 30);
                break;
            case index_1.TimeInterval.hour:
                newDate.setHours(date.getHours() - 1);
                break;
            case index_1.TimeInterval.hour4:
                newDate.setHours(date.getHours() - 4);
                break;
            case index_1.TimeInterval.hour6:
                newDate.setHours(date.getHours() - 6);
                break;
            case index_1.TimeInterval.hour12:
                newDate.setHours(date.getHours() - 12);
                break;
            case index_1.TimeInterval.day:
                newDate.setDate(date.getDate() - 1);
                break;
            case index_1.TimeInterval.day3:
                newDate.setDate(date.getDate() - 3);
                break;
            case index_1.TimeInterval.week:
                newDate.setDate(date.getDate() - 7);
                break;
            case index_1.TimeInterval.day10:
                newDate.setDate(date.getDate() - 10);
                break;
            case index_1.TimeInterval.month:
                newDate.setMonth(date.getMonth() - 1);
                break;
            default:
                throw new Error("Unexpected interval " + interval);
        }
        return newDate;
    };
    /**
     * Truncates specified date to the specified interval. Date is expected to be UTC.
     * @param date
     * @param interval
     */
    DateUtils.truncateToInterval = function (date, interval) {
        switch (interval) {
            case index_1.TimeInterval.sec: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_SECONDS(1));
            case index_1.TimeInterval.min: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_MINUTES(1));
            case index_1.TimeInterval.min5: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_MINUTES(5));
            case index_1.TimeInterval.min15: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_MINUTES(15));
            case index_1.TimeInterval.min30: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_MINUTES(30));
            case index_1.TimeInterval.hour: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_HOURS(1));
            case index_1.TimeInterval.hour4: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_HOURS(4));
            case index_1.TimeInterval.hour6: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_HOURS(6));
            case index_1.TimeInterval.hour12: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_HOURS(12));
            case index_1.TimeInterval.day: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_DAYS(1));
            case index_1.TimeInterval.day3: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_DAYS(3));
            case index_1.TimeInterval.week:
                var day = date.getDay();
                var truncated = DateUtils.getUtcDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                truncated.setDate(truncated.getDate() - (day !== 0 ? day - 1 : 6));
                return truncated;
            case index_1.TimeInterval.day10: return DateUtils.truncateToTimeSpan(date, TimeSpan_1.TimeSpan.FROM_DAYS(10));
            case index_1.TimeInterval.month:
                return DateUtils.getUtcDate(date.getUTCFullYear(), date.getUTCMonth(), 1);
            default:
                throw new Error("Unexpected interval " + interval);
        }
    };
    DateUtils.truncateToTimeSpan = function (date, timeSpan) {
        if (timeSpan.totalMilliseconds === 0) {
            return date;
        }
        var dateMilliseconds = date.getTime();
        return new Date(dateMilliseconds - (dateMilliseconds % timeSpan.totalMilliseconds));
    };
    DateUtils.isTruncated = function (date, timeSpan) {
        if (timeSpan.totalMilliseconds === 0) {
            return true;
        }
        var dateMilliseconds = date.getTime();
        return ((dateMilliseconds % timeSpan.totalMilliseconds) === 0);
    };
    DateUtils.isRound = function (date, interval) {
        var truncated = DateUtils.truncateToInterval(date, interval);
        return date.getTime() === truncated.getTime();
    };
    return DateUtils;
}());
exports.DateUtils = DateUtils;
},{"../core/index":53,"./TimeSpan":173}],169:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MINDIST = 0.001;
var DrawUtils = (function () {
    function DrawUtils() {
    }
    /**
     * Checks wether the point lies on the specified line.
     * @param p Point to check.
     * @param p1 Start point of line.
     * @param p2 End point of line.
     */
    DrawUtils.IS_POINT_ON_LINE = function (p, pa, pb, precision) {
        var minx = Math.min(pa.x, pb.x);
        var maxx = Math.max(pa.x, pb.x);
        var miny = Math.min(pa.y, pb.y);
        var maxy = Math.max(pa.y, pb.y);
        // Check hitting the rectangle area around the line
        if (p.x < minx - precision || p.x > maxx + precision || p.y < miny - precision || p.y > maxy + precision) {
            return false;
        }
        var distx = pb.x - pa.x;
        var disty = pb.y - pa.y;
        if (Math.abs(distx) > MINDIST && Math.abs(disty) > MINDIST) {
            // Compute distance from a point to a line
            var dist = Math.abs(disty * p.x - distx * p.y + pb.x * pa.y - pb.y * pa.x)
                / Math.sqrt(disty * disty + distx * distx);
            return dist < precision;
        }
        return true;
    };
    DrawUtils.IS_POINT_ON_QUADCURVE = function (p, pa, pb, pc, precision) {
        var x = p.x;
        var y = p.y;
        var x1 = pa.x;
        var y1 = pa.y;
        var x2 = pb.x;
        var y2 = pb.y;
        var x3 = pc.x;
        var y3 = pc.y;
        var a = (x1 - 2 * x2 + x3);
        var b = 2 * x2 - 2 * x1;
        // Find possible "t" values
        var values = DrawUtils.SOLVE_QUAD(a, b, x1 - x).sort();
        if (values.length === 0) {
            return false;
        }
        // Compute correspondent "y" values with "t" values
        var testedY = [];
        values.forEach(function (t) {
            testedY.push((1 - t) * (1 - t) * y1 + 2 * (1 - t) * t * y2 + t * t * y3);
        });
        // Test point "y" value 
        return testedY.some(function (yt) {
            return (y >= yt - precision && y <= yt + precision);
        });
    };
    /**
     * Solves quadratic equation.
     * @param a
     * @param b
     * @param c
     */
    DrawUtils.SOLVE_QUAD = function (a, b, c) {
        if (a === 0) {
            return b !== 0 ? [-c / b] : [];
        }
        var d = b * b - 4 * a * c;
        if (d < 0) {
            return [];
        }
        else {
            return d === 0
                ? ([-b / (2 * a)])
                : [(-b + Math.sqrt(d)) / (2 * a),
                    (-b - Math.sqrt(d)) / (2 * a)];
        }
    };
    /**
     * Computes distance from a point to the specified line
     * @param p
     * @param pa
     * @param pb
     */
    DrawUtils.DIST_TO_LINE = function (p, pa, pb) {
        var distx = pb.x - pa.x;
        var disty = pb.y - pa.y;
        return (distx !== 0 || disty !== 0)
            ? Math.abs(disty * p.x - distx * p.y + pb.x * pa.y - pb.y * pa.x)
                / Math.sqrt(disty * disty + distx * distx)
            : 0;
    };
    DrawUtils.DIST = function (pa, pb) {
        var distx = pb.x - pa.x;
        var disty = pb.y - pa.y;
        return (distx !== 0 || disty !== 0)
            ? Math.sqrt(Math.pow(pb.x - pa.x, 2) + Math.pow(pb.y - pa.y, 2))
            : 0;
    };
    DrawUtils.MID = function (pa, pb) {
        return { x: (pa.x + pb.x) / 2, y: (pa.y + pb.y) / 2 };
    };
    /**
     * Returns angle of the specified line in radians
     * @param pa
     * @param pb
     */
    DrawUtils.ANGLE = function (pa, pb) {
        // angle in radians
        return Math.atan2(pb.y - pa.y, pb.x - pa.x); // in degrees: 
        // // angle in degrees
        // var angleDeg = Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
    };
    /**
     * Determines if point A is near point B (i.e. distance between points is less then precision).
     * @param pa
     * @param pb
     * @param precision
     */
    DrawUtils.IS_POINT_OVER = function (pa, pb, precision) {
        return Math.abs(pa.x - pb.x) < precision
            && Math.abs(pa.y - pb.y) < precision;
    };
    /**
     * Checks wether the point lies on the specified rectangle.
     */
    DrawUtils.IS_POINT_OVER_RECT = function (p, rect, precision) {
        return (p.x >= rect.x - precision && p.x <= rect.x + rect.w + precision
            && p.y >= rect.y - precision && p.y <= rect.y + rect.h + precision);
    };
    /**
     * Linear function by two points. Returns Y value for the specifed X value.
     * @param pa
     * @param pb
     * @param x
     */
    DrawUtils.LINEAR = function (pa, pb, x) {
        var distx = pb.x - pa.x;
        return (Math.abs(distx) > MINDIST)
            ? ((pb.x * pa.y - pa.x * pb.y) - (pa.y - pb.y) * x) / distx
            : undefined; // for vertical line
    };
    DrawUtils.EXTEND = function (pa, pb, frame) {
        var x1 = pa.x;
        var y1 = pa.y;
        var x2 = pb.x;
        var y2 = pb.y;
        var a = y2 - y1;
        var b = x1 - x2;
        var c = x2 * y1 - x1 * y2;
        if (Math.abs(a) > Math.abs(b)) {
            // extending Y
            var y = void 0;
            if (y1 > y2) {
                // to lower values
                y = frame.y;
            }
            else {
                // to greater values
                y = frame.y + frame.h;
            }
            var x = (a !== 0) ? -(b * y + c) / a : y1;
            return { x: x, y: y };
        }
        else {
            // extending X
            var x = void 0;
            if (x1 > x2) {
                // to lower values
                x = frame.x;
            }
            else {
                // to greater values
                x = frame.x + frame.w;
            }
            var y = (b !== 0) ? -(a * x + c) / b : x1;
            return { x: x, y: y };
        }
    };
    return DrawUtils;
}());
exports.DrawUtils = DrawUtils;
},{}],170:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * JSON utils
 */
var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
var reMsAjax = /^\/Date\((d|-|.*)\)[\/|\\]$/;
var JsonUtils = (function () {
    function JsonUtils() {
    }
    /**
     * Parses date from string to Date object.
     * Used with JSON parser.
     * @param key Property name.
     * @param value String value to parse.
     */
    JsonUtils.DATEPARSER = function (key, value) {
        if (typeof value === 'string') {
            var a = reISO.exec(value);
            if (a) {
                return new Date(value);
            }
            a = reMsAjax.exec(value);
            if (a) {
                var b = a[1].split(/[-+,.]/);
                return new Date(b[0] ? +b[0] : 0 - +b[1]);
            }
        }
        return value;
    };
    ;
    return JsonUtils;
}());
exports.JsonUtils = JsonUtils;
},{}],171:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NumberUtils class.
 *
 * @class Utilities for numbers.
 */
var NumberUtils = (function () {
    function NumberUtils() {
    }
    /**
    * Returns a number rounded to fractionDigits after point.
    *
    * @param n number to round
    * @param fractionDigits how many digits after point.
    */
    NumberUtils.roundTo = function (n, fractionDigits) {
        if (fractionDigits === void 0) { fractionDigits = 0; }
        if (typeof n === 'number' && typeof fractionDigits === 'number') {
            var num = (n + 'e+' + fractionDigits);
            return +(Math.round(num) + 'e-' + fractionDigits);
        }
        return NaN;
    };
    return NumberUtils;
}());
exports.NumberUtils = NumberUtils;
},{}],172:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var StringUtils = (function () {
    function StringUtils() {
    }
    /**
     * Compares strings before specified character.
     * @param lhs
     * @param rhs
     * @param character
     */
    StringUtils.compare = function (lhs, rhs, character) {
        var i1 = lhs.indexOf(character);
        var i2 = rhs.indexOf(character);
        return ((i1 !== -1) ? lhs.substring(0, i1) : lhs)
            === ((i2 !== -1) ? rhs.substring(0, i2) : rhs);
    };
    return StringUtils;
}());
exports.StringUtils = StringUtils;
},{}],173:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TimeSpan class.
 */
var TimeSpan = (function () {
    function TimeSpan(value, unit) {
        switch (unit) {
            case TimeUnit.Seconds:
                this._totalMilliseconds = value * 1000;
                break;
            case TimeUnit.Minutes:
                this._totalMilliseconds = value * 60000;
                break;
            case TimeUnit.Hours:
                this._totalMilliseconds = value * 3600000;
                break;
            case TimeUnit.Days:
                this._totalMilliseconds = value * 86400000;
                break;
            default:
                throw new Error("Unexpected TimeUnit value " + unit);
        }
    }
    Object.defineProperty(TimeSpan.prototype, "totalMilliseconds", {
        get: function () {
            return this._totalMilliseconds;
        },
        enumerable: true,
        configurable: true
    });
    TimeSpan.FROM_DAYS = function (value) {
        return new TimeSpan(value, TimeUnit.Days);
    };
    TimeSpan.FROM_HOURS = function (value) {
        return new TimeSpan(value, TimeUnit.Hours);
    };
    TimeSpan.FROM_MINUTES = function (value) {
        return new TimeSpan(value, TimeUnit.Minutes);
    };
    TimeSpan.FROM_SECONDS = function (value) {
        return new TimeSpan(value, TimeUnit.Seconds);
    };
    TimeSpan.COMPARE = function (l, r) {
        return l._totalMilliseconds - r._totalMilliseconds;
    };
    return TimeSpan;
}());
exports.TimeSpan = TimeSpan;
var TimeUnit;
(function (TimeUnit) {
    TimeUnit[TimeUnit["Seconds"] = 0] = "Seconds";
    TimeUnit[TimeUnit["Minutes"] = 1] = "Minutes";
    TimeUnit[TimeUnit["Hours"] = 2] = "Hours";
    TimeUnit[TimeUnit["Days"] = 3] = "Days";
    TimeUnit[TimeUnit["Months"] = 4] = "Months";
})(TimeUnit || (TimeUnit = {}));
},{}],174:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var UidUtils = (function () {
    function UidUtils() {
    }
    UidUtils.NEWUID = function () {
        return (Math.random() * 100000).toString();
    };
    return UidUtils;
}());
exports.UidUtils = UidUtils;
},{}],175:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var ArrayUtils_1 = require("./ArrayUtils");
exports.ArrayUtils = ArrayUtils_1.ArrayUtils;
var DateUtils_1 = require("./DateUtils");
exports.DateUtils = DateUtils_1.DateUtils;
var DrawUtils_1 = require("./DrawUtils");
exports.DrawUtils = DrawUtils_1.DrawUtils;
var JsonUtils_1 = require("./JsonUtils");
exports.JsonUtils = JsonUtils_1.JsonUtils;
var NumberUtils_1 = require("./NumberUtils");
exports.NumberUtils = NumberUtils_1.NumberUtils;
var StringUtils_1 = require("./StringUtils");
exports.StringUtils = StringUtils_1.StringUtils;
var TimeSpan_1 = require("./TimeSpan");
exports.TimeSpan = TimeSpan_1.TimeSpan;
var UidUtils_1 = require("./UidUtils");
exports.UidUtils = UidUtils_1.UidUtils;
},{"./ArrayUtils":167,"./DateUtils":168,"./DrawUtils":169,"./JsonUtils":170,"./NumberUtils":171,"./StringUtils":172,"./TimeSpan":173,"./UidUtils":174}],176:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Main module.
 */
var component_1 = require("./lib/component");
exports.Chart = component_1.Chart;
exports.ChartBoard = component_1.ChartBoard;
exports.FigureComponent = component_1.FigureComponent;
var axes = require("./lib/axes");
exports.axes = axes;
var canvas = require("./lib/canvas");
exports.canvas = canvas;
var core = require("./lib/core");
exports.core = core;
var data = require("./lib/data");
exports.data = data;
var drawing = require("./lib/drawing");
exports.drawing = drawing;
var indicator = require("./lib/indicator");
exports.indicator = indicator;
var model = require("./lib/model");
exports.model = model;
var render = require("./lib/render");
exports.render = render;
var shared = require("./lib/shared");
exports.shared = shared;
var utils = require("./lib/utils");
exports.utils = utils;
function register(stateId, state) {
    // TODO: should be separate instance for each board
    component_1.StateFabric.instance.setState(stateId, state);
}
// Register built-in states
register('hover', component_1.HoverState.instance);
register('movechart', component_1.MoveChartState.instance);
// Register built-in drawing tools
register('curve', drawing.DrawCurveState.instance);
register('line', drawing.DrawLineState.instance);
register('hline', drawing.DrawHorizontalLineState.instance);
register('vline', drawing.DrawVerticalLineState.instance);
register('rect', drawing.DrawRectState.instance);
register('triangle', drawing.DrawTriangleState.instance);
register('path', drawing.DrawPathState.instance);
register('pitchfork', drawing.DrawPitchforkState.instance);
register('text', drawing.DrawTextState.instance);
register('ellipse', drawing.DrawEllipseState.instance);
register('trendchannel', drawing.DrawTrendChannelState.instance);
register('daterange', drawing.DrawDateRangeState.instance);
register('fibofan', drawing.DrawFiboFanState.instance);
register('fibolevel', drawing.DrawFiboLevelState.instance);
register('fiboprojection', drawing.DrawFiboProjectionState.instance);
register('fibotimeprojection', drawing.DrawFiboTimeProjectionState.instance);
register('gannfan', drawing.DrawGannFanState.instance);
register('ohlcproj', drawing.DrawOhlcProjState.instance);
// Register drawing figures
component_1.FigureFactory.instance.register(component_1.FigureType.curve, drawing.CurveFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.line, drawing.LineFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.hline, drawing.HorizontalLineFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.vline, drawing.VerticalLineFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.rect, drawing.RectFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.triangle, drawing.TriangleFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.path, drawing.PathFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.pitchfork, drawing.PitchforkFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.text, drawing.TextFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.ellipse, drawing.EllipseFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.trendchannel, drawing.TrendChannelFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.daterange, drawing.DateRangeFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.fibofan, drawing.FiboFanFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.fibolevel, drawing.FiboLevelFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.fiboprojection, drawing.FiboProjectionFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.fibotimeprojection, drawing.FiboTimeProjectionFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.gannfan, drawing.GannFanFigureComponent);
component_1.FigureFactory.instance.register(component_1.FigureType.ohlcproj, drawing.OhlcProjFigureComponent);
var states = {
    register: register
};
exports.states = states;
// Register built-in indicators
indicator.register('alligator', indicator.AlligatorIndicator);
indicator.register('bollinger', indicator.BollingerIndicator);
indicator.register('SSTOC', indicator.SlowStochasticOscillator);
indicator.register('FSTOC', indicator.FastStochasticOscillator);
indicator.register('CCI', indicator.CCIOscillator);
indicator.register('COR', indicator.CORIndicator);
indicator.register('DEMA', indicator.DEMAIndicator);
indicator.register('DIX', indicator.DIXOscillator);
indicator.register('DMI', indicator.DMIIndicator);
indicator.register('DSSBR', indicator.DSSBROscillator);
indicator.register('EMA', indicator.EMAIndicator);
indicator.register('MACD', indicator.MACDIndicator);
indicator.register('MOM', indicator.MOMIndicator);
indicator.register('MD', indicator.MDIndicator);
indicator.register('ADX', indicator.ADXIndicator);
indicator.register('ATR', indicator.ATRIndicator);
indicator.register('ARO', indicator.AroonIndicator);
indicator.register('AOS', indicator.AroonOscillator);
indicator.register('HHLL', indicator.HHLLIndicator);
indicator.register('IKH', indicator.IKHIndicator);
indicator.register('OBOS', indicator.OBOSOscillator);
indicator.register('PCR', indicator.PCROscillator);
indicator.register('PP', indicator.PPIndicator);
indicator.register('PSAR', indicator.PSARIndicator);
indicator.register('RB', indicator.RBIndicator);
indicator.register('STDEV', indicator.STDEVIndicator);
indicator.register('TP', indicator.TPIndicator);
indicator.register('RATIO', indicator.RATIOIndicator);
indicator.register('RSI', indicator.RSIOscillator);
indicator.register('RSL', indicator.RSLOscillator);
indicator.register('ROC', indicator.ROCIndicator);
indicator.register('ST', indicator.STIndicator);
indicator.register('SMA', indicator.SMAIndicator);
indicator.register('SMMA', indicator.SMMAIndicator);
indicator.register('TEMA', indicator.TEMAIndicator);
indicator.register('TMA', indicator.TMAIndicator);
indicator.register('VOLA', indicator.VOLAIndicator);
indicator.register('WMA', indicator.WMAIndicator);
// Register built-in renderers
render.RenderLocator.Instance.register('alligator', indicator.AlligatorIndicatorRenderer);
render.RenderLocator.Instance.register('bollinger', indicator.BollingerIndicatorRenderer);
render.RenderLocator.Instance.register('SSTOC', indicator.StochasticOscillatorRenderer);
render.RenderLocator.Instance.register('FSTOC', indicator.StochasticOscillatorRenderer);
render.RenderLocator.Instance.register('CCI', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('COR', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('DEMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('DMI', indicator.DMIIndicatorRenderer);
render.RenderLocator.Instance.register('EMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('SMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('SMMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('TEMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('TMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('WMA', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('ADX', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('ATR', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('ARO', indicator.AroonIndicatorRenderer);
render.RenderLocator.Instance.register('AOS', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('HHLL', indicator.HHLLIndicatorRenderer);
render.RenderLocator.Instance.register('IKH', indicator.IKHIndicatorRenderer);
render.RenderLocator.Instance.register('PSAR', indicator.PSARIndicatorRenderer);
render.RenderLocator.Instance.register('RB', indicator.RBIndicatorRenderer);
render.RenderLocator.Instance.register('STDEV', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('TP', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('RATIO', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('RSI', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('RSL', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('MOM', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('ROC', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('OBOS', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('DIX', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('DSSBR', indicator.DSSBROscillatorRenderer);
render.RenderLocator.Instance.register('PCR', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('PP', indicator.PPIndicatorRenderer);
render.RenderLocator.Instance.register('MD', render.LinestickChartRenderer);
render.RenderLocator.Instance.register('MACD', indicator.MACDIndicatorRenderer);
render.RenderLocator.Instance.register('ST', indicator.STIndicatorRenderer);
render.RenderLocator.Instance.register('VOLA', render.LinestickChartRenderer);
var lychart = {
    // types:
    Chart: component_1.Chart,
    ChartBoard: component_1.ChartBoard,
    FigureComponent: component_1.FigureComponent,
    // namespaces:
    axes: axes,
    canvas: canvas,
    core: core,
    data: data,
    drawing: drawing,
    indicator: indicator,
    model: model,
    render: render,
    states: states,
    shared: shared,
    utils: utils
};
window.lychart = lychart;
},{"./lib/axes":14,"./lib/canvas":17,"./lib/component":38,"./lib/core":53,"./lib/data":71,"./lib/drawing":92,"./lib/indicator":134,"./lib/model":142,"./lib/render":162,"./lib/shared":166,"./lib/utils":175}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
